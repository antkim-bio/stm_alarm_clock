
stm32_alarm_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007560  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08007710  08007710  00017710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007910  08007910  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007910  08007910  00017910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007918  08007918  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007918  08007918  00017918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800791c  0800791c  0001791c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08007920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  200000d4  080079f4  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  080079f4  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ad7  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fe7  00000000  00000000  00034bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00037bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  00038fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026603  00000000  00000000  0003a260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015dcf  00000000  00000000  00060863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e738b  00000000  00000000  00076632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015d9bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d6c  00000000  00000000  0015da10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080076f8 	.word	0x080076f8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000d8 	.word	0x200000d8
 80001ec:	080076f8 	.word	0x080076f8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a0d      	ldr	r2, [pc, #52]	; (80005d8 <HAL_Init+0x40>)
 80005a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <HAL_Init+0x40>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <HAL_Init+0x40>)
 80005ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <HAL_Init+0x40>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <HAL_Init+0x40>)
 80005ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c0:	2003      	movs	r0, #3
 80005c2:	f000 fc95 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 f808 	bl	80005dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005cc:	f005 fc08 	bl	8005de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d0:	2300      	movs	r3, #0
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40023c00 	.word	0x40023c00

080005dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_InitTick+0x54>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <HAL_InitTick+0x58>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4619      	mov	r1, r3
 80005ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fcad 	bl	8000f5a <HAL_SYSTICK_Config>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000606:	2301      	movs	r3, #1
 8000608:	e00e      	b.n	8000628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b0f      	cmp	r3, #15
 800060e:	d80a      	bhi.n	8000626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000610:	2200      	movs	r2, #0
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	f04f 30ff 	mov.w	r0, #4294967295
 8000618:	f000 fc75 	bl	8000f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800061c:	4a06      	ldr	r2, [pc, #24]	; (8000638 <HAL_InitTick+0x5c>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000622:	2300      	movs	r3, #0
 8000624:	e000      	b.n	8000628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000626:	2301      	movs	r3, #1
}
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2000006c 	.word	0x2000006c
 8000634:	20000004 	.word	0x20000004
 8000638:	20000000 	.word	0x20000000

0800063c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_IncTick+0x20>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <HAL_IncTick+0x24>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4413      	add	r3, r2
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <HAL_IncTick+0x24>)
 800064e:	6013      	str	r3, [r2, #0]
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000004 	.word	0x20000004
 8000660:	20000104 	.word	0x20000104

08000664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  return uwTick;
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <HAL_GetTick+0x14>)
 800066a:	681b      	ldr	r3, [r3, #0]
}
 800066c:	4618      	mov	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20000104 	.word	0x20000104

0800067c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000684:	f7ff ffee 	bl	8000664 <HAL_GetTick>
 8000688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000694:	d005      	beq.n	80006a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <HAL_Delay+0x44>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4413      	add	r3, r2
 80006a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006a2:	bf00      	nop
 80006a4:	f7ff ffde 	bl	8000664 <HAL_GetTick>
 80006a8:	4602      	mov	r2, r0
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d8f7      	bhi.n	80006a4 <HAL_Delay+0x28>
  {
  }
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000004 	.word	0x20000004

080006c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006cc:	2300      	movs	r3, #0
 80006ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d101      	bne.n	80006da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e033      	b.n	8000742 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d109      	bne.n	80006f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f005 fba4 	bl	8005e30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2200      	movs	r2, #0
 80006ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fa:	f003 0310 	and.w	r3, r3, #16
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d118      	bne.n	8000734 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000706:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800070a:	f023 0302 	bic.w	r3, r3, #2
 800070e:	f043 0202 	orr.w	r2, r3, #2
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f000 fa1e 	bl	8000b58 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000726:	f023 0303 	bic.w	r3, r3, #3
 800072a:	f043 0201 	orr.w	r2, r3, #1
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	641a      	str	r2, [r3, #64]	; 0x40
 8000732:	e001      	b.n	8000738 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000734:	2301      	movs	r3, #1
 8000736:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2200      	movs	r2, #0
 800073c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000740:	7bfb      	ldrb	r3, [r7, #15]
}
 8000742:	4618      	mov	r0, r3
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800075e:	2b01      	cmp	r3, #1
 8000760:	d101      	bne.n	8000766 <HAL_ADC_Start+0x1a>
 8000762:	2302      	movs	r3, #2
 8000764:	e0a5      	b.n	80008b2 <HAL_ADC_Start+0x166>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2201      	movs	r2, #1
 800076a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	2b01      	cmp	r3, #1
 800077a:	d018      	beq.n	80007ae <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	689a      	ldr	r2, [r3, #8]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f042 0201 	orr.w	r2, r2, #1
 800078a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800078c:	4b4c      	ldr	r3, [pc, #304]	; (80008c0 <HAL_ADC_Start+0x174>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a4c      	ldr	r2, [pc, #304]	; (80008c4 <HAL_ADC_Start+0x178>)
 8000792:	fba2 2303 	umull	r2, r3, r2, r3
 8000796:	0c9a      	lsrs	r2, r3, #18
 8000798:	4613      	mov	r3, r2
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	4413      	add	r3, r2
 800079e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80007a0:	e002      	b.n	80007a8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	3b01      	subs	r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1f9      	bne.n	80007a2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	689b      	ldr	r3, [r3, #8]
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d179      	bne.n	80008b0 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007c4:	f023 0301 	bic.w	r3, r3, #1
 80007c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d007      	beq.n	80007ee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007fa:	d106      	bne.n	800080a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000800:	f023 0206 	bic.w	r2, r3, #6
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	645a      	str	r2, [r3, #68]	; 0x44
 8000808:	e002      	b.n	8000810 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2200      	movs	r2, #0
 800080e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2200      	movs	r2, #0
 8000814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000818:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <HAL_ADC_Start+0x17c>)
 800081a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000824:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	f003 031f 	and.w	r3, r3, #31
 800082e:	2b00      	cmp	r3, #0
 8000830:	d12a      	bne.n	8000888 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a25      	ldr	r2, [pc, #148]	; (80008cc <HAL_ADC_Start+0x180>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d015      	beq.n	8000868 <HAL_ADC_Start+0x11c>
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a23      	ldr	r2, [pc, #140]	; (80008d0 <HAL_ADC_Start+0x184>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d105      	bne.n	8000852 <HAL_ADC_Start+0x106>
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <HAL_ADC_Start+0x17c>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	f003 031f 	and.w	r3, r3, #31
 800084e:	2b00      	cmp	r3, #0
 8000850:	d00a      	beq.n	8000868 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <HAL_ADC_Start+0x188>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d129      	bne.n	80008b0 <HAL_ADC_Start+0x164>
 800085c:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <HAL_ADC_Start+0x17c>)
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	f003 0310 	and.w	r3, r3, #16
 8000864:	2b00      	cmp	r3, #0
 8000866:	d123      	bne.n	80008b0 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000872:	2b00      	cmp	r3, #0
 8000874:	d11c      	bne.n	80008b0 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	689a      	ldr	r2, [r3, #8]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	e013      	b.n	80008b0 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0f      	ldr	r2, [pc, #60]	; (80008cc <HAL_ADC_Start+0x180>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d10e      	bne.n	80008b0 <HAL_ADC_Start+0x164>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800089c:	2b00      	cmp	r3, #0
 800089e:	d107      	bne.n	80008b0 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	689a      	ldr	r2, [r3, #8]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80008ae:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3714      	adds	r7, #20
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	2000006c 	.word	0x2000006c
 80008c4:	431bde83 	.word	0x431bde83
 80008c8:	40012300 	.word	0x40012300
 80008cc:	40012000 	.word	0x40012000
 80008d0:	40012100 	.word	0x40012100
 80008d4:	40012200 	.word	0x40012200

080008d8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
	...

080008f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000908:	2b01      	cmp	r3, #1
 800090a:	d101      	bne.n	8000910 <HAL_ADC_ConfigChannel+0x1c>
 800090c:	2302      	movs	r3, #2
 800090e:	e113      	b.n	8000b38 <HAL_ADC_ConfigChannel+0x244>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2201      	movs	r2, #1
 8000914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b09      	cmp	r3, #9
 800091e:	d925      	bls.n	800096c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	68d9      	ldr	r1, [r3, #12]
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	b29b      	uxth	r3, r3
 800092c:	461a      	mov	r2, r3
 800092e:	4613      	mov	r3, r2
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	4413      	add	r3, r2
 8000934:	3b1e      	subs	r3, #30
 8000936:	2207      	movs	r2, #7
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	43da      	mvns	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	400a      	ands	r2, r1
 8000944:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	68d9      	ldr	r1, [r3, #12]
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	689a      	ldr	r2, [r3, #8]
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	b29b      	uxth	r3, r3
 8000956:	4618      	mov	r0, r3
 8000958:	4603      	mov	r3, r0
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	4403      	add	r3, r0
 800095e:	3b1e      	subs	r3, #30
 8000960:	409a      	lsls	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	430a      	orrs	r2, r1
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	e022      	b.n	80009b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	6919      	ldr	r1, [r3, #16]
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	b29b      	uxth	r3, r3
 8000978:	461a      	mov	r2, r3
 800097a:	4613      	mov	r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	4413      	add	r3, r2
 8000980:	2207      	movs	r2, #7
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43da      	mvns	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	400a      	ands	r2, r1
 800098e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	6919      	ldr	r1, [r3, #16]
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	689a      	ldr	r2, [r3, #8]
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	4618      	mov	r0, r3
 80009a2:	4603      	mov	r3, r0
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	4403      	add	r3, r0
 80009a8:	409a      	lsls	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	430a      	orrs	r2, r1
 80009b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d824      	bhi.n	8000a04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685a      	ldr	r2, [r3, #4]
 80009c4:	4613      	mov	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4413      	add	r3, r2
 80009ca:	3b05      	subs	r3, #5
 80009cc:	221f      	movs	r2, #31
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43da      	mvns	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	400a      	ands	r2, r1
 80009da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	4618      	mov	r0, r3
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685a      	ldr	r2, [r3, #4]
 80009ee:	4613      	mov	r3, r2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	4413      	add	r3, r2
 80009f4:	3b05      	subs	r3, #5
 80009f6:	fa00 f203 	lsl.w	r2, r0, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	430a      	orrs	r2, r1
 8000a00:	635a      	str	r2, [r3, #52]	; 0x34
 8000a02:	e04c      	b.n	8000a9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	2b0c      	cmp	r3, #12
 8000a0a:	d824      	bhi.n	8000a56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685a      	ldr	r2, [r3, #4]
 8000a16:	4613      	mov	r3, r2
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	4413      	add	r3, r2
 8000a1c:	3b23      	subs	r3, #35	; 0x23
 8000a1e:	221f      	movs	r2, #31
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	43da      	mvns	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	400a      	ands	r2, r1
 8000a2c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685a      	ldr	r2, [r3, #4]
 8000a40:	4613      	mov	r3, r2
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	4413      	add	r3, r2
 8000a46:	3b23      	subs	r3, #35	; 0x23
 8000a48:	fa00 f203 	lsl.w	r2, r0, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	430a      	orrs	r2, r1
 8000a52:	631a      	str	r2, [r3, #48]	; 0x30
 8000a54:	e023      	b.n	8000a9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	4613      	mov	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	4413      	add	r3, r2
 8000a66:	3b41      	subs	r3, #65	; 0x41
 8000a68:	221f      	movs	r2, #31
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	400a      	ands	r2, r1
 8000a76:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	4618      	mov	r0, r3
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685a      	ldr	r2, [r3, #4]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	4413      	add	r3, r2
 8000a90:	3b41      	subs	r3, #65	; 0x41
 8000a92:	fa00 f203 	lsl.w	r2, r0, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a9e:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <HAL_ADC_ConfigChannel+0x250>)
 8000aa0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a28      	ldr	r2, [pc, #160]	; (8000b48 <HAL_ADC_ConfigChannel+0x254>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d10f      	bne.n	8000acc <HAL_ADC_ConfigChannel+0x1d8>
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b12      	cmp	r3, #18
 8000ab2:	d10b      	bne.n	8000acc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a1d      	ldr	r2, [pc, #116]	; (8000b48 <HAL_ADC_ConfigChannel+0x254>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d12b      	bne.n	8000b2e <HAL_ADC_ConfigChannel+0x23a>
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <HAL_ADC_ConfigChannel+0x258>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d003      	beq.n	8000ae8 <HAL_ADC_ConfigChannel+0x1f4>
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b11      	cmp	r3, #17
 8000ae6:	d122      	bne.n	8000b2e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <HAL_ADC_ConfigChannel+0x258>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d111      	bne.n	8000b2e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_ADC_ConfigChannel+0x25c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <HAL_ADC_ConfigChannel+0x260>)
 8000b10:	fba2 2303 	umull	r2, r3, r2, r3
 8000b14:	0c9a      	lsrs	r2, r3, #18
 8000b16:	4613      	mov	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b20:	e002      	b.n	8000b28 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	3b01      	subs	r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1f9      	bne.n	8000b22 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	40012300 	.word	0x40012300
 8000b48:	40012000 	.word	0x40012000
 8000b4c:	10000012 	.word	0x10000012
 8000b50:	2000006c 	.word	0x2000006c
 8000b54:	431bde83 	.word	0x431bde83

08000b58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b60:	4b79      	ldr	r3, [pc, #484]	; (8000d48 <ADC_Init+0x1f0>)
 8000b62:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	431a      	orrs	r2, r3
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	6859      	ldr	r1, [r3, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	691b      	ldr	r3, [r3, #16]
 8000b98:	021a      	lsls	r2, r3, #8
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	685a      	ldr	r2, [r3, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000bb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	6859      	ldr	r1, [r3, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689a      	ldr	r2, [r3, #8]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000bd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	6899      	ldr	r1, [r3, #8]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	68da      	ldr	r2, [r3, #12]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	430a      	orrs	r2, r1
 8000be4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bea:	4a58      	ldr	r2, [pc, #352]	; (8000d4c <ADC_Init+0x1f4>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d022      	beq.n	8000c36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000bfe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	6899      	ldr	r1, [r3, #8]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	689a      	ldr	r2, [r3, #8]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	6899      	ldr	r1, [r3, #8]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	430a      	orrs	r2, r1
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	e00f      	b.n	8000c56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	689a      	ldr	r2, [r3, #8]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	689a      	ldr	r2, [r3, #8]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c54:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f022 0202 	bic.w	r2, r2, #2
 8000c64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	6899      	ldr	r1, [r3, #8]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	7e1b      	ldrb	r3, [r3, #24]
 8000c70:	005a      	lsls	r2, r3, #1
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	430a      	orrs	r2, r1
 8000c78:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d01b      	beq.n	8000cbc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	685a      	ldr	r2, [r3, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c92:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000ca2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6859      	ldr	r1, [r3, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	035a      	lsls	r2, r3, #13
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	e007      	b.n	8000ccc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000cca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000cda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	051a      	lsls	r2, r3, #20
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6899      	ldr	r1, [r3, #8]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d0e:	025a      	lsls	r2, r3, #9
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	430a      	orrs	r2, r1
 8000d16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6899      	ldr	r1, [r3, #8]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	029a      	lsls	r2, r3, #10
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	609a      	str	r2, [r3, #8]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	40012300 	.word	0x40012300
 8000d4c:	0f000001 	.word	0x0f000001

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db0b      	blt.n	8000dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f003 021f 	and.w	r2, r3, #31
 8000dcc:	4907      	ldr	r1, [pc, #28]	; (8000dec <__NVIC_EnableIRQ+0x38>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000e100 	.word	0xe000e100

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	; (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	; (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	; 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	; 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ebc:	d301      	bcc.n	8000ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00f      	b.n	8000ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <SysTick_Config+0x40>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eca:	210f      	movs	r1, #15
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f7ff ff8e 	bl	8000df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <SysTick_Config+0x40>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <SysTick_Config+0x40>)
 8000edc:	2207      	movs	r2, #7
 8000ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	e000e010 	.word	0xe000e010

08000ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ff29 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f18:	f7ff ff3e 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f7ff ff8e 	bl	8000e44 <NVIC_EncodePriority>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff5d 	bl	8000df0 <__NVIC_SetPriority>
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff31 	bl	8000db4 <__NVIC_EnableIRQ>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffa2 	bl	8000eac <SysTick_Config>
 8000f68:	4603      	mov	r3, r0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d004      	beq.n	8000f90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2280      	movs	r2, #128	; 0x80
 8000f8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e00c      	b.n	8000faa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2205      	movs	r2, #5
 8000f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 0201 	bic.w	r2, r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000fca:	4b23      	ldr	r3, [pc, #140]	; (8001058 <HAL_FLASH_Program+0xa0>)
 8000fcc:	7e1b      	ldrb	r3, [r3, #24]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d101      	bne.n	8000fd6 <HAL_FLASH_Program+0x1e>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e03b      	b.n	800104e <HAL_FLASH_Program+0x96>
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <HAL_FLASH_Program+0xa0>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fdc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fe0:	f000 f870 	bl	80010c4 <FLASH_WaitForLastOperation>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000fe8:	7dfb      	ldrb	r3, [r7, #23]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d12b      	bne.n	8001046 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d105      	bne.n	8001000 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000ff4:	783b      	ldrb	r3, [r7, #0]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	68b8      	ldr	r0, [r7, #8]
 8000ffa:	f000 f919 	bl	8001230 <FLASH_Program_Byte>
 8000ffe:	e016      	b.n	800102e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d105      	bne.n	8001012 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001006:	883b      	ldrh	r3, [r7, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	68b8      	ldr	r0, [r7, #8]
 800100c:	f000 f8ec 	bl	80011e8 <FLASH_Program_HalfWord>
 8001010:	e00d      	b.n	800102e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d105      	bne.n	8001024 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	4619      	mov	r1, r3
 800101c:	68b8      	ldr	r0, [r7, #8]
 800101e:	f000 f8c1 	bl	80011a4 <FLASH_Program_Word>
 8001022:	e004      	b.n	800102e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001028:	68b8      	ldr	r0, [r7, #8]
 800102a:	f000 f88b 	bl	8001144 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800102e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001032:	f000 f847 	bl	80010c4 <FLASH_WaitForLastOperation>
 8001036:	4603      	mov	r3, r0
 8001038:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <HAL_FLASH_Program+0xa4>)
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	4a07      	ldr	r2, [pc, #28]	; (800105c <HAL_FLASH_Program+0xa4>)
 8001040:	f023 0301 	bic.w	r3, r3, #1
 8001044:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <HAL_FLASH_Program+0xa0>)
 8001048:	2200      	movs	r2, #0
 800104a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800104c:	7dfb      	ldrb	r3, [r7, #23]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000108 	.word	0x20000108
 800105c:	40023c00 	.word	0x40023c00

08001060 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_FLASH_Unlock+0x38>)
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	2b00      	cmp	r3, #0
 8001070:	da0b      	bge.n	800108a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_FLASH_Unlock+0x38>)
 8001074:	4a09      	ldr	r2, [pc, #36]	; (800109c <HAL_FLASH_Unlock+0x3c>)
 8001076:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <HAL_FLASH_Unlock+0x38>)
 800107a:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <HAL_FLASH_Unlock+0x40>)
 800107c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_FLASH_Unlock+0x38>)
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	2b00      	cmp	r3, #0
 8001084:	da01      	bge.n	800108a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800108a:	79fb      	ldrb	r3, [r7, #7]
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	40023c00 	.word	0x40023c00
 800109c:	45670123 	.word	0x45670123
 80010a0:	cdef89ab 	.word	0xcdef89ab

080010a4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <HAL_FLASH_Lock+0x1c>)
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <HAL_FLASH_Lock+0x1c>)
 80010ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010b2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	40023c00 	.word	0x40023c00

080010c4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <FLASH_WaitForLastOperation+0x78>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80010d6:	f7ff fac5 	bl	8000664 <HAL_GetTick>
 80010da:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80010dc:	e010      	b.n	8001100 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e4:	d00c      	beq.n	8001100 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d007      	beq.n	80010fc <FLASH_WaitForLastOperation+0x38>
 80010ec:	f7ff faba 	bl	8000664 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d201      	bcs.n	8001100 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e019      	b.n	8001134 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <FLASH_WaitForLastOperation+0x7c>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1e8      	bne.n	80010de <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <FLASH_WaitForLastOperation+0x7c>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b00      	cmp	r3, #0
 8001116:	d002      	beq.n	800111e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <FLASH_WaitForLastOperation+0x7c>)
 800111a:	2201      	movs	r2, #1
 800111c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <FLASH_WaitForLastOperation+0x7c>)
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800112a:	f000 f8a3 	bl	8001274 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
  
}  
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000108 	.word	0x20000108
 8001140:	40023c00 	.word	0x40023c00

08001144 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001150:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <FLASH_Program_DoubleWord+0x5c>)
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <FLASH_Program_DoubleWord+0x5c>)
 8001156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800115a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800115c:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <FLASH_Program_DoubleWord+0x5c>)
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	4a0f      	ldr	r2, [pc, #60]	; (80011a0 <FLASH_Program_DoubleWord+0x5c>)
 8001162:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001166:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <FLASH_Program_DoubleWord+0x5c>)
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	4a0c      	ldr	r2, [pc, #48]	; (80011a0 <FLASH_Program_DoubleWord+0x5c>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800117a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	f04f 0300 	mov.w	r3, #0
 8001186:	000a      	movs	r2, r1
 8001188:	2300      	movs	r3, #0
 800118a:	68f9      	ldr	r1, [r7, #12]
 800118c:	3104      	adds	r1, #4
 800118e:	4613      	mov	r3, r2
 8001190:	600b      	str	r3, [r1, #0]
}
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40023c00 	.word	0x40023c00

080011a4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <FLASH_Program_Word+0x40>)
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	4a0c      	ldr	r2, [pc, #48]	; (80011e4 <FLASH_Program_Word+0x40>)
 80011b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <FLASH_Program_Word+0x40>)
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <FLASH_Program_Word+0x40>)
 80011c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80011c6:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <FLASH_Program_Word+0x40>)
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <FLASH_Program_Word+0x40>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	601a      	str	r2, [r3, #0]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	40023c00 	.word	0x40023c00

080011e8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80011f4:	4b0d      	ldr	r3, [pc, #52]	; (800122c <FLASH_Program_HalfWord+0x44>)
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	4a0c      	ldr	r2, [pc, #48]	; (800122c <FLASH_Program_HalfWord+0x44>)
 80011fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <FLASH_Program_HalfWord+0x44>)
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	4a09      	ldr	r2, [pc, #36]	; (800122c <FLASH_Program_HalfWord+0x44>)
 8001206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <FLASH_Program_HalfWord+0x44>)
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	4a06      	ldr	r2, [pc, #24]	; (800122c <FLASH_Program_HalfWord+0x44>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	801a      	strh	r2, [r3, #0]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40023c00 	.word	0x40023c00

08001230 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <FLASH_Program_Byte+0x40>)
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <FLASH_Program_Byte+0x40>)
 8001242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001246:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <FLASH_Program_Byte+0x40>)
 800124a:	4a09      	ldr	r2, [pc, #36]	; (8001270 <FLASH_Program_Byte+0x40>)
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <FLASH_Program_Byte+0x40>)
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	4a06      	ldr	r2, [pc, #24]	; (8001270 <FLASH_Program_Byte+0x40>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	78fa      	ldrb	r2, [r7, #3]
 8001260:	701a      	strb	r2, [r3, #0]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023c00 	.word	0x40023c00

08001274 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001278:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <FLASH_SetErrorCode+0xc4>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	2b00      	cmp	r3, #0
 8001282:	d008      	beq.n	8001296 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001284:	4b2d      	ldr	r3, [pc, #180]	; (800133c <FLASH_SetErrorCode+0xc8>)
 8001286:	69db      	ldr	r3, [r3, #28]
 8001288:	f043 0310 	orr.w	r3, r3, #16
 800128c:	4a2b      	ldr	r2, [pc, #172]	; (800133c <FLASH_SetErrorCode+0xc8>)
 800128e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001290:	4b29      	ldr	r3, [pc, #164]	; (8001338 <FLASH_SetErrorCode+0xc4>)
 8001292:	2210      	movs	r2, #16
 8001294:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001296:	4b28      	ldr	r3, [pc, #160]	; (8001338 <FLASH_SetErrorCode+0xc4>)
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	f003 0320 	and.w	r3, r3, #32
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d008      	beq.n	80012b4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <FLASH_SetErrorCode+0xc8>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	f043 0308 	orr.w	r3, r3, #8
 80012aa:	4a24      	ldr	r2, [pc, #144]	; (800133c <FLASH_SetErrorCode+0xc8>)
 80012ac:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80012ae:	4b22      	ldr	r3, [pc, #136]	; (8001338 <FLASH_SetErrorCode+0xc4>)
 80012b0:	2220      	movs	r2, #32
 80012b2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80012b4:	4b20      	ldr	r3, [pc, #128]	; (8001338 <FLASH_SetErrorCode+0xc4>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d008      	beq.n	80012d2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80012c0:	4b1e      	ldr	r3, [pc, #120]	; (800133c <FLASH_SetErrorCode+0xc8>)
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	4a1c      	ldr	r2, [pc, #112]	; (800133c <FLASH_SetErrorCode+0xc8>)
 80012ca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <FLASH_SetErrorCode+0xc4>)
 80012ce:	2240      	movs	r2, #64	; 0x40
 80012d0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80012d2:	4b19      	ldr	r3, [pc, #100]	; (8001338 <FLASH_SetErrorCode+0xc4>)
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d008      	beq.n	80012f0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <FLASH_SetErrorCode+0xc8>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	f043 0302 	orr.w	r3, r3, #2
 80012e6:	4a15      	ldr	r2, [pc, #84]	; (800133c <FLASH_SetErrorCode+0xc8>)
 80012e8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80012ea:	4b13      	ldr	r3, [pc, #76]	; (8001338 <FLASH_SetErrorCode+0xc4>)
 80012ec:	2280      	movs	r2, #128	; 0x80
 80012ee:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <FLASH_SetErrorCode+0xc4>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d009      	beq.n	8001310 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <FLASH_SetErrorCode+0xc8>)
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <FLASH_SetErrorCode+0xc8>)
 8001306:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <FLASH_SetErrorCode+0xc4>)
 800130a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800130e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <FLASH_SetErrorCode+0xc4>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d008      	beq.n	800132e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <FLASH_SetErrorCode+0xc8>)
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	f043 0320 	orr.w	r3, r3, #32
 8001324:	4a05      	ldr	r2, [pc, #20]	; (800133c <FLASH_SetErrorCode+0xc8>)
 8001326:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <FLASH_SetErrorCode+0xc4>)
 800132a:	2202      	movs	r2, #2
 800132c:	60da      	str	r2, [r3, #12]
  }
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	40023c00 	.word	0x40023c00
 800133c:	20000108 	.word	0x20000108

08001340 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001352:	4b32      	ldr	r3, [pc, #200]	; (800141c <HAL_FLASHEx_Erase+0xdc>)
 8001354:	7e1b      	ldrb	r3, [r3, #24]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d101      	bne.n	800135e <HAL_FLASHEx_Erase+0x1e>
 800135a:	2302      	movs	r3, #2
 800135c:	e05a      	b.n	8001414 <HAL_FLASHEx_Erase+0xd4>
 800135e:	4b2f      	ldr	r3, [pc, #188]	; (800141c <HAL_FLASHEx_Erase+0xdc>)
 8001360:	2201      	movs	r2, #1
 8001362:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001364:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001368:	f7ff feac 	bl	80010c4 <FLASH_WaitForLastOperation>
 800136c:	4603      	mov	r3, r0
 800136e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d14a      	bne.n	800140c <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d117      	bne.n	80013b6 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	4619      	mov	r1, r3
 8001392:	4610      	mov	r0, r2
 8001394:	f000 f846 	bl	8001424 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001398:	f24c 3050 	movw	r0, #50000	; 0xc350
 800139c:	f7ff fe92 	bl	80010c4 <FLASH_WaitForLastOperation>
 80013a0:	4603      	mov	r3, r0
 80013a2:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80013a4:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <HAL_FLASHEx_Erase+0xe0>)
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	4a1d      	ldr	r2, [pc, #116]	; (8001420 <HAL_FLASHEx_Erase+0xe0>)
 80013aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80013ae:	f023 0304 	bic.w	r3, r3, #4
 80013b2:	6113      	str	r3, [r2, #16]
 80013b4:	e028      	b.n	8001408 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	e01c      	b.n	80013f8 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4619      	mov	r1, r3
 80013c6:	68b8      	ldr	r0, [r7, #8]
 80013c8:	f000 f866 	bl	8001498 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013d0:	f7ff fe78 	bl	80010c4 <FLASH_WaitForLastOperation>
 80013d4:	4603      	mov	r3, r0
 80013d6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <HAL_FLASHEx_Erase+0xe0>)
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	4a10      	ldr	r2, [pc, #64]	; (8001420 <HAL_FLASHEx_Erase+0xe0>)
 80013de:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80013e2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	68ba      	ldr	r2, [r7, #8]
 80013ee:	601a      	str	r2, [r3, #0]
          break;
 80013f0:	e00a      	b.n	8001408 <HAL_FLASHEx_Erase+0xc8>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	3301      	adds	r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68da      	ldr	r2, [r3, #12]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4413      	add	r3, r2
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	429a      	cmp	r2, r3
 8001406:	d3da      	bcc.n	80013be <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001408:	f000 f894 	bl	8001534 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <HAL_FLASHEx_Erase+0xdc>)
 800140e:	2200      	movs	r2, #0
 8001410:	761a      	strb	r2, [r3, #24]

  return status;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000108 	.word	0x20000108
 8001420:	40023c00 	.word	0x40023c00

08001424 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <FLASH_MassErase+0x70>)
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	4a17      	ldr	r2, [pc, #92]	; (8001494 <FLASH_MassErase+0x70>)
 8001436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800143a:	6113      	str	r3, [r2, #16]

  if(Banks == FLASH_BANK_BOTH)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2b03      	cmp	r3, #3
 8001440:	d108      	bne.n	8001454 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <FLASH_MassErase+0x70>)
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	4a13      	ldr	r2, [pc, #76]	; (8001494 <FLASH_MassErase+0x70>)
 8001448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	6113      	str	r3, [r2, #16]
 8001452:	e00f      	b.n	8001474 <FLASH_MassErase+0x50>
  }
  else if(Banks == FLASH_BANK_1)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d106      	bne.n	8001468 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <FLASH_MassErase+0x70>)
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <FLASH_MassErase+0x70>)
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	6113      	str	r3, [r2, #16]
 8001466:	e005      	b.n	8001474 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <FLASH_MassErase+0x70>)
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	4a09      	ldr	r2, [pc, #36]	; (8001494 <FLASH_MassErase+0x70>)
 800146e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001472:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <FLASH_MassErase+0x70>)
 8001476:	691a      	ldr	r2, [r3, #16]
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	4313      	orrs	r3, r2
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <FLASH_MassErase+0x70>)
 8001480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001484:	6113      	str	r3, [r2, #16]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40023c00 	.word	0x40023c00

08001498 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	e010      	b.n	80014d6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d103      	bne.n	80014c2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80014ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	e009      	b.n	80014d6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d103      	bne.n	80014d0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80014c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	e002      	b.n	80014d6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80014d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014d4:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0b      	cmp	r3, #11
 80014da:	d902      	bls.n	80014e2 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3304      	adds	r3, #4
 80014e0:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <FLASH_Erase_Sector+0x98>)
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	4a12      	ldr	r2, [pc, #72]	; (8001530 <FLASH_Erase_Sector+0x98>)
 80014e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <FLASH_Erase_Sector+0x98>)
 80014f0:	691a      	ldr	r2, [r3, #16]
 80014f2:	490f      	ldr	r1, [pc, #60]	; (8001530 <FLASH_Erase_Sector+0x98>)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <FLASH_Erase_Sector+0x98>)
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	4a0c      	ldr	r2, [pc, #48]	; (8001530 <FLASH_Erase_Sector+0x98>)
 8001500:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001504:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <FLASH_Erase_Sector+0x98>)
 8001508:	691a      	ldr	r2, [r3, #16]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4313      	orrs	r3, r2
 8001510:	4a07      	ldr	r2, [pc, #28]	; (8001530 <FLASH_Erase_Sector+0x98>)
 8001512:	f043 0302 	orr.w	r3, r3, #2
 8001516:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <FLASH_Erase_Sector+0x98>)
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	4a04      	ldr	r2, [pc, #16]	; (8001530 <FLASH_Erase_Sector+0x98>)
 800151e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001522:	6113      	str	r3, [r2, #16]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	40023c00 	.word	0x40023c00

08001534 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001538:	4b20      	ldr	r3, [pc, #128]	; (80015bc <FLASH_FlushCaches+0x88>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001540:	2b00      	cmp	r3, #0
 8001542:	d017      	beq.n	8001574 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001544:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <FLASH_FlushCaches+0x88>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a1c      	ldr	r2, [pc, #112]	; (80015bc <FLASH_FlushCaches+0x88>)
 800154a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800154e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001550:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <FLASH_FlushCaches+0x88>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a19      	ldr	r2, [pc, #100]	; (80015bc <FLASH_FlushCaches+0x88>)
 8001556:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b17      	ldr	r3, [pc, #92]	; (80015bc <FLASH_FlushCaches+0x88>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a16      	ldr	r2, [pc, #88]	; (80015bc <FLASH_FlushCaches+0x88>)
 8001562:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001566:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <FLASH_FlushCaches+0x88>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a13      	ldr	r2, [pc, #76]	; (80015bc <FLASH_FlushCaches+0x88>)
 800156e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001572:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <FLASH_FlushCaches+0x88>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800157c:	2b00      	cmp	r3, #0
 800157e:	d017      	beq.n	80015b0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <FLASH_FlushCaches+0x88>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <FLASH_FlushCaches+0x88>)
 8001586:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800158a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <FLASH_FlushCaches+0x88>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <FLASH_FlushCaches+0x88>)
 8001592:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <FLASH_FlushCaches+0x88>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a07      	ldr	r2, [pc, #28]	; (80015bc <FLASH_FlushCaches+0x88>)
 800159e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015a2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <FLASH_FlushCaches+0x88>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <FLASH_FlushCaches+0x88>)
 80015aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ae:	6013      	str	r3, [r2, #0]
  }
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40023c00 	.word	0x40023c00

080015c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	e177      	b.n	80018cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015dc:	2201      	movs	r2, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	f040 8166 	bne.w	80018c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x4a>
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b12      	cmp	r3, #18
 8001608:	d123      	bne.n	8001652 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	08da      	lsrs	r2, r3, #3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3208      	adds	r2, #8
 8001612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	220f      	movs	r2, #15
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	691a      	ldr	r2, [r3, #16]
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	08da      	lsrs	r2, r3, #3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3208      	adds	r2, #8
 800164c:	69b9      	ldr	r1, [r7, #24]
 800164e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	2203      	movs	r2, #3
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0203 	and.w	r2, r3, #3
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d00b      	beq.n	80016a6 <HAL_GPIO_Init+0xe6>
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d007      	beq.n	80016a6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800169a:	2b11      	cmp	r3, #17
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b12      	cmp	r3, #18
 80016a4:	d130      	bne.n	8001708 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	2203      	movs	r2, #3
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016dc:	2201      	movs	r2, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 0201 	and.w	r2, r3, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80c0 	beq.w	80018c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b66      	ldr	r3, [pc, #408]	; (80018e4 <HAL_GPIO_Init+0x324>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a65      	ldr	r2, [pc, #404]	; (80018e4 <HAL_GPIO_Init+0x324>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b63      	ldr	r3, [pc, #396]	; (80018e4 <HAL_GPIO_Init+0x324>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001762:	4a61      	ldr	r2, [pc, #388]	; (80018e8 <HAL_GPIO_Init+0x328>)
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	3302      	adds	r3, #2
 800176a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	220f      	movs	r2, #15
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a58      	ldr	r2, [pc, #352]	; (80018ec <HAL_GPIO_Init+0x32c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d037      	beq.n	80017fe <HAL_GPIO_Init+0x23e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a57      	ldr	r2, [pc, #348]	; (80018f0 <HAL_GPIO_Init+0x330>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d031      	beq.n	80017fa <HAL_GPIO_Init+0x23a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a56      	ldr	r2, [pc, #344]	; (80018f4 <HAL_GPIO_Init+0x334>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d02b      	beq.n	80017f6 <HAL_GPIO_Init+0x236>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a55      	ldr	r2, [pc, #340]	; (80018f8 <HAL_GPIO_Init+0x338>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d025      	beq.n	80017f2 <HAL_GPIO_Init+0x232>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a54      	ldr	r2, [pc, #336]	; (80018fc <HAL_GPIO_Init+0x33c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d01f      	beq.n	80017ee <HAL_GPIO_Init+0x22e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a53      	ldr	r2, [pc, #332]	; (8001900 <HAL_GPIO_Init+0x340>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d019      	beq.n	80017ea <HAL_GPIO_Init+0x22a>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a52      	ldr	r2, [pc, #328]	; (8001904 <HAL_GPIO_Init+0x344>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d013      	beq.n	80017e6 <HAL_GPIO_Init+0x226>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a51      	ldr	r2, [pc, #324]	; (8001908 <HAL_GPIO_Init+0x348>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d00d      	beq.n	80017e2 <HAL_GPIO_Init+0x222>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a50      	ldr	r2, [pc, #320]	; (800190c <HAL_GPIO_Init+0x34c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d007      	beq.n	80017de <HAL_GPIO_Init+0x21e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4f      	ldr	r2, [pc, #316]	; (8001910 <HAL_GPIO_Init+0x350>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d101      	bne.n	80017da <HAL_GPIO_Init+0x21a>
 80017d6:	2309      	movs	r3, #9
 80017d8:	e012      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017da:	230a      	movs	r3, #10
 80017dc:	e010      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017de:	2308      	movs	r3, #8
 80017e0:	e00e      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017e2:	2307      	movs	r3, #7
 80017e4:	e00c      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017e6:	2306      	movs	r3, #6
 80017e8:	e00a      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017ea:	2305      	movs	r3, #5
 80017ec:	e008      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017ee:	2304      	movs	r3, #4
 80017f0:	e006      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017f2:	2303      	movs	r3, #3
 80017f4:	e004      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e002      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017fe:	2300      	movs	r3, #0
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	f002 0203 	and.w	r2, r2, #3
 8001806:	0092      	lsls	r2, r2, #2
 8001808:	4093      	lsls	r3, r2
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001810:	4935      	ldr	r1, [pc, #212]	; (80018e8 <HAL_GPIO_Init+0x328>)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	3302      	adds	r3, #2
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800181e:	4b3d      	ldr	r3, [pc, #244]	; (8001914 <HAL_GPIO_Init+0x354>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001842:	4a34      	ldr	r2, [pc, #208]	; (8001914 <HAL_GPIO_Init+0x354>)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001848:	4b32      	ldr	r3, [pc, #200]	; (8001914 <HAL_GPIO_Init+0x354>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800186c:	4a29      	ldr	r2, [pc, #164]	; (8001914 <HAL_GPIO_Init+0x354>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001872:	4b28      	ldr	r3, [pc, #160]	; (8001914 <HAL_GPIO_Init+0x354>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001896:	4a1f      	ldr	r2, [pc, #124]	; (8001914 <HAL_GPIO_Init+0x354>)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800189c:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <HAL_GPIO_Init+0x354>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018c0:	4a14      	ldr	r2, [pc, #80]	; (8001914 <HAL_GPIO_Init+0x354>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3301      	adds	r3, #1
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	2b0f      	cmp	r3, #15
 80018d0:	f67f ae84 	bls.w	80015dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40013800 	.word	0x40013800
 80018ec:	40020000 	.word	0x40020000
 80018f0:	40020400 	.word	0x40020400
 80018f4:	40020800 	.word	0x40020800
 80018f8:	40020c00 	.word	0x40020c00
 80018fc:	40021000 	.word	0x40021000
 8001900:	40021400 	.word	0x40021400
 8001904:	40021800 	.word	0x40021800
 8001908:	40021c00 	.word	0x40021c00
 800190c:	40022000 	.word	0x40022000
 8001910:	40022400 	.word	0x40022400
 8001914:	40013c00 	.word	0x40013c00

08001918 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	887b      	ldrh	r3, [r7, #2]
 800192a:	4013      	ands	r3, r2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001930:	2301      	movs	r3, #1
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	e001      	b.n	800193a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800193a:	7bfb      	ldrb	r3, [r7, #15]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
 8001954:	4613      	mov	r3, r2
 8001956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001958:	787b      	ldrb	r3, [r7, #1]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800195e:	887a      	ldrh	r2, [r7, #2]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001964:	e003      	b.n	800196e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001966:	887b      	ldrh	r3, [r7, #2]
 8001968:	041a      	lsls	r2, r3, #16
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	619a      	str	r2, [r3, #24]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d006      	beq.n	80019a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	4618      	mov	r0, r3
 800199c:	f003 fd58 	bl	8005450 <HAL_GPIO_EXTI_Callback>
  }
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40013c00 	.word	0x40013c00

080019ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e11b      	b.n	8001bf6 <HAL_I2C_Init+0x24a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f004 fa70 	bl	8005eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2224      	movs	r2, #36	; 0x24
 80019dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0201 	bic.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019f0:	f001 fa0a 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 80019f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4a81      	ldr	r2, [pc, #516]	; (8001c00 <HAL_I2C_Init+0x254>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d807      	bhi.n	8001a10 <HAL_I2C_Init+0x64>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4a80      	ldr	r2, [pc, #512]	; (8001c04 <HAL_I2C_Init+0x258>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	bf94      	ite	ls
 8001a08:	2301      	movls	r3, #1
 8001a0a:	2300      	movhi	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	e006      	b.n	8001a1e <HAL_I2C_Init+0x72>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4a7d      	ldr	r2, [pc, #500]	; (8001c08 <HAL_I2C_Init+0x25c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	bf94      	ite	ls
 8001a18:	2301      	movls	r3, #1
 8001a1a:	2300      	movhi	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e0e7      	b.n	8001bf6 <HAL_I2C_Init+0x24a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4a78      	ldr	r2, [pc, #480]	; (8001c0c <HAL_I2C_Init+0x260>)
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	0c9b      	lsrs	r3, r3, #18
 8001a30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4a6a      	ldr	r2, [pc, #424]	; (8001c00 <HAL_I2C_Init+0x254>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d802      	bhi.n	8001a60 <HAL_I2C_Init+0xb4>
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	e009      	b.n	8001a74 <HAL_I2C_Init+0xc8>
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a66:	fb02 f303 	mul.w	r3, r2, r3
 8001a6a:	4a69      	ldr	r2, [pc, #420]	; (8001c10 <HAL_I2C_Init+0x264>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	099b      	lsrs	r3, r3, #6
 8001a72:	3301      	adds	r3, #1
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	495c      	ldr	r1, [pc, #368]	; (8001c00 <HAL_I2C_Init+0x254>)
 8001a90:	428b      	cmp	r3, r1
 8001a92:	d819      	bhi.n	8001ac8 <HAL_I2C_Init+0x11c>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1e59      	subs	r1, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aa2:	1c59      	adds	r1, r3, #1
 8001aa4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001aa8:	400b      	ands	r3, r1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00a      	beq.n	8001ac4 <HAL_I2C_Init+0x118>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1e59      	subs	r1, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001abc:	3301      	adds	r3, #1
 8001abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac2:	e051      	b.n	8001b68 <HAL_I2C_Init+0x1bc>
 8001ac4:	2304      	movs	r3, #4
 8001ac6:	e04f      	b.n	8001b68 <HAL_I2C_Init+0x1bc>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d111      	bne.n	8001af4 <HAL_I2C_Init+0x148>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1e58      	subs	r0, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6859      	ldr	r1, [r3, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	440b      	add	r3, r1
 8001ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bf0c      	ite	eq
 8001aec:	2301      	moveq	r3, #1
 8001aee:	2300      	movne	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	e012      	b.n	8001b1a <HAL_I2C_Init+0x16e>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	1e58      	subs	r0, r3, #1
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6859      	ldr	r1, [r3, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	0099      	lsls	r1, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	bf0c      	ite	eq
 8001b14:	2301      	moveq	r3, #1
 8001b16:	2300      	movne	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_I2C_Init+0x176>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e022      	b.n	8001b68 <HAL_I2C_Init+0x1bc>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10e      	bne.n	8001b48 <HAL_I2C_Init+0x19c>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1e58      	subs	r0, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6859      	ldr	r1, [r3, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	440b      	add	r3, r1
 8001b38:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b46:	e00f      	b.n	8001b68 <HAL_I2C_Init+0x1bc>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1e58      	subs	r0, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	0099      	lsls	r1, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5e:	3301      	adds	r3, #1
 8001b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	6809      	ldr	r1, [r1, #0]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69da      	ldr	r2, [r3, #28]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6911      	ldr	r1, [r2, #16]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68d2      	ldr	r2, [r2, #12]
 8001ba2:	4311      	orrs	r1, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	695a      	ldr	r2, [r3, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2220      	movs	r2, #32
 8001be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	000186a0 	.word	0x000186a0
 8001c04:	001e847f 	.word	0x001e847f
 8001c08:	003d08ff 	.word	0x003d08ff
 8001c0c:	431bde83 	.word	0x431bde83
 8001c10:	10624dd3 	.word	0x10624dd3

08001c14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	460b      	mov	r3, r1
 8001c22:	817b      	strh	r3, [r7, #10]
 8001c24:	4613      	mov	r3, r2
 8001c26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c28:	f7fe fd1c 	bl	8000664 <HAL_GetTick>
 8001c2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b20      	cmp	r3, #32
 8001c38:	f040 80e0 	bne.w	8001dfc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	2319      	movs	r3, #25
 8001c42:	2201      	movs	r2, #1
 8001c44:	4970      	ldr	r1, [pc, #448]	; (8001e08 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 fa7a 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c52:	2302      	movs	r3, #2
 8001c54:	e0d3      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_I2C_Master_Transmit+0x50>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e0cc      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d007      	beq.n	8001c8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0201 	orr.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2221      	movs	r2, #33	; 0x21
 8001c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2210      	movs	r2, #16
 8001ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	893a      	ldrh	r2, [r7, #8]
 8001cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4a50      	ldr	r2, [pc, #320]	; (8001e0c <HAL_I2C_Master_Transmit+0x1f8>)
 8001cca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ccc:	8979      	ldrh	r1, [r7, #10]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	6a3a      	ldr	r2, [r7, #32]
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 f9be 	bl	8002054 <I2C_MasterRequestWrite>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e08d      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001cf8:	e066      	b.n	8001dc8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	6a39      	ldr	r1, [r7, #32]
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 faf4 	bl	80022ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00d      	beq.n	8001d26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d107      	bne.n	8001d22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e06b      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	781a      	ldrb	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	3b01      	subs	r3, #1
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d11b      	bne.n	8001d9c <HAL_I2C_Master_Transmit+0x188>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d017      	beq.n	8001d9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	781a      	ldrb	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d94:	3b01      	subs	r3, #1
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	6a39      	ldr	r1, [r7, #32]
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 fae4 	bl	800236e <I2C_WaitOnBTFFlagUntilTimeout>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00d      	beq.n	8001dc8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d107      	bne.n	8001dc4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e01a      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d194      	bne.n	8001cfa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2220      	movs	r2, #32
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e000      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001dfc:	2302      	movs	r3, #2
  }
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	00100002 	.word	0x00100002
 8001e0c:	ffff0000 	.word	0xffff0000

08001e10 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7fe fc20 	bl	8000664 <HAL_GetTick>
 8001e24:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001e26:	2301      	movs	r3, #1
 8001e28:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b20      	cmp	r3, #32
 8001e34:	f040 8105 	bne.w	8002042 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2319      	movs	r3, #25
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4982      	ldr	r1, [pc, #520]	; (800204c <HAL_I2C_IsDeviceReady+0x23c>)
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 f97c 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e0f8      	b.n	8002044 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_I2C_IsDeviceReady+0x50>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e0f1      	b.n	8002044 <HAL_I2C_IsDeviceReady+0x234>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d007      	beq.n	8001e86 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0201 	orr.w	r2, r2, #1
 8001e84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2224      	movs	r2, #36	; 0x24
 8001e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4a6a      	ldr	r2, [pc, #424]	; (8002050 <HAL_I2C_IsDeviceReady+0x240>)
 8001ea8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eb8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f93a 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e0b6      	b.n	8002044 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ed6:	897b      	ldrh	r3, [r7, #10]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ee4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001ee6:	f7fe fbbd 	bl	8000664 <HAL_GetTick>
 8001eea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	bf0c      	ite	eq
 8001efa:	2301      	moveq	r3, #1
 8001efc:	2300      	movne	r3, #0
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f10:	bf0c      	ite	eq
 8001f12:	2301      	moveq	r3, #1
 8001f14:	2300      	movne	r3, #0
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f1a:	e025      	b.n	8001f68 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f1c:	f7fe fba2 	bl	8000664 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d302      	bcc.n	8001f32 <HAL_I2C_IsDeviceReady+0x122>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d103      	bne.n	8001f3a <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	22a0      	movs	r2, #160	; 0xa0
 8001f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	bf0c      	ite	eq
 8001f48:	2301      	moveq	r3, #1
 8001f4a:	2300      	movne	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5e:	bf0c      	ite	eq
 8001f60:	2301      	moveq	r3, #1
 8001f62:	2300      	movne	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2ba0      	cmp	r3, #160	; 0xa0
 8001f72:	d005      	beq.n	8001f80 <HAL_I2C_IsDeviceReady+0x170>
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d102      	bne.n	8001f80 <HAL_I2C_IsDeviceReady+0x170>
 8001f7a:	7dbb      	ldrb	r3, [r7, #22]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0cd      	beq.n	8001f1c <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d129      	bne.n	8001fea <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2319      	movs	r3, #25
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	4921      	ldr	r1, [pc, #132]	; (800204c <HAL_I2C_IsDeviceReady+0x23c>)
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f8ba 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e036      	b.n	8002044 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e02c      	b.n	8002044 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002002:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	2319      	movs	r3, #25
 800200a:	2201      	movs	r2, #1
 800200c:	490f      	ldr	r1, [pc, #60]	; (800204c <HAL_I2C_IsDeviceReady+0x23c>)
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f896 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e012      	b.n	8002044 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	3301      	adds	r3, #1
 8002022:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	429a      	cmp	r2, r3
 800202a:	f4ff af3e 	bcc.w	8001eaa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2220      	movs	r2, #32
 8002032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8002042:	2302      	movs	r3, #2
  }
}
 8002044:	4618      	mov	r0, r3
 8002046:	3720      	adds	r7, #32
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	00100002 	.word	0x00100002
 8002050:	ffff0000 	.word	0xffff0000

08002054 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af02      	add	r7, sp, #8
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	460b      	mov	r3, r1
 8002062:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b08      	cmp	r3, #8
 800206e:	d006      	beq.n	800207e <I2C_MasterRequestWrite+0x2a>
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d003      	beq.n	800207e <I2C_MasterRequestWrite+0x2a>
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800207c:	d108      	bne.n	8002090 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	e00b      	b.n	80020a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	2b12      	cmp	r3, #18
 8002096:	d107      	bne.n	80020a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 f843 	bl	8002140 <I2C_WaitOnFlagUntilTimeout>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e035      	b.n	8002130 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020cc:	d108      	bne.n	80020e0 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020ce:	897b      	ldrh	r3, [r7, #10]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020dc:	611a      	str	r2, [r3, #16]
 80020de:	e01b      	b.n	8002118 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020e0:	897b      	ldrh	r3, [r7, #10]
 80020e2:	11db      	asrs	r3, r3, #7
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f003 0306 	and.w	r3, r3, #6
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	f063 030f 	orn	r3, r3, #15
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	490e      	ldr	r1, [pc, #56]	; (8002138 <I2C_MasterRequestWrite+0xe4>)
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 f875 	bl	80021ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e010      	b.n	8002130 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800210e:	897b      	ldrh	r3, [r7, #10]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	4907      	ldr	r1, [pc, #28]	; (800213c <I2C_MasterRequestWrite+0xe8>)
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f865 	bl	80021ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	00010008 	.word	0x00010008
 800213c:	00010002 	.word	0x00010002

08002140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	603b      	str	r3, [r7, #0]
 800214c:	4613      	mov	r3, r2
 800214e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002150:	e025      	b.n	800219e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d021      	beq.n	800219e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800215a:	f7fe fa83 	bl	8000664 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d302      	bcc.n	8002170 <I2C_WaitOnFlagUntilTimeout+0x30>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d116      	bne.n	800219e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2220      	movs	r2, #32
 800217a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f043 0220 	orr.w	r2, r3, #32
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e023      	b.n	80021e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	0c1b      	lsrs	r3, r3, #16
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d10d      	bne.n	80021c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4013      	ands	r3, r2
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bf0c      	ite	eq
 80021ba:	2301      	moveq	r3, #1
 80021bc:	2300      	movne	r3, #0
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	e00c      	b.n	80021de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	43da      	mvns	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4013      	ands	r3, r2
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	bf0c      	ite	eq
 80021d6:	2301      	moveq	r3, #1
 80021d8:	2300      	movne	r3, #0
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	461a      	mov	r2, r3
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d0b6      	beq.n	8002152 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b084      	sub	sp, #16
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021fc:	e051      	b.n	80022a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220c:	d123      	bne.n	8002256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800221c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002226:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2220      	movs	r2, #32
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f043 0204 	orr.w	r2, r3, #4
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e046      	b.n	80022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225c:	d021      	beq.n	80022a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800225e:	f7fe fa01 	bl	8000664 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	429a      	cmp	r2, r3
 800226c:	d302      	bcc.n	8002274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d116      	bne.n	80022a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2220      	movs	r2, #32
 800227e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f043 0220 	orr.w	r2, r3, #32
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e020      	b.n	80022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	0c1b      	lsrs	r3, r3, #16
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d10c      	bne.n	80022c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	43da      	mvns	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	4013      	ands	r3, r2
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	bf14      	ite	ne
 80022be:	2301      	movne	r3, #1
 80022c0:	2300      	moveq	r3, #0
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	e00b      	b.n	80022de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	43da      	mvns	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	4013      	ands	r3, r2
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bf14      	ite	ne
 80022d8:	2301      	movne	r3, #1
 80022da:	2300      	moveq	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d18d      	bne.n	80021fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022f8:	e02d      	b.n	8002356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f878 	bl	80023f0 <I2C_IsAcknowledgeFailed>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e02d      	b.n	8002366 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002310:	d021      	beq.n	8002356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002312:	f7fe f9a7 	bl	8000664 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	429a      	cmp	r2, r3
 8002320:	d302      	bcc.n	8002328 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d116      	bne.n	8002356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2220      	movs	r2, #32
 8002332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f043 0220 	orr.w	r2, r3, #32
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e007      	b.n	8002366 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002360:	2b80      	cmp	r3, #128	; 0x80
 8002362:	d1ca      	bne.n	80022fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800237a:	e02d      	b.n	80023d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 f837 	bl	80023f0 <I2C_IsAcknowledgeFailed>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e02d      	b.n	80023e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002392:	d021      	beq.n	80023d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002394:	f7fe f966 	bl	8000664 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d302      	bcc.n	80023aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d116      	bne.n	80023d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	f043 0220 	orr.w	r2, r3, #32
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e007      	b.n	80023e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d1ca      	bne.n	800237c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002406:	d11b      	bne.n	8002440 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002410:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	f043 0204 	orr.w	r2, r3, #4
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b20      	cmp	r3, #32
 8002462:	d129      	bne.n	80024b8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2224      	movs	r2, #36	; 0x24
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0201 	bic.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0210 	bic.w	r2, r2, #16
 800248a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	e000      	b.n	80024ba <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
  }
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b085      	sub	sp, #20
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b20      	cmp	r3, #32
 80024de:	d12a      	bne.n	8002536 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2224      	movs	r2, #36	; 0x24
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0201 	bic.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002500:	89fb      	ldrh	r3, [r7, #14]
 8002502:	f023 030f 	bic.w	r3, r3, #15
 8002506:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	b29a      	uxth	r2, r3
 800250c:	89fb      	ldrh	r3, [r7, #14]
 800250e:	4313      	orrs	r3, r2
 8002510:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	89fa      	ldrh	r2, [r7, #14]
 8002518:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0201 	orr.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	e000      	b.n	8002538 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002536:	2302      	movs	r3, #2
  }
}
 8002538:	4618      	mov	r0, r3
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	603b      	str	r3, [r7, #0]
 8002552:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	4a1f      	ldr	r2, [pc, #124]	; (80025d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255c:	6413      	str	r3, [r2, #64]	; 0x40
 800255e:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800256a:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <HAL_PWREx_EnableOverDrive+0x94>)
 800256c:	2201      	movs	r2, #1
 800256e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002570:	f7fe f878 	bl	8000664 <HAL_GetTick>
 8002574:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002576:	e009      	b.n	800258c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002578:	f7fe f874 	bl	8000664 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002586:	d901      	bls.n	800258c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e01f      	b.n	80025cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800258c:	4b13      	ldr	r3, [pc, #76]	; (80025dc <HAL_PWREx_EnableOverDrive+0x98>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002598:	d1ee      	bne.n	8002578 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800259c:	2201      	movs	r2, #1
 800259e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025a0:	f7fe f860 	bl	8000664 <HAL_GetTick>
 80025a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025a6:	e009      	b.n	80025bc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025a8:	f7fe f85c 	bl	8000664 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025b6:	d901      	bls.n	80025bc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e007      	b.n	80025cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025bc:	4b07      	ldr	r3, [pc, #28]	; (80025dc <HAL_PWREx_EnableOverDrive+0x98>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025c8:	d1ee      	bne.n	80025a8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40023800 	.word	0x40023800
 80025d8:	420e0040 	.word	0x420e0040
 80025dc:	40007000 	.word	0x40007000
 80025e0:	420e0044 	.word	0x420e0044

080025e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e22d      	b.n	8002a52 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d075      	beq.n	80026ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002602:	4ba3      	ldr	r3, [pc, #652]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b04      	cmp	r3, #4
 800260c:	d00c      	beq.n	8002628 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800260e:	4ba0      	ldr	r3, [pc, #640]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002616:	2b08      	cmp	r3, #8
 8002618:	d112      	bne.n	8002640 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800261a:	4b9d      	ldr	r3, [pc, #628]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002626:	d10b      	bne.n	8002640 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002628:	4b99      	ldr	r3, [pc, #612]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d05b      	beq.n	80026ec <HAL_RCC_OscConfig+0x108>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d157      	bne.n	80026ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e208      	b.n	8002a52 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002648:	d106      	bne.n	8002658 <HAL_RCC_OscConfig+0x74>
 800264a:	4b91      	ldr	r3, [pc, #580]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a90      	ldr	r2, [pc, #576]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	e01d      	b.n	8002694 <HAL_RCC_OscConfig+0xb0>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0x98>
 8002662:	4b8b      	ldr	r3, [pc, #556]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a8a      	ldr	r2, [pc, #552]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	4b88      	ldr	r3, [pc, #544]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a87      	ldr	r2, [pc, #540]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e00b      	b.n	8002694 <HAL_RCC_OscConfig+0xb0>
 800267c:	4b84      	ldr	r3, [pc, #528]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a83      	ldr	r2, [pc, #524]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b81      	ldr	r3, [pc, #516]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a80      	ldr	r2, [pc, #512]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 800268e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d013      	beq.n	80026c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269c:	f7fd ffe2 	bl	8000664 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a4:	f7fd ffde 	bl	8000664 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	; 0x64
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e1cd      	b.n	8002a52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b6:	4b76      	ldr	r3, [pc, #472]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0xc0>
 80026c2:	e014      	b.n	80026ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7fd ffce 	bl	8000664 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026cc:	f7fd ffca 	bl	8000664 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	; 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e1b9      	b.n	8002a52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026de:	4b6c      	ldr	r3, [pc, #432]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0xe8>
 80026ea:	e000      	b.n	80026ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d063      	beq.n	80027c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026fa:	4b65      	ldr	r3, [pc, #404]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00b      	beq.n	800271e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002706:	4b62      	ldr	r3, [pc, #392]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800270e:	2b08      	cmp	r3, #8
 8002710:	d11c      	bne.n	800274c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002712:	4b5f      	ldr	r3, [pc, #380]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d116      	bne.n	800274c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271e:	4b5c      	ldr	r3, [pc, #368]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <HAL_RCC_OscConfig+0x152>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d001      	beq.n	8002736 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e18d      	b.n	8002a52 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002736:	4b56      	ldr	r3, [pc, #344]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4952      	ldr	r1, [pc, #328]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274a:	e03a      	b.n	80027c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d020      	beq.n	8002796 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002754:	4b4f      	ldr	r3, [pc, #316]	; (8002894 <HAL_RCC_OscConfig+0x2b0>)
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275a:	f7fd ff83 	bl	8000664 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002762:	f7fd ff7f 	bl	8000664 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e16e      	b.n	8002a52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002774:	4b46      	ldr	r3, [pc, #280]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002780:	4b43      	ldr	r3, [pc, #268]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4940      	ldr	r1, [pc, #256]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]
 8002794:	e015      	b.n	80027c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002796:	4b3f      	ldr	r3, [pc, #252]	; (8002894 <HAL_RCC_OscConfig+0x2b0>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279c:	f7fd ff62 	bl	8000664 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a4:	f7fd ff5e 	bl	8000664 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e14d      	b.n	8002a52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b6:	4b36      	ldr	r3, [pc, #216]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d030      	beq.n	8002830 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d016      	beq.n	8002804 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d6:	4b30      	ldr	r3, [pc, #192]	; (8002898 <HAL_RCC_OscConfig+0x2b4>)
 80027d8:	2201      	movs	r2, #1
 80027da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027dc:	f7fd ff42 	bl	8000664 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e4:	f7fd ff3e 	bl	8000664 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e12d      	b.n	8002a52 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f6:	4b26      	ldr	r3, [pc, #152]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0x200>
 8002802:	e015      	b.n	8002830 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002804:	4b24      	ldr	r3, [pc, #144]	; (8002898 <HAL_RCC_OscConfig+0x2b4>)
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280a:	f7fd ff2b 	bl	8000664 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002812:	f7fd ff27 	bl	8000664 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e116      	b.n	8002a52 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002824:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f0      	bne.n	8002812 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80a0 	beq.w	800297e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283e:	2300      	movs	r3, #0
 8002840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002842:	4b13      	ldr	r3, [pc, #76]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10f      	bne.n	800286e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285c:	6413      	str	r3, [r2, #64]	; 0x40
 800285e:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800286a:	2301      	movs	r3, #1
 800286c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_RCC_OscConfig+0x2b8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002876:	2b00      	cmp	r3, #0
 8002878:	d121      	bne.n	80028be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800287a:	4b08      	ldr	r3, [pc, #32]	; (800289c <HAL_RCC_OscConfig+0x2b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a07      	ldr	r2, [pc, #28]	; (800289c <HAL_RCC_OscConfig+0x2b8>)
 8002880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002886:	f7fd feed 	bl	8000664 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	e011      	b.n	80028b2 <HAL_RCC_OscConfig+0x2ce>
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800
 8002894:	42470000 	.word	0x42470000
 8002898:	42470e80 	.word	0x42470e80
 800289c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a0:	f7fd fee0 	bl	8000664 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e0cf      	b.n	8002a52 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b2:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <HAL_RCC_OscConfig+0x478>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d106      	bne.n	80028d4 <HAL_RCC_OscConfig+0x2f0>
 80028c6:	4b66      	ldr	r3, [pc, #408]	; (8002a60 <HAL_RCC_OscConfig+0x47c>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ca:	4a65      	ldr	r2, [pc, #404]	; (8002a60 <HAL_RCC_OscConfig+0x47c>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6713      	str	r3, [r2, #112]	; 0x70
 80028d2:	e01c      	b.n	800290e <HAL_RCC_OscConfig+0x32a>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b05      	cmp	r3, #5
 80028da:	d10c      	bne.n	80028f6 <HAL_RCC_OscConfig+0x312>
 80028dc:	4b60      	ldr	r3, [pc, #384]	; (8002a60 <HAL_RCC_OscConfig+0x47c>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	4a5f      	ldr	r2, [pc, #380]	; (8002a60 <HAL_RCC_OscConfig+0x47c>)
 80028e2:	f043 0304 	orr.w	r3, r3, #4
 80028e6:	6713      	str	r3, [r2, #112]	; 0x70
 80028e8:	4b5d      	ldr	r3, [pc, #372]	; (8002a60 <HAL_RCC_OscConfig+0x47c>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	4a5c      	ldr	r2, [pc, #368]	; (8002a60 <HAL_RCC_OscConfig+0x47c>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6713      	str	r3, [r2, #112]	; 0x70
 80028f4:	e00b      	b.n	800290e <HAL_RCC_OscConfig+0x32a>
 80028f6:	4b5a      	ldr	r3, [pc, #360]	; (8002a60 <HAL_RCC_OscConfig+0x47c>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	4a59      	ldr	r2, [pc, #356]	; (8002a60 <HAL_RCC_OscConfig+0x47c>)
 80028fc:	f023 0301 	bic.w	r3, r3, #1
 8002900:	6713      	str	r3, [r2, #112]	; 0x70
 8002902:	4b57      	ldr	r3, [pc, #348]	; (8002a60 <HAL_RCC_OscConfig+0x47c>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	4a56      	ldr	r2, [pc, #344]	; (8002a60 <HAL_RCC_OscConfig+0x47c>)
 8002908:	f023 0304 	bic.w	r3, r3, #4
 800290c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d015      	beq.n	8002942 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002916:	f7fd fea5 	bl	8000664 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291c:	e00a      	b.n	8002934 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800291e:	f7fd fea1 	bl	8000664 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	f241 3288 	movw	r2, #5000	; 0x1388
 800292c:	4293      	cmp	r3, r2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e08e      	b.n	8002a52 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002934:	4b4a      	ldr	r3, [pc, #296]	; (8002a60 <HAL_RCC_OscConfig+0x47c>)
 8002936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0ee      	beq.n	800291e <HAL_RCC_OscConfig+0x33a>
 8002940:	e014      	b.n	800296c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002942:	f7fd fe8f 	bl	8000664 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002948:	e00a      	b.n	8002960 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800294a:	f7fd fe8b 	bl	8000664 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	f241 3288 	movw	r2, #5000	; 0x1388
 8002958:	4293      	cmp	r3, r2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e078      	b.n	8002a52 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002960:	4b3f      	ldr	r3, [pc, #252]	; (8002a60 <HAL_RCC_OscConfig+0x47c>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1ee      	bne.n	800294a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800296c:	7dfb      	ldrb	r3, [r7, #23]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d105      	bne.n	800297e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002972:	4b3b      	ldr	r3, [pc, #236]	; (8002a60 <HAL_RCC_OscConfig+0x47c>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	4a3a      	ldr	r2, [pc, #232]	; (8002a60 <HAL_RCC_OscConfig+0x47c>)
 8002978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d064      	beq.n	8002a50 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002986:	4b36      	ldr	r3, [pc, #216]	; (8002a60 <HAL_RCC_OscConfig+0x47c>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b08      	cmp	r3, #8
 8002990:	d05c      	beq.n	8002a4c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d141      	bne.n	8002a1e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299a:	4b32      	ldr	r3, [pc, #200]	; (8002a64 <HAL_RCC_OscConfig+0x480>)
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7fd fe60 	bl	8000664 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a8:	f7fd fe5c 	bl	8000664 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e04b      	b.n	8002a52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ba:	4b29      	ldr	r3, [pc, #164]	; (8002a60 <HAL_RCC_OscConfig+0x47c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69da      	ldr	r2, [r3, #28]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	019b      	lsls	r3, r3, #6
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	085b      	lsrs	r3, r3, #1
 80029de:	3b01      	subs	r3, #1
 80029e0:	041b      	lsls	r3, r3, #16
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	061b      	lsls	r3, r3, #24
 80029ea:	491d      	ldr	r1, [pc, #116]	; (8002a60 <HAL_RCC_OscConfig+0x47c>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f0:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <HAL_RCC_OscConfig+0x480>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f6:	f7fd fe35 	bl	8000664 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fe:	f7fd fe31 	bl	8000664 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e020      	b.n	8002a52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a10:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <HAL_RCC_OscConfig+0x47c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x41a>
 8002a1c:	e018      	b.n	8002a50 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1e:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <HAL_RCC_OscConfig+0x480>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7fd fe1e 	bl	8000664 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a2c:	f7fd fe1a 	bl	8000664 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e009      	b.n	8002a52 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3e:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <HAL_RCC_OscConfig+0x47c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x448>
 8002a4a:	e001      	b.n	8002a50 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40007000 	.word	0x40007000
 8002a60:	40023800 	.word	0x40023800
 8002a64:	42470060 	.word	0x42470060

08002a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0ca      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a7c:	4b67      	ldr	r3, [pc, #412]	; (8002c1c <HAL_RCC_ClockConfig+0x1b4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d90c      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	4b64      	ldr	r3, [pc, #400]	; (8002c1c <HAL_RCC_ClockConfig+0x1b4>)
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b62      	ldr	r3, [pc, #392]	; (8002c1c <HAL_RCC_ClockConfig+0x1b4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0b6      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d020      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002abc:	4b58      	ldr	r3, [pc, #352]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	4a57      	ldr	r2, [pc, #348]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ac6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ad4:	4b52      	ldr	r3, [pc, #328]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	4a51      	ldr	r2, [pc, #324]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002ada:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ade:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae0:	4b4f      	ldr	r3, [pc, #316]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	494c      	ldr	r1, [pc, #304]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d044      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	4b46      	ldr	r3, [pc, #280]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d119      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e07d      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d003      	beq.n	8002b26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d107      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b26:	4b3e      	ldr	r3, [pc, #248]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e06d      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b36:	4b3a      	ldr	r3, [pc, #232]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e065      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b46:	4b36      	ldr	r3, [pc, #216]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f023 0203 	bic.w	r2, r3, #3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4933      	ldr	r1, [pc, #204]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b58:	f7fd fd84 	bl	8000664 <HAL_GetTick>
 8002b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b60:	f7fd fd80 	bl	8000664 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e04d      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b76:	4b2a      	ldr	r3, [pc, #168]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 020c 	and.w	r2, r3, #12
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d1eb      	bne.n	8002b60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b88:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_RCC_ClockConfig+0x1b4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d20c      	bcs.n	8002bb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b96:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <HAL_RCC_ClockConfig+0x1b4>)
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b1f      	ldr	r3, [pc, #124]	; (8002c1c <HAL_RCC_ClockConfig+0x1b4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e030      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bbc:	4b18      	ldr	r3, [pc, #96]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4915      	ldr	r1, [pc, #84]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bda:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	490d      	ldr	r1, [pc, #52]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bee:	f000 f81d 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	4909      	ldr	r1, [pc, #36]	; (8002c24 <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	5ccb      	ldrb	r3, [r1, r3]
 8002c02:	fa22 f303 	lsr.w	r3, r2, r3
 8002c06:	4a08      	ldr	r2, [pc, #32]	; (8002c28 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f7fd fce6 	bl	80005dc <HAL_InitTick>

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023c00 	.word	0x40023c00
 8002c20:	40023800 	.word	0x40023800
 8002c24:	08007860 	.word	0x08007860
 8002c28:	2000006c 	.word	0x2000006c

08002c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c30:	b084      	sub	sp, #16
 8002c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	607b      	str	r3, [r7, #4]
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c44:	4b67      	ldr	r3, [pc, #412]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 030c 	and.w	r3, r3, #12
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d00d      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0x40>
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	f200 80bd 	bhi.w	8002dd0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <HAL_RCC_GetSysClockFreq+0x34>
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d003      	beq.n	8002c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c5e:	e0b7      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c60:	4b61      	ldr	r3, [pc, #388]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c62:	60bb      	str	r3, [r7, #8]
       break;
 8002c64:	e0b7      	b.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c66:	4b61      	ldr	r3, [pc, #388]	; (8002dec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002c68:	60bb      	str	r3, [r7, #8]
      break;
 8002c6a:	e0b4      	b.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c6c:	4b5d      	ldr	r3, [pc, #372]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c74:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c76:	4b5b      	ldr	r3, [pc, #364]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d04d      	beq.n	8002d1e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c82:	4b58      	ldr	r3, [pc, #352]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	099b      	lsrs	r3, r3, #6
 8002c88:	461a      	mov	r2, r3
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c92:	f04f 0100 	mov.w	r1, #0
 8002c96:	ea02 0800 	and.w	r8, r2, r0
 8002c9a:	ea03 0901 	and.w	r9, r3, r1
 8002c9e:	4640      	mov	r0, r8
 8002ca0:	4649      	mov	r1, r9
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	014b      	lsls	r3, r1, #5
 8002cac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002cb0:	0142      	lsls	r2, r0, #5
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	ebb0 0008 	subs.w	r0, r0, r8
 8002cba:	eb61 0109 	sbc.w	r1, r1, r9
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	018b      	lsls	r3, r1, #6
 8002cc8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ccc:	0182      	lsls	r2, r0, #6
 8002cce:	1a12      	subs	r2, r2, r0
 8002cd0:	eb63 0301 	sbc.w	r3, r3, r1
 8002cd4:	f04f 0000 	mov.w	r0, #0
 8002cd8:	f04f 0100 	mov.w	r1, #0
 8002cdc:	00d9      	lsls	r1, r3, #3
 8002cde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ce2:	00d0      	lsls	r0, r2, #3
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	eb12 0208 	adds.w	r2, r2, r8
 8002cec:	eb43 0309 	adc.w	r3, r3, r9
 8002cf0:	f04f 0000 	mov.w	r0, #0
 8002cf4:	f04f 0100 	mov.w	r1, #0
 8002cf8:	0259      	lsls	r1, r3, #9
 8002cfa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002cfe:	0250      	lsls	r0, r2, #9
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4610      	mov	r0, r2
 8002d06:	4619      	mov	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	f7fd fac6 	bl	80002a0 <__aeabi_uldivmod>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4613      	mov	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	e04a      	b.n	8002db4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1e:	4b31      	ldr	r3, [pc, #196]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	099b      	lsrs	r3, r3, #6
 8002d24:	461a      	mov	r2, r3
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d2e:	f04f 0100 	mov.w	r1, #0
 8002d32:	ea02 0400 	and.w	r4, r2, r0
 8002d36:	ea03 0501 	and.w	r5, r3, r1
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	014b      	lsls	r3, r1, #5
 8002d48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d4c:	0142      	lsls	r2, r0, #5
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4619      	mov	r1, r3
 8002d52:	1b00      	subs	r0, r0, r4
 8002d54:	eb61 0105 	sbc.w	r1, r1, r5
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	018b      	lsls	r3, r1, #6
 8002d62:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d66:	0182      	lsls	r2, r0, #6
 8002d68:	1a12      	subs	r2, r2, r0
 8002d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d6e:	f04f 0000 	mov.w	r0, #0
 8002d72:	f04f 0100 	mov.w	r1, #0
 8002d76:	00d9      	lsls	r1, r3, #3
 8002d78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d7c:	00d0      	lsls	r0, r2, #3
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	1912      	adds	r2, r2, r4
 8002d84:	eb45 0303 	adc.w	r3, r5, r3
 8002d88:	f04f 0000 	mov.w	r0, #0
 8002d8c:	f04f 0100 	mov.w	r1, #0
 8002d90:	0299      	lsls	r1, r3, #10
 8002d92:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d96:	0290      	lsls	r0, r2, #10
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	461a      	mov	r2, r3
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	f7fd fa7a 	bl	80002a0 <__aeabi_uldivmod>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4613      	mov	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002db4:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	0c1b      	lsrs	r3, r3, #16
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dcc:	60bb      	str	r3, [r7, #8]
      break;
 8002dce:	e002      	b.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002dd2:	60bb      	str	r3, [r7, #8]
      break;
 8002dd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800
 8002de8:	00f42400 	.word	0x00f42400
 8002dec:	007a1200 	.word	0x007a1200

08002df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002df6:	681b      	ldr	r3, [r3, #0]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	2000006c 	.word	0x2000006c

08002e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e0c:	f7ff fff0 	bl	8002df0 <HAL_RCC_GetHCLKFreq>
 8002e10:	4602      	mov	r2, r0
 8002e12:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	0a9b      	lsrs	r3, r3, #10
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	4903      	ldr	r1, [pc, #12]	; (8002e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e1e:	5ccb      	ldrb	r3, [r1, r3]
 8002e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	08007870 	.word	0x08007870

08002e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e34:	f7ff ffdc 	bl	8002df0 <HAL_RCC_GetHCLKFreq>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	0b5b      	lsrs	r3, r3, #13
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	4903      	ldr	r1, [pc, #12]	; (8002e54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e46:	5ccb      	ldrb	r3, [r1, r3]
 8002e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40023800 	.word	0x40023800
 8002e54:	08007870 	.word	0x08007870

08002e58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d105      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d061      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e80:	4ba3      	ldr	r3, [pc, #652]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e86:	f7fd fbed 	bl	8000664 <HAL_GetTick>
 8002e8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e8e:	f7fd fbe9 	bl	8000664 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e177      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ea0:	4b9c      	ldr	r3, [pc, #624]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1f0      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d009      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	019a      	lsls	r2, r3, #6
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	071b      	lsls	r3, r3, #28
 8002ec4:	4993      	ldr	r1, [pc, #588]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01f      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ed8:	4b8e      	ldr	r3, [pc, #568]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ede:	0f1b      	lsrs	r3, r3, #28
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	019a      	lsls	r2, r3, #6
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	061b      	lsls	r3, r3, #24
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	071b      	lsls	r3, r3, #28
 8002ef8:	4986      	ldr	r1, [pc, #536]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f00:	4b84      	ldr	r3, [pc, #528]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f06:	f023 021f 	bic.w	r2, r3, #31
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	4980      	ldr	r1, [pc, #512]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f18:	4b7d      	ldr	r3, [pc, #500]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f1e:	f7fd fba1 	bl	8000664 <HAL_GetTick>
 8002f22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f24:	e008      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f26:	f7fd fb9d 	bl	8000664 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e12b      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f38:	4b76      	ldr	r3, [pc, #472]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d079      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f5c:	4b6e      	ldr	r3, [pc, #440]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f62:	f7fd fb7f 	bl	8000664 <HAL_GetTick>
 8002f66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002f6a:	f7fd fb7b 	bl	8000664 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e109      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f7c:	4b65      	ldr	r3, [pc, #404]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f88:	d0ef      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d020      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f96:	4b5f      	ldr	r3, [pc, #380]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9c:	0f1b      	lsrs	r3, r3, #28
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	019a      	lsls	r2, r3, #6
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	061b      	lsls	r3, r3, #24
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	071b      	lsls	r3, r3, #28
 8002fb6:	4957      	ldr	r1, [pc, #348]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002fbe:	4b55      	ldr	r3, [pc, #340]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	021b      	lsls	r3, r3, #8
 8002fd0:	4950      	ldr	r1, [pc, #320]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d01e      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fe4:	4b4b      	ldr	r3, [pc, #300]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fea:	0e1b      	lsrs	r3, r3, #24
 8002fec:	f003 030f 	and.w	r3, r3, #15
 8002ff0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	019a      	lsls	r2, r3, #6
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	061b      	lsls	r3, r3, #24
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	071b      	lsls	r3, r3, #28
 8003004:	4943      	ldr	r1, [pc, #268]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800300c:	4b41      	ldr	r3, [pc, #260]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800300e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003012:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	493e      	ldr	r1, [pc, #248]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003022:	4b3d      	ldr	r3, [pc, #244]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003028:	f7fd fb1c 	bl	8000664 <HAL_GetTick>
 800302c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003030:	f7fd fb18 	bl	8000664 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e0a6      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003042:	4b34      	ldr	r3, [pc, #208]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800304a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800304e:	d1ef      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 808d 	beq.w	8003178 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	4b2c      	ldr	r3, [pc, #176]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	4a2b      	ldr	r2, [pc, #172]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800306c:	6413      	str	r3, [r2, #64]	; 0x40
 800306e:	4b29      	ldr	r3, [pc, #164]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800307a:	4b28      	ldr	r3, [pc, #160]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a27      	ldr	r2, [pc, #156]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003084:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003086:	f7fd faed 	bl	8000664 <HAL_GetTick>
 800308a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800308e:	f7fd fae9 	bl	8000664 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e077      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80030a0:	4b1e      	ldr	r3, [pc, #120]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0f0      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030ac:	4b19      	ldr	r3, [pc, #100]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d039      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d032      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030ca:	4b12      	ldr	r3, [pc, #72]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80030cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030d4:	4b12      	ldr	r3, [pc, #72]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030da:	4b11      	ldr	r3, [pc, #68]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80030e0:	4a0c      	ldr	r2, [pc, #48]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80030e6:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d11e      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80030f2:	f7fd fab7 	bl	8000664 <HAL_GetTick>
 80030f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f8:	e014      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030fa:	f7fd fab3 	bl	8000664 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	f241 3288 	movw	r2, #5000	; 0x1388
 8003108:	4293      	cmp	r3, r2
 800310a:	d90b      	bls.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e03f      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8003110:	42470068 	.word	0x42470068
 8003114:	40023800 	.word	0x40023800
 8003118:	42470070 	.word	0x42470070
 800311c:	40007000 	.word	0x40007000
 8003120:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003124:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0e4      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003138:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800313c:	d10d      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x302>
 800313e:	4b16      	ldr	r3, [pc, #88]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800314e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003152:	4911      	ldr	r1, [pc, #68]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003154:	4313      	orrs	r3, r2
 8003156:	608b      	str	r3, [r1, #8]
 8003158:	e005      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800315a:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	4a0e      	ldr	r2, [pc, #56]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003160:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003164:	6093      	str	r3, [r2, #8]
 8003166:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003168:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003172:	4909      	ldr	r1, [pc, #36]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003174:	4313      	orrs	r3, r2
 8003176:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b00      	cmp	r3, #0
 8003182:	d004      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800318a:	4b04      	ldr	r3, [pc, #16]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800318c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40023800 	.word	0x40023800
 800319c:	424711e0 	.word	0x424711e0

080031a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e083      	b.n	80032ba <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7f5b      	ldrb	r3, [r3, #29]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f002 fec0 	bl	8005f48 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	22ca      	movs	r2, #202	; 0xca
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2253      	movs	r2, #83	; 0x53
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f897 	bl	8003312 <RTC_EnterInitMode>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d008      	beq.n	80031fc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	22ff      	movs	r2, #255	; 0xff
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2204      	movs	r2, #4
 80031f6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e05e      	b.n	80032ba <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6812      	ldr	r2, [r2, #0]
 8003206:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800320a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800320e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6899      	ldr	r1, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	68d2      	ldr	r2, [r2, #12]
 8003236:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6919      	ldr	r1, [r3, #16]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	041a      	lsls	r2, r3, #16
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800325a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0320 	and.w	r3, r3, #32
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10e      	bne.n	8003288 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f829 	bl	80032c2 <HAL_RTC_WaitForSynchro>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d008      	beq.n	8003288 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	22ff      	movs	r2, #255	; 0xff
 800327c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2204      	movs	r2, #4
 8003282:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e018      	b.n	80032ba <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003296:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	22ff      	movs	r2, #255	; 0xff
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80032b8:	2300      	movs	r3, #0
  }
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032dc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032de:	f7fd f9c1 	bl	8000664 <HAL_GetTick>
 80032e2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80032e4:	e009      	b.n	80032fa <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80032e6:	f7fd f9bd 	bl	8000664 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032f4:	d901      	bls.n	80032fa <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e007      	b.n	800330a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0ee      	beq.n	80032e6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003328:	2b00      	cmp	r3, #0
 800332a:	d119      	bne.n	8003360 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f04f 32ff 	mov.w	r2, #4294967295
 8003334:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003336:	f7fd f995 	bl	8000664 <HAL_GetTick>
 800333a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800333c:	e009      	b.n	8003352 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800333e:	f7fd f991 	bl	8000664 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800334c:	d901      	bls.n	8003352 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e007      	b.n	8003362 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0ee      	beq.n	800333e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e01d      	b.n	80033b8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d106      	bne.n	8003396 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f002 fdef 	bl	8005f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2202      	movs	r2, #2
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3304      	adds	r3, #4
 80033a6:	4619      	mov	r1, r3
 80033a8:	4610      	mov	r0, r2
 80033aa:	f000 fa21 	bl	80037f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	d007      	beq.n	80033fa <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0201 	orr.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b02      	cmp	r3, #2
 800341c:	d122      	bne.n	8003464 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b02      	cmp	r3, #2
 800342a:	d11b      	bne.n	8003464 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0202 	mvn.w	r2, #2
 8003434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f9b2 	bl	80037b4 <HAL_TIM_IC_CaptureCallback>
 8003450:	e005      	b.n	800345e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f9a4 	bl	80037a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f9b5 	bl	80037c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b04      	cmp	r3, #4
 8003470:	d122      	bne.n	80034b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b04      	cmp	r3, #4
 800347e:	d11b      	bne.n	80034b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0204 	mvn.w	r2, #4
 8003488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2202      	movs	r2, #2
 800348e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f988 	bl	80037b4 <HAL_TIM_IC_CaptureCallback>
 80034a4:	e005      	b.n	80034b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f97a 	bl	80037a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f98b 	bl	80037c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d122      	bne.n	800350c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d11b      	bne.n	800350c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0208 	mvn.w	r2, #8
 80034dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2204      	movs	r2, #4
 80034e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f95e 	bl	80037b4 <HAL_TIM_IC_CaptureCallback>
 80034f8:	e005      	b.n	8003506 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f950 	bl	80037a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f961 	bl	80037c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f003 0310 	and.w	r3, r3, #16
 8003516:	2b10      	cmp	r3, #16
 8003518:	d122      	bne.n	8003560 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	2b10      	cmp	r3, #16
 8003526:	d11b      	bne.n	8003560 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0210 	mvn.w	r2, #16
 8003530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2208      	movs	r2, #8
 8003536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f934 	bl	80037b4 <HAL_TIM_IC_CaptureCallback>
 800354c:	e005      	b.n	800355a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f926 	bl	80037a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f937 	bl	80037c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b01      	cmp	r3, #1
 800356c:	d10e      	bne.n	800358c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b01      	cmp	r3, #1
 800357a:	d107      	bne.n	800358c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0201 	mvn.w	r2, #1
 8003584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f001 f922 	bl	80047d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003596:	2b80      	cmp	r3, #128	; 0x80
 8003598:	d10e      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a4:	2b80      	cmp	r3, #128	; 0x80
 80035a6:	d107      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 faa5 	bl	8003b02 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c2:	2b40      	cmp	r3, #64	; 0x40
 80035c4:	d10e      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d0:	2b40      	cmp	r3, #64	; 0x40
 80035d2:	d107      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f8fc 	bl	80037dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	d10e      	bne.n	8003610 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d107      	bne.n	8003610 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0220 	mvn.w	r2, #32
 8003608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fa6f 	bl	8003aee <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003628:	2b01      	cmp	r3, #1
 800362a:	d101      	bne.n	8003630 <HAL_TIM_ConfigClockSource+0x18>
 800362c:	2302      	movs	r3, #2
 800362e:	e0b3      	b.n	8003798 <HAL_TIM_ConfigClockSource+0x180>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800364e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003656:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003668:	d03e      	beq.n	80036e8 <HAL_TIM_ConfigClockSource+0xd0>
 800366a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800366e:	f200 8087 	bhi.w	8003780 <HAL_TIM_ConfigClockSource+0x168>
 8003672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003676:	f000 8085 	beq.w	8003784 <HAL_TIM_ConfigClockSource+0x16c>
 800367a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367e:	d87f      	bhi.n	8003780 <HAL_TIM_ConfigClockSource+0x168>
 8003680:	2b70      	cmp	r3, #112	; 0x70
 8003682:	d01a      	beq.n	80036ba <HAL_TIM_ConfigClockSource+0xa2>
 8003684:	2b70      	cmp	r3, #112	; 0x70
 8003686:	d87b      	bhi.n	8003780 <HAL_TIM_ConfigClockSource+0x168>
 8003688:	2b60      	cmp	r3, #96	; 0x60
 800368a:	d050      	beq.n	800372e <HAL_TIM_ConfigClockSource+0x116>
 800368c:	2b60      	cmp	r3, #96	; 0x60
 800368e:	d877      	bhi.n	8003780 <HAL_TIM_ConfigClockSource+0x168>
 8003690:	2b50      	cmp	r3, #80	; 0x50
 8003692:	d03c      	beq.n	800370e <HAL_TIM_ConfigClockSource+0xf6>
 8003694:	2b50      	cmp	r3, #80	; 0x50
 8003696:	d873      	bhi.n	8003780 <HAL_TIM_ConfigClockSource+0x168>
 8003698:	2b40      	cmp	r3, #64	; 0x40
 800369a:	d058      	beq.n	800374e <HAL_TIM_ConfigClockSource+0x136>
 800369c:	2b40      	cmp	r3, #64	; 0x40
 800369e:	d86f      	bhi.n	8003780 <HAL_TIM_ConfigClockSource+0x168>
 80036a0:	2b30      	cmp	r3, #48	; 0x30
 80036a2:	d064      	beq.n	800376e <HAL_TIM_ConfigClockSource+0x156>
 80036a4:	2b30      	cmp	r3, #48	; 0x30
 80036a6:	d86b      	bhi.n	8003780 <HAL_TIM_ConfigClockSource+0x168>
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d060      	beq.n	800376e <HAL_TIM_ConfigClockSource+0x156>
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	d867      	bhi.n	8003780 <HAL_TIM_ConfigClockSource+0x168>
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d05c      	beq.n	800376e <HAL_TIM_ConfigClockSource+0x156>
 80036b4:	2b10      	cmp	r3, #16
 80036b6:	d05a      	beq.n	800376e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80036b8:	e062      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6899      	ldr	r1, [r3, #8]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f000 f9ab 	bl	8003a24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	609a      	str	r2, [r3, #8]
      break;
 80036e6:	e04e      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6818      	ldr	r0, [r3, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	6899      	ldr	r1, [r3, #8]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f000 f994 	bl	8003a24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800370a:	609a      	str	r2, [r3, #8]
      break;
 800370c:	e03b      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	6859      	ldr	r1, [r3, #4]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	461a      	mov	r2, r3
 800371c:	f000 f908 	bl	8003930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2150      	movs	r1, #80	; 0x50
 8003726:	4618      	mov	r0, r3
 8003728:	f000 f961 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 800372c:	e02b      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6818      	ldr	r0, [r3, #0]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	6859      	ldr	r1, [r3, #4]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	461a      	mov	r2, r3
 800373c:	f000 f927 	bl	800398e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2160      	movs	r1, #96	; 0x60
 8003746:	4618      	mov	r0, r3
 8003748:	f000 f951 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 800374c:	e01b      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	6859      	ldr	r1, [r3, #4]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	461a      	mov	r2, r3
 800375c:	f000 f8e8 	bl	8003930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2140      	movs	r1, #64	; 0x40
 8003766:	4618      	mov	r0, r3
 8003768:	f000 f941 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 800376c:	e00b      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4619      	mov	r1, r3
 8003778:	4610      	mov	r0, r2
 800377a:	f000 f938 	bl	80039ee <TIM_ITRx_SetConfig>
      break;
 800377e:	e002      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003780:	bf00      	nop
 8003782:	e000      	b.n	8003786 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003784:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a40      	ldr	r2, [pc, #256]	; (8003904 <TIM_Base_SetConfig+0x114>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d013      	beq.n	8003830 <TIM_Base_SetConfig+0x40>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380e:	d00f      	beq.n	8003830 <TIM_Base_SetConfig+0x40>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a3d      	ldr	r2, [pc, #244]	; (8003908 <TIM_Base_SetConfig+0x118>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00b      	beq.n	8003830 <TIM_Base_SetConfig+0x40>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a3c      	ldr	r2, [pc, #240]	; (800390c <TIM_Base_SetConfig+0x11c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d007      	beq.n	8003830 <TIM_Base_SetConfig+0x40>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a3b      	ldr	r2, [pc, #236]	; (8003910 <TIM_Base_SetConfig+0x120>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d003      	beq.n	8003830 <TIM_Base_SetConfig+0x40>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a3a      	ldr	r2, [pc, #232]	; (8003914 <TIM_Base_SetConfig+0x124>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d108      	bne.n	8003842 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a2f      	ldr	r2, [pc, #188]	; (8003904 <TIM_Base_SetConfig+0x114>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d02b      	beq.n	80038a2 <TIM_Base_SetConfig+0xb2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003850:	d027      	beq.n	80038a2 <TIM_Base_SetConfig+0xb2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a2c      	ldr	r2, [pc, #176]	; (8003908 <TIM_Base_SetConfig+0x118>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d023      	beq.n	80038a2 <TIM_Base_SetConfig+0xb2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a2b      	ldr	r2, [pc, #172]	; (800390c <TIM_Base_SetConfig+0x11c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d01f      	beq.n	80038a2 <TIM_Base_SetConfig+0xb2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a2a      	ldr	r2, [pc, #168]	; (8003910 <TIM_Base_SetConfig+0x120>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d01b      	beq.n	80038a2 <TIM_Base_SetConfig+0xb2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a29      	ldr	r2, [pc, #164]	; (8003914 <TIM_Base_SetConfig+0x124>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d017      	beq.n	80038a2 <TIM_Base_SetConfig+0xb2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a28      	ldr	r2, [pc, #160]	; (8003918 <TIM_Base_SetConfig+0x128>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d013      	beq.n	80038a2 <TIM_Base_SetConfig+0xb2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a27      	ldr	r2, [pc, #156]	; (800391c <TIM_Base_SetConfig+0x12c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00f      	beq.n	80038a2 <TIM_Base_SetConfig+0xb2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a26      	ldr	r2, [pc, #152]	; (8003920 <TIM_Base_SetConfig+0x130>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d00b      	beq.n	80038a2 <TIM_Base_SetConfig+0xb2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a25      	ldr	r2, [pc, #148]	; (8003924 <TIM_Base_SetConfig+0x134>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d007      	beq.n	80038a2 <TIM_Base_SetConfig+0xb2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a24      	ldr	r2, [pc, #144]	; (8003928 <TIM_Base_SetConfig+0x138>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d003      	beq.n	80038a2 <TIM_Base_SetConfig+0xb2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a23      	ldr	r2, [pc, #140]	; (800392c <TIM_Base_SetConfig+0x13c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d108      	bne.n	80038b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a0a      	ldr	r2, [pc, #40]	; (8003904 <TIM_Base_SetConfig+0x114>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d003      	beq.n	80038e8 <TIM_Base_SetConfig+0xf8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a0c      	ldr	r2, [pc, #48]	; (8003914 <TIM_Base_SetConfig+0x124>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d103      	bne.n	80038f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	615a      	str	r2, [r3, #20]
}
 80038f6:	bf00      	nop
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40010000 	.word	0x40010000
 8003908:	40000400 	.word	0x40000400
 800390c:	40000800 	.word	0x40000800
 8003910:	40000c00 	.word	0x40000c00
 8003914:	40010400 	.word	0x40010400
 8003918:	40014000 	.word	0x40014000
 800391c:	40014400 	.word	0x40014400
 8003920:	40014800 	.word	0x40014800
 8003924:	40001800 	.word	0x40001800
 8003928:	40001c00 	.word	0x40001c00
 800392c:	40002000 	.word	0x40002000

08003930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	f023 0201 	bic.w	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800395a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f023 030a 	bic.w	r3, r3, #10
 800396c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	621a      	str	r2, [r3, #32]
}
 8003982:	bf00      	nop
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800398e:	b480      	push	{r7}
 8003990:	b087      	sub	sp, #28
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	f023 0210 	bic.w	r2, r3, #16
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	031b      	lsls	r3, r3, #12
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	621a      	str	r2, [r3, #32]
}
 80039e2:	bf00      	nop
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f043 0307 	orr.w	r3, r3, #7
 8003a10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	609a      	str	r2, [r3, #8]
}
 8003a18:	bf00      	nop
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	021a      	lsls	r2, r3, #8
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	609a      	str	r2, [r3, #8]
}
 8003a58:	bf00      	nop
 8003a5a:	371c      	adds	r7, #28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e032      	b.n	8003ae2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ab4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e03f      	b.n	8003ba8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d106      	bne.n	8003b42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f002 fa5d 	bl	8005ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2224      	movs	r2, #36	; 0x24
 8003b46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fbd6 	bl	800430c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b20      	cmp	r3, #32
 8003bce:	f040 8083 	bne.w	8003cd8 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <HAL_UART_Transmit+0x2e>
 8003bd8:	88fb      	ldrh	r3, [r7, #6]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e07b      	b.n	8003cda <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_UART_Transmit+0x40>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e074      	b.n	8003cda <HAL_UART_Transmit+0x12a>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2221      	movs	r2, #33	; 0x21
 8003c02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003c06:	f7fc fd2d 	bl	8000664 <HAL_GetTick>
 8003c0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	88fa      	ldrh	r2, [r7, #6]
 8003c10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	88fa      	ldrh	r2, [r7, #6]
 8003c16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c18:	e042      	b.n	8003ca0 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c30:	d122      	bne.n	8003c78 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2180      	movs	r1, #128	; 0x80
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f9f9 	bl	8004034 <UART_WaitOnFlagUntilTimeout>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e046      	b.n	8003cda <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c5e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d103      	bne.n	8003c70 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	3302      	adds	r3, #2
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	e017      	b.n	8003ca0 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	3301      	adds	r3, #1
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	e013      	b.n	8003ca0 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2180      	movs	r1, #128	; 0x80
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 f9d6 	bl	8004034 <UART_WaitOnFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e023      	b.n	8003cda <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	60ba      	str	r2, [r7, #8]
 8003c98:	781a      	ldrb	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1b7      	bne.n	8003c1a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2140      	movs	r1, #64	; 0x40
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 f9bd 	bl	8004034 <UART_WaitOnFlagUntilTimeout>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e00a      	b.n	8003cda <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	e000      	b.n	8003cda <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003cd8:	2302      	movs	r3, #2
  }
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	4613      	mov	r3, r2
 8003cee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b20      	cmp	r3, #32
 8003cfa:	d130      	bne.n	8003d5e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <HAL_UART_Transmit_IT+0x26>
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e029      	b.n	8003d60 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_UART_Transmit_IT+0x38>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e022      	b.n	8003d60 <HAL_UART_Transmit_IT+0x7e>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	88fa      	ldrh	r2, [r7, #6]
 8003d2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	88fa      	ldrh	r2, [r7, #6]
 8003d32:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2221      	movs	r2, #33	; 0x21
 8003d3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d58:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	e000      	b.n	8003d60 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003d5e:	2302      	movs	r3, #2
  }
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	4613      	mov	r3, r2
 8003d78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d140      	bne.n	8003e08 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <HAL_UART_Receive_IT+0x26>
 8003d8c:	88fb      	ldrh	r3, [r7, #6]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e039      	b.n	8003e0a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_UART_Receive_IT+0x38>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e032      	b.n	8003e0a <HAL_UART_Receive_IT+0x9e>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	88fa      	ldrh	r2, [r7, #6]
 8003db6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	88fa      	ldrh	r2, [r7, #6]
 8003dbc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2222      	movs	r2, #34	; 0x22
 8003dc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003de2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0220 	orr.w	r2, r2, #32
 8003e02:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	e000      	b.n	8003e0a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003e08:	2302      	movs	r3, #2
  }
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
	...

08003e18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10d      	bne.n	8003e6a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_UART_IRQHandler+0x52>
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f9d0 	bl	8004208 <UART_Receive_IT>
      return;
 8003e68:	e0cb      	b.n	8004002 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80ab 	beq.w	8003fc8 <HAL_UART_IRQHandler+0x1b0>
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d105      	bne.n	8003e88 <HAL_UART_IRQHandler+0x70>
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 80a0 	beq.w	8003fc8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x90>
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea0:	f043 0201 	orr.w	r2, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_UART_IRQHandler+0xb0>
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec0:	f043 0202 	orr.w	r2, r3, #2
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_UART_IRQHandler+0xd0>
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee0:	f043 0204 	orr.w	r2, r3, #4
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_UART_IRQHandler+0xf0>
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f00:	f043 0208 	orr.w	r2, r3, #8
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d077      	beq.n	8004000 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	f003 0320 	and.w	r3, r3, #32
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <HAL_UART_IRQHandler+0x112>
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d002      	beq.n	8003f2a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f96f 	bl	8004208 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f34:	2b40      	cmp	r3, #64	; 0x40
 8003f36:	bf0c      	ite	eq
 8003f38:	2301      	moveq	r3, #1
 8003f3a:	2300      	movne	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f44:	f003 0308 	and.w	r3, r3, #8
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d102      	bne.n	8003f52 <HAL_UART_IRQHandler+0x13a>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d031      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f8b8 	bl	80040c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f62:	2b40      	cmp	r3, #64	; 0x40
 8003f64:	d123      	bne.n	8003fae <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695a      	ldr	r2, [r3, #20]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f74:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d013      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f82:	4a21      	ldr	r2, [pc, #132]	; (8004008 <HAL_UART_IRQHandler+0x1f0>)
 8003f84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fc fff1 	bl	8000f72 <HAL_DMA_Abort_IT>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d016      	beq.n	8003fc4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa4:	e00e      	b.n	8003fc4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f83a 	bl	8004020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fac:	e00a      	b.n	8003fc4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f836 	bl	8004020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb4:	e006      	b.n	8003fc4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f832 	bl	8004020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003fc2:	e01d      	b.n	8004000 <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc4:	bf00      	nop
    return;
 8003fc6:	e01b      	b.n	8004000 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d008      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x1cc>
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f8a5 	bl	800412c <UART_Transmit_IT>
    return;
 8003fe2:	e00e      	b.n	8004002 <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d009      	beq.n	8004002 <HAL_UART_IRQHandler+0x1ea>
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d004      	beq.n	8004002 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f8ed 	bl	80041d8 <UART_EndTransmit_IT>
    return;
 8003ffe:	e000      	b.n	8004002 <HAL_UART_IRQHandler+0x1ea>
    return;
 8004000:	bf00      	nop
  }
}
 8004002:	3720      	adds	r7, #32
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	08004105 	.word	0x08004105

0800400c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	4613      	mov	r3, r2
 8004042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004044:	e02c      	b.n	80040a0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404c:	d028      	beq.n	80040a0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d007      	beq.n	8004064 <UART_WaitOnFlagUntilTimeout+0x30>
 8004054:	f7fc fb06 	bl	8000664 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	429a      	cmp	r2, r3
 8004062:	d21d      	bcs.n	80040a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004072:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695a      	ldr	r2, [r3, #20]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0201 	bic.w	r2, r2, #1
 8004082:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e00f      	b.n	80040c0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	4013      	ands	r3, r2
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	bf0c      	ite	eq
 80040b0:	2301      	moveq	r3, #1
 80040b2:	2300      	movne	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	461a      	mov	r2, r3
 80040b8:	79fb      	ldrb	r3, [r7, #7]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d0c3      	beq.n	8004046 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040de:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695a      	ldr	r2, [r3, #20]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0201 	bic.w	r2, r2, #1
 80040ee:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f7ff ff7e 	bl	8004020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004124:	bf00      	nop
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b21      	cmp	r3, #33	; 0x21
 800413e:	d144      	bne.n	80041ca <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004148:	d11a      	bne.n	8004180 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800415e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d105      	bne.n	8004174 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	1c9a      	adds	r2, r3, #2
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	621a      	str	r2, [r3, #32]
 8004172:	e00e      	b.n	8004192 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	621a      	str	r2, [r3, #32]
 800417e:	e008      	b.n	8004192 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	1c59      	adds	r1, r3, #1
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6211      	str	r1, [r2, #32]
 800418a:	781a      	ldrb	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29b      	uxth	r3, r3
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	4619      	mov	r1, r3
 80041a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10f      	bne.n	80041c6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	e000      	b.n	80041cc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80041ca:	2302      	movs	r3, #2
  }
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff ff07 	bl	800400c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b22      	cmp	r3, #34	; 0x22
 800421a:	d171      	bne.n	8004300 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004224:	d123      	bne.n	800426e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10e      	bne.n	8004252 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	b29b      	uxth	r3, r3
 800423c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424a:	1c9a      	adds	r2, r3, #2
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	629a      	str	r2, [r3, #40]	; 0x28
 8004250:	e029      	b.n	80042a6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	b29b      	uxth	r3, r3
 800425a:	b2db      	uxtb	r3, r3
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	629a      	str	r2, [r3, #40]	; 0x28
 800426c:	e01b      	b.n	80042a6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6858      	ldr	r0, [r3, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	1c59      	adds	r1, r3, #1
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6291      	str	r1, [r2, #40]	; 0x28
 8004286:	b2c2      	uxtb	r2, r0
 8004288:	701a      	strb	r2, [r3, #0]
 800428a:	e00c      	b.n	80042a6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	b2da      	uxtb	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004298:	1c58      	adds	r0, r3, #1
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	6288      	str	r0, [r1, #40]	; 0x28
 800429e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	4619      	mov	r1, r3
 80042b4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d120      	bne.n	80042fc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0220 	bic.w	r2, r2, #32
 80042c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695a      	ldr	r2, [r3, #20]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0201 	bic.w	r2, r2, #1
 80042e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fbda 	bl	8004aac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	e002      	b.n	8004302 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	e000      	b.n	8004302 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004300:	2302      	movs	r3, #2
  }
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
	...

0800430c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800430c:	b5b0      	push	{r4, r5, r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800434c:	f023 030c 	bic.w	r3, r3, #12
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	68f9      	ldr	r1, [r7, #12]
 8004356:	430b      	orrs	r3, r1
 8004358:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699a      	ldr	r2, [r3, #24]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004378:	f040 80e4 	bne.w	8004544 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4aab      	ldr	r2, [pc, #684]	; (8004630 <UART_SetConfig+0x324>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d004      	beq.n	8004390 <UART_SetConfig+0x84>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4aaa      	ldr	r2, [pc, #680]	; (8004634 <UART_SetConfig+0x328>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d16c      	bne.n	800446a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004390:	f7fe fd4e 	bl	8002e30 <HAL_RCC_GetPCLK2Freq>
 8004394:	4602      	mov	r2, r0
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	009a      	lsls	r2, r3, #2
 800439e:	441a      	add	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043aa:	4aa3      	ldr	r2, [pc, #652]	; (8004638 <UART_SetConfig+0x32c>)
 80043ac:	fba2 2303 	umull	r2, r3, r2, r3
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	011c      	lsls	r4, r3, #4
 80043b4:	f7fe fd3c 	bl	8002e30 <HAL_RCC_GetPCLK2Freq>
 80043b8:	4602      	mov	r2, r0
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	009a      	lsls	r2, r3, #2
 80043c2:	441a      	add	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	fbb2 f5f3 	udiv	r5, r2, r3
 80043ce:	f7fe fd2f 	bl	8002e30 <HAL_RCC_GetPCLK2Freq>
 80043d2:	4602      	mov	r2, r0
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	009a      	lsls	r2, r3, #2
 80043dc:	441a      	add	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	4a93      	ldr	r2, [pc, #588]	; (8004638 <UART_SetConfig+0x32c>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	2264      	movs	r2, #100	; 0x64
 80043f2:	fb02 f303 	mul.w	r3, r2, r3
 80043f6:	1aeb      	subs	r3, r5, r3
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	3332      	adds	r3, #50	; 0x32
 80043fc:	4a8e      	ldr	r2, [pc, #568]	; (8004638 <UART_SetConfig+0x32c>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800440a:	441c      	add	r4, r3
 800440c:	f7fe fd10 	bl	8002e30 <HAL_RCC_GetPCLK2Freq>
 8004410:	4602      	mov	r2, r0
 8004412:	4613      	mov	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	009a      	lsls	r2, r3, #2
 800441a:	441a      	add	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	fbb2 f5f3 	udiv	r5, r2, r3
 8004426:	f7fe fd03 	bl	8002e30 <HAL_RCC_GetPCLK2Freq>
 800442a:	4602      	mov	r2, r0
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	009a      	lsls	r2, r3, #2
 8004434:	441a      	add	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004440:	4a7d      	ldr	r2, [pc, #500]	; (8004638 <UART_SetConfig+0x32c>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	2264      	movs	r2, #100	; 0x64
 800444a:	fb02 f303 	mul.w	r3, r2, r3
 800444e:	1aeb      	subs	r3, r5, r3
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	3332      	adds	r3, #50	; 0x32
 8004454:	4a78      	ldr	r2, [pc, #480]	; (8004638 <UART_SetConfig+0x32c>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	f003 0207 	and.w	r2, r3, #7
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4422      	add	r2, r4
 8004466:	609a      	str	r2, [r3, #8]
 8004468:	e154      	b.n	8004714 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800446a:	f7fe fccd 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 800446e:	4602      	mov	r2, r0
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	009a      	lsls	r2, r3, #2
 8004478:	441a      	add	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	fbb2 f3f3 	udiv	r3, r2, r3
 8004484:	4a6c      	ldr	r2, [pc, #432]	; (8004638 <UART_SetConfig+0x32c>)
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	011c      	lsls	r4, r3, #4
 800448e:	f7fe fcbb 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 8004492:	4602      	mov	r2, r0
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	009a      	lsls	r2, r3, #2
 800449c:	441a      	add	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	fbb2 f5f3 	udiv	r5, r2, r3
 80044a8:	f7fe fcae 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 80044ac:	4602      	mov	r2, r0
 80044ae:	4613      	mov	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	009a      	lsls	r2, r3, #2
 80044b6:	441a      	add	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c2:	4a5d      	ldr	r2, [pc, #372]	; (8004638 <UART_SetConfig+0x32c>)
 80044c4:	fba2 2303 	umull	r2, r3, r2, r3
 80044c8:	095b      	lsrs	r3, r3, #5
 80044ca:	2264      	movs	r2, #100	; 0x64
 80044cc:	fb02 f303 	mul.w	r3, r2, r3
 80044d0:	1aeb      	subs	r3, r5, r3
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	3332      	adds	r3, #50	; 0x32
 80044d6:	4a58      	ldr	r2, [pc, #352]	; (8004638 <UART_SetConfig+0x32c>)
 80044d8:	fba2 2303 	umull	r2, r3, r2, r3
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044e4:	441c      	add	r4, r3
 80044e6:	f7fe fc8f 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 80044ea:	4602      	mov	r2, r0
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	009a      	lsls	r2, r3, #2
 80044f4:	441a      	add	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	fbb2 f5f3 	udiv	r5, r2, r3
 8004500:	f7fe fc82 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 8004504:	4602      	mov	r2, r0
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	009a      	lsls	r2, r3, #2
 800450e:	441a      	add	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	fbb2 f3f3 	udiv	r3, r2, r3
 800451a:	4a47      	ldr	r2, [pc, #284]	; (8004638 <UART_SetConfig+0x32c>)
 800451c:	fba2 2303 	umull	r2, r3, r2, r3
 8004520:	095b      	lsrs	r3, r3, #5
 8004522:	2264      	movs	r2, #100	; 0x64
 8004524:	fb02 f303 	mul.w	r3, r2, r3
 8004528:	1aeb      	subs	r3, r5, r3
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	3332      	adds	r3, #50	; 0x32
 800452e:	4a42      	ldr	r2, [pc, #264]	; (8004638 <UART_SetConfig+0x32c>)
 8004530:	fba2 2303 	umull	r2, r3, r2, r3
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	f003 0207 	and.w	r2, r3, #7
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4422      	add	r2, r4
 8004540:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004542:	e0e7      	b.n	8004714 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a39      	ldr	r2, [pc, #228]	; (8004630 <UART_SetConfig+0x324>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d004      	beq.n	8004558 <UART_SetConfig+0x24c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a38      	ldr	r2, [pc, #224]	; (8004634 <UART_SetConfig+0x328>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d171      	bne.n	800463c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004558:	f7fe fc6a 	bl	8002e30 <HAL_RCC_GetPCLK2Freq>
 800455c:	4602      	mov	r2, r0
 800455e:	4613      	mov	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	009a      	lsls	r2, r3, #2
 8004566:	441a      	add	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004572:	4a31      	ldr	r2, [pc, #196]	; (8004638 <UART_SetConfig+0x32c>)
 8004574:	fba2 2303 	umull	r2, r3, r2, r3
 8004578:	095b      	lsrs	r3, r3, #5
 800457a:	011c      	lsls	r4, r3, #4
 800457c:	f7fe fc58 	bl	8002e30 <HAL_RCC_GetPCLK2Freq>
 8004580:	4602      	mov	r2, r0
 8004582:	4613      	mov	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	009a      	lsls	r2, r3, #2
 800458a:	441a      	add	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	fbb2 f5f3 	udiv	r5, r2, r3
 8004596:	f7fe fc4b 	bl	8002e30 <HAL_RCC_GetPCLK2Freq>
 800459a:	4602      	mov	r2, r0
 800459c:	4613      	mov	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	009a      	lsls	r2, r3, #2
 80045a4:	441a      	add	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b0:	4a21      	ldr	r2, [pc, #132]	; (8004638 <UART_SetConfig+0x32c>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	2264      	movs	r2, #100	; 0x64
 80045ba:	fb02 f303 	mul.w	r3, r2, r3
 80045be:	1aeb      	subs	r3, r5, r3
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	3332      	adds	r3, #50	; 0x32
 80045c4:	4a1c      	ldr	r2, [pc, #112]	; (8004638 <UART_SetConfig+0x32c>)
 80045c6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045d0:	441c      	add	r4, r3
 80045d2:	f7fe fc2d 	bl	8002e30 <HAL_RCC_GetPCLK2Freq>
 80045d6:	4602      	mov	r2, r0
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	009a      	lsls	r2, r3, #2
 80045e0:	441a      	add	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	fbb2 f5f3 	udiv	r5, r2, r3
 80045ec:	f7fe fc20 	bl	8002e30 <HAL_RCC_GetPCLK2Freq>
 80045f0:	4602      	mov	r2, r0
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	009a      	lsls	r2, r3, #2
 80045fa:	441a      	add	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	fbb2 f3f3 	udiv	r3, r2, r3
 8004606:	4a0c      	ldr	r2, [pc, #48]	; (8004638 <UART_SetConfig+0x32c>)
 8004608:	fba2 2303 	umull	r2, r3, r2, r3
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	2264      	movs	r2, #100	; 0x64
 8004610:	fb02 f303 	mul.w	r3, r2, r3
 8004614:	1aeb      	subs	r3, r5, r3
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	3332      	adds	r3, #50	; 0x32
 800461a:	4a07      	ldr	r2, [pc, #28]	; (8004638 <UART_SetConfig+0x32c>)
 800461c:	fba2 2303 	umull	r2, r3, r2, r3
 8004620:	095b      	lsrs	r3, r3, #5
 8004622:	f003 020f 	and.w	r2, r3, #15
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4422      	add	r2, r4
 800462c:	609a      	str	r2, [r3, #8]
 800462e:	e071      	b.n	8004714 <UART_SetConfig+0x408>
 8004630:	40011000 	.word	0x40011000
 8004634:	40011400 	.word	0x40011400
 8004638:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800463c:	f7fe fbe4 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 8004640:	4602      	mov	r2, r0
 8004642:	4613      	mov	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	009a      	lsls	r2, r3, #2
 800464a:	441a      	add	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	fbb2 f3f3 	udiv	r3, r2, r3
 8004656:	4a31      	ldr	r2, [pc, #196]	; (800471c <UART_SetConfig+0x410>)
 8004658:	fba2 2303 	umull	r2, r3, r2, r3
 800465c:	095b      	lsrs	r3, r3, #5
 800465e:	011c      	lsls	r4, r3, #4
 8004660:	f7fe fbd2 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 8004664:	4602      	mov	r2, r0
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	009a      	lsls	r2, r3, #2
 800466e:	441a      	add	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	fbb2 f5f3 	udiv	r5, r2, r3
 800467a:	f7fe fbc5 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 800467e:	4602      	mov	r2, r0
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	009a      	lsls	r2, r3, #2
 8004688:	441a      	add	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	4a21      	ldr	r2, [pc, #132]	; (800471c <UART_SetConfig+0x410>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	2264      	movs	r2, #100	; 0x64
 800469e:	fb02 f303 	mul.w	r3, r2, r3
 80046a2:	1aeb      	subs	r3, r5, r3
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	3332      	adds	r3, #50	; 0x32
 80046a8:	4a1c      	ldr	r2, [pc, #112]	; (800471c <UART_SetConfig+0x410>)
 80046aa:	fba2 2303 	umull	r2, r3, r2, r3
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046b4:	441c      	add	r4, r3
 80046b6:	f7fe fba7 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 80046ba:	4602      	mov	r2, r0
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	009a      	lsls	r2, r3, #2
 80046c4:	441a      	add	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80046d0:	f7fe fb9a 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 80046d4:	4602      	mov	r2, r0
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	009a      	lsls	r2, r3, #2
 80046de:	441a      	add	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ea:	4a0c      	ldr	r2, [pc, #48]	; (800471c <UART_SetConfig+0x410>)
 80046ec:	fba2 2303 	umull	r2, r3, r2, r3
 80046f0:	095b      	lsrs	r3, r3, #5
 80046f2:	2264      	movs	r2, #100	; 0x64
 80046f4:	fb02 f303 	mul.w	r3, r2, r3
 80046f8:	1aeb      	subs	r3, r5, r3
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	3332      	adds	r3, #50	; 0x32
 80046fe:	4a07      	ldr	r2, [pc, #28]	; (800471c <UART_SetConfig+0x410>)
 8004700:	fba2 2303 	umull	r2, r3, r2, r3
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	f003 020f 	and.w	r2, r3, #15
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4422      	add	r2, r4
 8004710:	609a      	str	r2, [r3, #8]
}
 8004712:	e7ff      	b.n	8004714 <UART_SetConfig+0x408>
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bdb0      	pop	{r4, r5, r7, pc}
 800471c:	51eb851f 	.word	0x51eb851f

08004720 <update_nvitems>:




HAL_StatusTypeDef update_nvitems(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08e      	sub	sp, #56	; 0x38
 8004724:	af00      	add	r7, sp, #0
	uint32_t FirstSector,NbOfSectors,SECTORError;
	FLASH_EraseInitTypeDef EraseInitStruct;
	HAL_StatusTypeDef error= HAL_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    uint32_t Address,i;
    uint64_t Data;
    uint8_t *ptr;

	HAL_FLASH_Unlock();
 800472c:	f7fc fc98 	bl	8001060 <HAL_FLASH_Unlock>
	FirstSector = FLASH_SECTOR_23;
 8004730:	2317      	movs	r3, #23
 8004732:	62fb      	str	r3, [r7, #44]	; 0x2c
	NbOfSectors = 1;
 8004734:	2301      	movs	r3, #1
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28

	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8004738:	2300      	movs	r3, #0
 800473a:	603b      	str	r3, [r7, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800473c:	2302      	movs	r3, #2
 800473e:	613b      	str	r3, [r7, #16]
	EraseInitStruct.Sector        = FirstSector;
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.NbSectors     = NbOfSectors;
 8004744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004746:	60fb      	str	r3, [r7, #12]

	error = HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);
 8004748:	f107 0214 	add.w	r2, r7, #20
 800474c:	463b      	mov	r3, r7
 800474e:	4611      	mov	r1, r2
 8004750:	4618      	mov	r0, r3
 8004752:	f7fc fdf5 	bl	8001340 <HAL_FLASHEx_Erase>
 8004756:	4603      	mov	r3, r0
 8004758:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if(error != HAL_OK)
 800475c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004760:	2b00      	cmp	r3, #0
 8004762:	d002      	beq.n	800476a <update_nvitems+0x4a>
	{
		return error;
 8004764:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004768:	e02b      	b.n	80047c2 <update_nvitems+0xa2>
	}

	ptr = (uint8_t*)&default_nvitem;
 800476a:	4b18      	ldr	r3, [pc, #96]	; (80047cc <update_nvitems+0xac>)
 800476c:	627b      	str	r3, [r7, #36]	; 0x24

	for(i=0;i<sizeof(NVitemTypeDef);i++)
 800476e:	2300      	movs	r3, #0
 8004770:	637b      	str	r3, [r7, #52]	; 0x34
 8004772:	e021      	b.n	80047b8 <update_nvitems+0x98>
	{
		Address = (uint8_t*)nv_items+i;
 8004774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004776:	f103 6301 	add.w	r3, r3, #135266304	; 0x8100000
 800477a:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800477e:	623b      	str	r3, [r7, #32]
		Data = *((uint8_t*)ptr+ i);
 8004780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004784:	4413      	add	r3, r2
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	b2da      	uxtb	r2, r3
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,Address,Data);
 8004792:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004796:	6a39      	ldr	r1, [r7, #32]
 8004798:	2000      	movs	r0, #0
 800479a:	f7fc fc0d 	bl	8000fb8 <HAL_FLASH_Program>
 800479e:	4603      	mov	r3, r0
 80047a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if(error != HAL_OK)
 80047a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <update_nvitems+0x92>
		{
			return error;
 80047ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80047b0:	e007      	b.n	80047c2 <update_nvitems+0xa2>
	for(i=0;i<sizeof(NVitemTypeDef);i++)
 80047b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b4:	3301      	adds	r3, #1
 80047b6:	637b      	str	r3, [r7, #52]	; 0x34
 80047b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ba:	2b0b      	cmp	r3, #11
 80047bc:	d9da      	bls.n	8004774 <update_nvitems+0x54>
		}
	}

	HAL_FLASH_Lock();
 80047be:	f7fc fc71 	bl	80010a4 <HAL_FLASH_Lock>
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3738      	adds	r7, #56	; 0x38
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20000060 	.word	0x20000060

080047d0 <HAL_TIM_PeriodElapsedCallback>:
uint8_t key_value;
char uart_buf[30];


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  if(htim->Instance==TIM2)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e0:	d14b      	bne.n	800487a <HAL_TIM_PeriodElapsedCallback+0xaa>
  {
    if((timer_count%100)==0)
 80047e2:	4b4b      	ldr	r3, [pc, #300]	; (8004910 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	4b4b      	ldr	r3, [pc, #300]	; (8004914 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80047e8:	fb83 1302 	smull	r1, r3, r3, r2
 80047ec:	1159      	asrs	r1, r3, #5
 80047ee:	17d3      	asrs	r3, r2, #31
 80047f0:	1acb      	subs	r3, r1, r3
 80047f2:	2164      	movs	r1, #100	; 0x64
 80047f4:	fb01 f303 	mul.w	r3, r1, r3
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d138      	bne.n	8004870 <HAL_TIM_PeriodElapsedCallback+0xa0>
    {
      ctime.seconds++;
 80047fe:	4b46      	ldr	r3, [pc, #280]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004800:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	3301      	adds	r3, #1
 8004808:	b2db      	uxtb	r3, r3
 800480a:	b25a      	sxtb	r2, r3
 800480c:	4b42      	ldr	r3, [pc, #264]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800480e:	709a      	strb	r2, [r3, #2]

      if(ctime.seconds>=60)
 8004810:	4b41      	ldr	r3, [pc, #260]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004812:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004816:	2b3b      	cmp	r3, #59	; 0x3b
 8004818:	dd0b      	ble.n	8004832 <HAL_TIM_PeriodElapsedCallback+0x62>
      {
    	ctime.minutes++;
 800481a:	4b3f      	ldr	r3, [pc, #252]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800481c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	3301      	adds	r3, #1
 8004824:	b2db      	uxtb	r3, r3
 8004826:	b25a      	sxtb	r2, r3
 8004828:	4b3b      	ldr	r3, [pc, #236]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800482a:	705a      	strb	r2, [r3, #1]
    	ctime.seconds = 0;
 800482c:	4b3a      	ldr	r3, [pc, #232]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800482e:	2200      	movs	r2, #0
 8004830:	709a      	strb	r2, [r3, #2]
      }
      if(ctime.minutes>=60)
 8004832:	4b39      	ldr	r3, [pc, #228]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004834:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004838:	2b3b      	cmp	r3, #59	; 0x3b
 800483a:	dd0b      	ble.n	8004854 <HAL_TIM_PeriodElapsedCallback+0x84>
      {
    	ctime.hours++;
 800483c:	4b36      	ldr	r3, [pc, #216]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800483e:	f993 3000 	ldrsb.w	r3, [r3]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	3301      	adds	r3, #1
 8004846:	b2db      	uxtb	r3, r3
 8004848:	b25a      	sxtb	r2, r3
 800484a:	4b33      	ldr	r3, [pc, #204]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800484c:	701a      	strb	r2, [r3, #0]
        ctime.minutes = 0;
 800484e:	4b32      	ldr	r3, [pc, #200]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004850:	2200      	movs	r2, #0
 8004852:	705a      	strb	r2, [r3, #1]
      }
      if(ctime.hours>=24)
 8004854:	4b30      	ldr	r3, [pc, #192]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004856:	f993 3000 	ldrsb.w	r3, [r3]
 800485a:	2b17      	cmp	r3, #23
 800485c:	dd02      	ble.n	8004864 <HAL_TIM_PeriodElapsedCallback+0x94>
      {
    	ctime.hours = 0;
 800485e:	4b2e      	ldr	r3, [pc, #184]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004860:	2200      	movs	r2, #0
 8004862:	701a      	strb	r2, [r3, #0]
      }
#if 1
      if(current_state.mode==NORMAL_STATE)
 8004864:	4b2d      	ldr	r3, [pc, #180]	; (800491c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_TIM_PeriodElapsedCallback+0xa0>
      {
		  time_display();
 800486c:	f000 f868 	bl	8004940 <time_display>
      }
#endif
    }
	  timer_count++;
 8004870:	4b27      	ldr	r3, [pc, #156]	; (8004910 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3301      	adds	r3, #1
 8004876:	4a26      	ldr	r2, [pc, #152]	; (8004910 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004878:	6013      	str	r3, [r2, #0]
  }

  if(htim->Instance==TIM3)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a28      	ldr	r2, [pc, #160]	; (8004920 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d140      	bne.n	8004906 <HAL_TIM_PeriodElapsedCallback+0x136>
  {
	  ADC_value = HAL_ADC_GetValue(&hadc1);
 8004884:	4827      	ldr	r0, [pc, #156]	; (8004924 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004886:	f7fc f827 	bl	80008d8 <HAL_ADC_GetValue>
 800488a:	4603      	mov	r3, r0
 800488c:	461a      	mov	r2, r3
 800488e:	4b26      	ldr	r3, [pc, #152]	; (8004928 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004890:	601a      	str	r2, [r3, #0]
	      printf("ADC : %0d\r\n",ADC_value);
 8004892:	4b25      	ldr	r3, [pc, #148]	; (8004928 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4619      	mov	r1, r3
 8004898:	4824      	ldr	r0, [pc, #144]	; (800492c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800489a:	f001 fd7f 	bl	800639c <iprintf>
	      if(ADC_value<=UP_KEY_MAX)
 800489e:	4b22      	ldr	r3, [pc, #136]	; (8004928 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b0a      	cmp	r3, #10
 80048a4:	dc02      	bgt.n	80048ac <HAL_TIM_PeriodElapsedCallback+0xdc>
	      {
	      	printf("UP\r\n");
 80048a6:	4822      	ldr	r0, [pc, #136]	; (8004930 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80048a8:	f001 fdfe 	bl	80064a8 <puts>
	      }
	      if(ADC_value>= DOWN_KEY_MIN && ADC_value<=DOWN_KEY_MAX)
 80048ac:	4b1e      	ldr	r3, [pc, #120]	; (8004928 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f240 323d 	movw	r2, #829	; 0x33d
 80048b4:	4293      	cmp	r3, r2
 80048b6:	dd08      	ble.n	80048ca <HAL_TIM_PeriodElapsedCallback+0xfa>
 80048b8:	4b1b      	ldr	r3, [pc, #108]	; (8004928 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f240 3266 	movw	r2, #870	; 0x366
 80048c0:	4293      	cmp	r3, r2
 80048c2:	dc02      	bgt.n	80048ca <HAL_TIM_PeriodElapsedCallback+0xfa>
	      {
	      	printf("DOWN\r\n");
 80048c4:	481b      	ldr	r0, [pc, #108]	; (8004934 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80048c6:	f001 fdef 	bl	80064a8 <puts>
	      }
	      if(ADC_value>= LEFT_KEY_MIN && ADC_value<=LEFT_KEY_MAX)
 80048ca:	4b17      	ldr	r3, [pc, #92]	; (8004928 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f240 726b 	movw	r2, #1899	; 0x76b
 80048d2:	4293      	cmp	r3, r2
 80048d4:	dd08      	ble.n	80048e8 <HAL_TIM_PeriodElapsedCallback+0x118>
 80048d6:	4b14      	ldr	r3, [pc, #80]	; (8004928 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f240 72bc 	movw	r2, #1980	; 0x7bc
 80048de:	4293      	cmp	r3, r2
 80048e0:	dc02      	bgt.n	80048e8 <HAL_TIM_PeriodElapsedCallback+0x118>
	      {
	      	printf("LEFT\r\n");
 80048e2:	4815      	ldr	r0, [pc, #84]	; (8004938 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80048e4:	f001 fde0 	bl	80064a8 <puts>
	      }
	      if(ADC_value>= RIGHT_KEY_MIN && ADC_value<=RIGHT_KEY_MAX)
 80048e8:	4b0f      	ldr	r3, [pc, #60]	; (8004928 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f640 3267 	movw	r2, #2919	; 0xb67
 80048f0:	4293      	cmp	r3, r2
 80048f2:	dd08      	ble.n	8004906 <HAL_TIM_PeriodElapsedCallback+0x136>
 80048f4:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f640 32cc 	movw	r2, #3020	; 0xbcc
 80048fc:	4293      	cmp	r3, r2
 80048fe:	dc02      	bgt.n	8004906 <HAL_TIM_PeriodElapsedCallback+0x136>
	      {
	      	printf("RIGHT\r\n");
 8004900:	480e      	ldr	r0, [pc, #56]	; (800493c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8004902:	f001 fdd1 	bl	80064a8 <puts>
	      }

  }
}
 8004906:	bf00      	nop
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	2000034c 	.word	0x2000034c
 8004914:	51eb851f 	.word	0x51eb851f
 8004918:	2000027c 	.word	0x2000027c
 800491c:	200001d8 	.word	0x200001d8
 8004920:	40000400 	.word	0x40000400
 8004924:	20000280 	.word	0x20000280
 8004928:	20000274 	.word	0x20000274
 800492c:	08007710 	.word	0x08007710
 8004930:	0800771c 	.word	0x0800771c
 8004934:	08007720 	.word	0x08007720
 8004938:	08007728 	.word	0x08007728
 800493c:	08007730 	.word	0x08007730

08004940 <time_display>:

void time_display(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af02      	add	r7, sp, #8
  uint8_t hours;
  uint8_t minutes;
  uint8_t seconds;

  memset(line,0,sizeof(line));
 8004946:	2224      	movs	r2, #36	; 0x24
 8004948:	2100      	movs	r1, #0
 800494a:	4848      	ldr	r0, [pc, #288]	; (8004a6c <time_display+0x12c>)
 800494c:	f001 fd1e 	bl	800638c <memset>

  if(current_state.mode == NORMAL_STATE)
 8004950:	4b47      	ldr	r3, [pc, #284]	; (8004a70 <time_display+0x130>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d110      	bne.n	800497a <time_display+0x3a>
  {
	  sprintf(line[0],"Korea Polytech     \r\n");
 8004958:	4946      	ldr	r1, [pc, #280]	; (8004a74 <time_display+0x134>)
 800495a:	4844      	ldr	r0, [pc, #272]	; (8004a6c <time_display+0x12c>)
 800495c:	f001 fdac 	bl	80064b8 <siprintf>
	  hours = ctime.hours;
 8004960:	4b45      	ldr	r3, [pc, #276]	; (8004a78 <time_display+0x138>)
 8004962:	f993 3000 	ldrsb.w	r3, [r3]
 8004966:	71fb      	strb	r3, [r7, #7]
	  minutes = ctime.minutes;
 8004968:	4b43      	ldr	r3, [pc, #268]	; (8004a78 <time_display+0x138>)
 800496a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800496e:	71bb      	strb	r3, [r7, #6]
	  seconds = ctime.seconds;
 8004970:	4b41      	ldr	r3, [pc, #260]	; (8004a78 <time_display+0x138>)
 8004972:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004976:	717b      	strb	r3, [r7, #5]
 8004978:	e028      	b.n	80049cc <time_display+0x8c>
  }
  else if(current_state.mode == TIME_SETTING)
 800497a:	4b3d      	ldr	r3, [pc, #244]	; (8004a70 <time_display+0x130>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d110      	bne.n	80049a4 <time_display+0x64>
  {
	  sprintf(line[0],"Time Setting       \r\n");
 8004982:	493e      	ldr	r1, [pc, #248]	; (8004a7c <time_display+0x13c>)
 8004984:	4839      	ldr	r0, [pc, #228]	; (8004a6c <time_display+0x12c>)
 8004986:	f001 fd97 	bl	80064b8 <siprintf>
	  hours = stime.hours;
 800498a:	4b3d      	ldr	r3, [pc, #244]	; (8004a80 <time_display+0x140>)
 800498c:	f993 3000 	ldrsb.w	r3, [r3]
 8004990:	71fb      	strb	r3, [r7, #7]
	  minutes = stime.minutes;
 8004992:	4b3b      	ldr	r3, [pc, #236]	; (8004a80 <time_display+0x140>)
 8004994:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004998:	71bb      	strb	r3, [r7, #6]
	  seconds = stime.seconds;
 800499a:	4b39      	ldr	r3, [pc, #228]	; (8004a80 <time_display+0x140>)
 800499c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80049a0:	717b      	strb	r3, [r7, #5]
 80049a2:	e013      	b.n	80049cc <time_display+0x8c>
  }
  else if(current_state.mode == ALARM_TIME_SETTING)
 80049a4:	4b32      	ldr	r3, [pc, #200]	; (8004a70 <time_display+0x130>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d10f      	bne.n	80049cc <time_display+0x8c>
  {
	  sprintf(line[0],"Alarm Setting       \r\n");
 80049ac:	4935      	ldr	r1, [pc, #212]	; (8004a84 <time_display+0x144>)
 80049ae:	482f      	ldr	r0, [pc, #188]	; (8004a6c <time_display+0x12c>)
 80049b0:	f001 fd82 	bl	80064b8 <siprintf>
	  hours = atime.hours;
 80049b4:	4b34      	ldr	r3, [pc, #208]	; (8004a88 <time_display+0x148>)
 80049b6:	f993 3000 	ldrsb.w	r3, [r3]
 80049ba:	71fb      	strb	r3, [r7, #7]
	  minutes = atime.minutes;
 80049bc:	4b32      	ldr	r3, [pc, #200]	; (8004a88 <time_display+0x148>)
 80049be:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80049c2:	71bb      	strb	r3, [r7, #6]
	  seconds = atime.seconds;
 80049c4:	4b30      	ldr	r3, [pc, #192]	; (8004a88 <time_display+0x148>)
 80049c6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80049ca:	717b      	strb	r3, [r7, #5]
  }


  if(hours>=12)
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	2b0b      	cmp	r3, #11
 80049d0:	d911      	bls.n	80049f6 <time_display+0xb6>
  {
    strncpy(line[1],"PM ",3);
 80049d2:	4b2e      	ldr	r3, [pc, #184]	; (8004a8c <time_display+0x14c>)
 80049d4:	4a2e      	ldr	r2, [pc, #184]	; (8004a90 <time_display+0x150>)
 80049d6:	8811      	ldrh	r1, [r2, #0]
 80049d8:	7892      	ldrb	r2, [r2, #2]
 80049da:	8019      	strh	r1, [r3, #0]
 80049dc:	709a      	strb	r2, [r3, #2]
    sprintf(time_str,"%02d:%02d:%02d     ",hours-12,minutes,seconds);
 80049de:	79fb      	ldrb	r3, [r7, #7]
 80049e0:	f1a3 020c 	sub.w	r2, r3, #12
 80049e4:	79b9      	ldrb	r1, [r7, #6]
 80049e6:	797b      	ldrb	r3, [r7, #5]
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	460b      	mov	r3, r1
 80049ec:	4929      	ldr	r1, [pc, #164]	; (8004a94 <time_display+0x154>)
 80049ee:	482a      	ldr	r0, [pc, #168]	; (8004a98 <time_display+0x158>)
 80049f0:	f001 fd62 	bl	80064b8 <siprintf>
 80049f4:	e00e      	b.n	8004a14 <time_display+0xd4>
  }
  else
  {
    strncpy(line[1],"AM ",3);
 80049f6:	4b25      	ldr	r3, [pc, #148]	; (8004a8c <time_display+0x14c>)
 80049f8:	4a28      	ldr	r2, [pc, #160]	; (8004a9c <time_display+0x15c>)
 80049fa:	8811      	ldrh	r1, [r2, #0]
 80049fc:	7892      	ldrb	r2, [r2, #2]
 80049fe:	8019      	strh	r1, [r3, #0]
 8004a00:	709a      	strb	r2, [r3, #2]
    sprintf(time_str,"%02d:%02d:%02d     ",hours,minutes,seconds);
 8004a02:	79fa      	ldrb	r2, [r7, #7]
 8004a04:	79b9      	ldrb	r1, [r7, #6]
 8004a06:	797b      	ldrb	r3, [r7, #5]
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4921      	ldr	r1, [pc, #132]	; (8004a94 <time_display+0x154>)
 8004a0e:	4822      	ldr	r0, [pc, #136]	; (8004a98 <time_display+0x158>)
 8004a10:	f001 fd52 	bl	80064b8 <siprintf>
  }
  strcat(line[1],time_str);
 8004a14:	4920      	ldr	r1, [pc, #128]	; (8004a98 <time_display+0x158>)
 8004a16:	481d      	ldr	r0, [pc, #116]	; (8004a8c <time_display+0x14c>)
 8004a18:	f001 fd6e 	bl	80064f8 <strcat>

  if(current_state.mode == ALARM_TIME_SETTING)
 8004a1c:	4b14      	ldr	r3, [pc, #80]	; (8004a70 <time_display+0x130>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d10e      	bne.n	8004a42 <time_display+0x102>
	  strcat(line[1]," AL \r\n");
 8004a24:	4819      	ldr	r0, [pc, #100]	; (8004a8c <time_display+0x14c>)
 8004a26:	f7fb fbe3 	bl	80001f0 <strlen>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	4b17      	ldr	r3, [pc, #92]	; (8004a8c <time_display+0x14c>)
 8004a30:	4413      	add	r3, r2
 8004a32:	4a1b      	ldr	r2, [pc, #108]	; (8004aa0 <time_display+0x160>)
 8004a34:	6810      	ldr	r0, [r2, #0]
 8004a36:	6018      	str	r0, [r3, #0]
 8004a38:	8891      	ldrh	r1, [r2, #4]
 8004a3a:	7992      	ldrb	r2, [r2, #6]
 8004a3c:	8099      	strh	r1, [r3, #4]
 8004a3e:	719a      	strb	r2, [r3, #6]
 8004a40:	e00b      	b.n	8004a5a <time_display+0x11a>
  else
	  strcat(line[1],"\r\n");
 8004a42:	4812      	ldr	r0, [pc, #72]	; (8004a8c <time_display+0x14c>)
 8004a44:	f7fb fbd4 	bl	80001f0 <strlen>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <time_display+0x14c>)
 8004a4e:	4413      	add	r3, r2
 8004a50:	4a14      	ldr	r2, [pc, #80]	; (8004aa4 <time_display+0x164>)
 8004a52:	8811      	ldrh	r1, [r2, #0]
 8004a54:	7892      	ldrb	r2, [r2, #2]
 8004a56:	8019      	strh	r1, [r3, #0]
 8004a58:	709a      	strb	r2, [r3, #2]

  HAL_UART_Transmit_IT(&huart3,(uint8_t *)line,sizeof(line));
 8004a5a:	2224      	movs	r2, #36	; 0x24
 8004a5c:	4903      	ldr	r1, [pc, #12]	; (8004a6c <time_display+0x12c>)
 8004a5e:	4812      	ldr	r0, [pc, #72]	; (8004aa8 <time_display+0x168>)
 8004a60:	f7ff f93f 	bl	8003ce2 <HAL_UART_Transmit_IT>

}
 8004a64:	bf00      	nop
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	200001e8 	.word	0x200001e8
 8004a70:	200001d8 	.word	0x200001d8
 8004a74:	08007738 	.word	0x08007738
 8004a78:	2000027c 	.word	0x2000027c
 8004a7c:	08007750 	.word	0x08007750
 8004a80:	20000344 	.word	0x20000344
 8004a84:	08007768 	.word	0x08007768
 8004a88:	20000348 	.word	0x20000348
 8004a8c:	200001fa 	.word	0x200001fa
 8004a90:	08007780 	.word	0x08007780
 8004a94:	08007784 	.word	0x08007784
 8004a98:	20000334 	.word	0x20000334
 8004a9c:	08007798 	.word	0x08007798
 8004aa0:	0800779c 	.word	0x0800779c
 8004aa4:	080077a4 	.word	0x080077a4
 8004aa8:	20000140 	.word	0x20000140

08004aac <HAL_UART_RxCpltCallback>:
 */



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]

  if (huart->Instance == USART3)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a22      	ldr	r2, [pc, #136]	; (8004b44 <HAL_UART_RxCpltCallback+0x98>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d13d      	bne.n	8004b3a <HAL_UART_RxCpltCallback+0x8e>
  {
	current_time = HAL_GetTick();
 8004abe:	f7fb fdd1 	bl	8000664 <HAL_GetTick>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	4a20      	ldr	r2, [pc, #128]	; (8004b48 <HAL_UART_RxCpltCallback+0x9c>)
 8004ac6:	6013      	str	r3, [r2, #0]
    time_interval = current_time - last_time;
 8004ac8:	4b1f      	ldr	r3, [pc, #124]	; (8004b48 <HAL_UART_RxCpltCallback+0x9c>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b1f      	ldr	r3, [pc, #124]	; (8004b4c <HAL_UART_RxCpltCallback+0xa0>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	4a1f      	ldr	r2, [pc, #124]	; (8004b50 <HAL_UART_RxCpltCallback+0xa4>)
 8004ad4:	6013      	str	r3, [r2, #0]
    last_time = current_time;
 8004ad6:	4b1c      	ldr	r3, [pc, #112]	; (8004b48 <HAL_UART_RxCpltCallback+0x9c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1c      	ldr	r2, [pc, #112]	; (8004b4c <HAL_UART_RxCpltCallback+0xa0>)
 8004adc:	6013      	str	r3, [r2, #0]

    switch(current_state.mode)
 8004ade:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <HAL_UART_RxCpltCallback+0xa8>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d81f      	bhi.n	8004b26 <HAL_UART_RxCpltCallback+0x7a>
 8004ae6:	a201      	add	r2, pc, #4	; (adr r2, 8004aec <HAL_UART_RxCpltCallback+0x40>)
 8004ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aec:	08004afd 	.word	0x08004afd
 8004af0:	08004b15 	.word	0x08004b15
 8004af4:	08004b1b 	.word	0x08004b1b
 8004af8:	08004b21 	.word	0x08004b21
    {
      case NORMAL_STATE:
    	  switch(key_value)
 8004afc:	4b16      	ldr	r3, [pc, #88]	; (8004b58 <HAL_UART_RxCpltCallback+0xac>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b0d      	cmp	r3, #13
 8004b02:	d105      	bne.n	8004b10 <HAL_UART_RxCpltCallback+0x64>
    	  {
    	  	  case SEL_KEY:
        		  current_state.button = SEL;
 8004b04:	4b13      	ldr	r3, [pc, #76]	; (8004b54 <HAL_UART_RxCpltCallback+0xa8>)
 8004b06:	2205      	movs	r2, #5
 8004b08:	705a      	strb	r2, [r3, #1]
        		  mode_analysis();
 8004b0a:	f000 fb5d 	bl	80051c8 <mode_analysis>
    	  		  break;
 8004b0e:	e000      	b.n	8004b12 <HAL_UART_RxCpltCallback+0x66>
    	  	  default:  // Arrow keys is Not valid in NORMAL state
    	  		  break;
 8004b10:	bf00      	nop
    	  }
    	  break;
 8004b12:	e009      	b.n	8004b28 <HAL_UART_RxCpltCallback+0x7c>
      case TIME_SETTING:
    	  stime_setting();
 8004b14:	f000 f8b2 	bl	8004c7c <stime_setting>
    	  break;
 8004b18:	e006      	b.n	8004b28 <HAL_UART_RxCpltCallback+0x7c>
      case ALARM_TIME_SETTING:
    	  atime_setting();
 8004b1a:	f000 fa0f 	bl	8004f3c <atime_setting>
    	  break;
 8004b1e:	e003      	b.n	8004b28 <HAL_UART_RxCpltCallback+0x7c>
      case MUSIC_SELECT:
    	  music_select();
 8004b20:	f000 f820 	bl	8004b64 <music_select>
    	  break;
 8004b24:	e000      	b.n	8004b28 <HAL_UART_RxCpltCallback+0x7c>
      default:
    	  break;
 8004b26:	bf00      	nop
    }
    last_time_interval = time_interval;
 8004b28:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <HAL_UART_RxCpltCallback+0xa4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a0b      	ldr	r2, [pc, #44]	; (8004b5c <HAL_UART_RxCpltCallback+0xb0>)
 8004b2e:	6013      	str	r3, [r2, #0]

	/* Receive one byte in interrupt mode */
	HAL_UART_Receive_IT(&huart3, &key_value, 1);
 8004b30:	2201      	movs	r2, #1
 8004b32:	4909      	ldr	r1, [pc, #36]	; (8004b58 <HAL_UART_RxCpltCallback+0xac>)
 8004b34:	480a      	ldr	r0, [pc, #40]	; (8004b60 <HAL_UART_RxCpltCallback+0xb4>)
 8004b36:	f7ff f919 	bl	8003d6c <HAL_UART_Receive_IT>
  }
}
 8004b3a:	bf00      	nop
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40004800 	.word	0x40004800
 8004b48:	200001d4 	.word	0x200001d4
 8004b4c:	200002ec 	.word	0x200002ec
 8004b50:	20000210 	.word	0x20000210
 8004b54:	200001d8 	.word	0x200001d8
 8004b58:	200001e0 	.word	0x200001e0
 8004b5c:	20000350 	.word	0x20000350
 8004b60:	20000140 	.word	0x20000140

08004b64 <music_select>:

void music_select(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
  int pos, count;

  pos = current_state.music_num;
 8004b6a:	4b3a      	ldr	r3, [pc, #232]	; (8004c54 <music_select+0xf0>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	607b      	str	r3, [r7, #4]
  count = sizeof(alarm_music)/sizeof(alarm_music[0]);  //total music count
 8004b70:	2305      	movs	r3, #5
 8004b72:	603b      	str	r3, [r7, #0]

  switch(key_value)
 8004b74:	4b38      	ldr	r3, [pc, #224]	; (8004c58 <music_select+0xf4>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b43      	cmp	r3, #67	; 0x43
 8004b7a:	d01d      	beq.n	8004bb8 <music_select+0x54>
 8004b7c:	2b43      	cmp	r3, #67	; 0x43
 8004b7e:	dc28      	bgt.n	8004bd2 <music_select+0x6e>
 8004b80:	2b42      	cmp	r3, #66	; 0x42
 8004b82:	d00f      	beq.n	8004ba4 <music_select+0x40>
 8004b84:	2b42      	cmp	r3, #66	; 0x42
 8004b86:	dc24      	bgt.n	8004bd2 <music_select+0x6e>
 8004b88:	2b0d      	cmp	r3, #13
 8004b8a:	d015      	beq.n	8004bb8 <music_select+0x54>
 8004b8c:	2b41      	cmp	r3, #65	; 0x41
 8004b8e:	d120      	bne.n	8004bd2 <music_select+0x6e>
  {
    case UP_KEY:
    	pos++;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3301      	adds	r3, #1
 8004b94:	607b      	str	r3, [r7, #4]
    	if(pos==count)
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d116      	bne.n	8004bcc <music_select+0x68>
    	{
          pos =0;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	607b      	str	r3, [r7, #4]
    	}
    	break;
 8004ba2:	e013      	b.n	8004bcc <music_select+0x68>
    case DOWN_KEY:
    	pos--;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	607b      	str	r3, [r7, #4]
    	if(pos < 0)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	da0f      	bge.n	8004bd0 <music_select+0x6c>
    	{
          pos =count-1;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	607b      	str	r3, [r7, #4]
    	}
    	break;
 8004bb6:	e00b      	b.n	8004bd0 <music_select+0x6c>
      case SEL_KEY:
	  case RIGHT_KEY:
		  default_nvitem.alarm_music_num = pos;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	b25a      	sxtb	r2, r3
 8004bbc:	4b27      	ldr	r3, [pc, #156]	; (8004c5c <music_select+0xf8>)
 8004bbe:	729a      	strb	r2, [r3, #10]
    	  update_nvitems();
 8004bc0:	f7ff fdae 	bl	8004720 <update_nvitems>
		  current_state.mode = NORMAL_STATE;
 8004bc4:	4b23      	ldr	r3, [pc, #140]	; (8004c54 <music_select+0xf0>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	701a      	strb	r2, [r3, #0]
		  break;
 8004bca:	e002      	b.n	8004bd2 <music_select+0x6e>
    	break;
 8004bcc:	bf00      	nop
 8004bce:	e000      	b.n	8004bd2 <music_select+0x6e>
    	break;
 8004bd0:	bf00      	nop

  }
  current_state.music_num =  pos;
 8004bd2:	4a20      	ldr	r2, [pc, #128]	; (8004c54 <music_select+0xf0>)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6053      	str	r3, [r2, #4]

  memset(line,0,sizeof(line));
 8004bd8:	2224      	movs	r2, #36	; 0x24
 8004bda:	2100      	movs	r1, #0
 8004bdc:	4820      	ldr	r0, [pc, #128]	; (8004c60 <music_select+0xfc>)
 8004bde:	f001 fbd5 	bl	800638c <memset>
  if(pos <= count-2)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	3b01      	subs	r3, #1
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	da19      	bge.n	8004c20 <music_select+0xbc>
  {
    sprintf(line[0],"%s <\r\n",alarm_music[pos].music_title);  // "<" mark is selected music title
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	4413      	add	r3, r2
 8004bf4:	4a1b      	ldr	r2, [pc, #108]	; (8004c64 <music_select+0x100>)
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	491a      	ldr	r1, [pc, #104]	; (8004c68 <music_select+0x104>)
 8004bfe:	4818      	ldr	r0, [pc, #96]	; (8004c60 <music_select+0xfc>)
 8004c00:	f001 fc5a 	bl	80064b8 <siprintf>
    sprintf(line[1],"%s \r\n",alarm_music[pos+1].music_title);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	4613      	mov	r3, r2
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	4413      	add	r3, r2
 8004c0e:	4a15      	ldr	r2, [pc, #84]	; (8004c64 <music_select+0x100>)
 8004c10:	4413      	add	r3, r2
 8004c12:	3301      	adds	r3, #1
 8004c14:	461a      	mov	r2, r3
 8004c16:	4915      	ldr	r1, [pc, #84]	; (8004c6c <music_select+0x108>)
 8004c18:	4815      	ldr	r0, [pc, #84]	; (8004c70 <music_select+0x10c>)
 8004c1a:	f001 fc4d 	bl	80064b8 <siprintf>
 8004c1e:	e010      	b.n	8004c42 <music_select+0xde>
  }
  else
  {
    sprintf(line[0],"%s <\r\n",alarm_music[pos].music_title);
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	4613      	mov	r3, r2
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	4413      	add	r3, r2
 8004c28:	4a0e      	ldr	r2, [pc, #56]	; (8004c64 <music_select+0x100>)
 8004c2a:	4413      	add	r3, r2
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	461a      	mov	r2, r3
 8004c30:	490d      	ldr	r1, [pc, #52]	; (8004c68 <music_select+0x104>)
 8004c32:	480b      	ldr	r0, [pc, #44]	; (8004c60 <music_select+0xfc>)
 8004c34:	f001 fc40 	bl	80064b8 <siprintf>
    sprintf(line[1],"%s \r\n",alarm_music[0].music_title);
 8004c38:	4a0e      	ldr	r2, [pc, #56]	; (8004c74 <music_select+0x110>)
 8004c3a:	490c      	ldr	r1, [pc, #48]	; (8004c6c <music_select+0x108>)
 8004c3c:	480c      	ldr	r0, [pc, #48]	; (8004c70 <music_select+0x10c>)
 8004c3e:	f001 fc3b 	bl	80064b8 <siprintf>
  }

  HAL_UART_Transmit_IT(&huart3,(uint8_t *)line,sizeof(line));
 8004c42:	2224      	movs	r2, #36	; 0x24
 8004c44:	4906      	ldr	r1, [pc, #24]	; (8004c60 <music_select+0xfc>)
 8004c46:	480c      	ldr	r0, [pc, #48]	; (8004c78 <music_select+0x114>)
 8004c48:	f7ff f84b 	bl	8003ce2 <HAL_UART_Transmit_IT>

}
 8004c4c:	bf00      	nop
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	200001d8 	.word	0x200001d8
 8004c58:	200001e0 	.word	0x200001e0
 8004c5c:	20000060 	.word	0x20000060
 8004c60:	200001e8 	.word	0x200001e8
 8004c64:	20000008 	.word	0x20000008
 8004c68:	080077a8 	.word	0x080077a8
 8004c6c:	080077b0 	.word	0x080077b0
 8004c70:	200001fa 	.word	0x200001fa
 8004c74:	20000009 	.word	0x20000009
 8004c78:	20000140 	.word	0x20000140

08004c7c <stime_setting>:

void stime_setting(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
static	int position = 0;

	if(position==0)
 8004c80:	4ba8      	ldr	r3, [pc, #672]	; (8004f24 <stime_setting+0x2a8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d12d      	bne.n	8004ce4 <stime_setting+0x68>
	{
		switch(key_value)
 8004c88:	4ba7      	ldr	r3, [pc, #668]	; (8004f28 <stime_setting+0x2ac>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b43      	cmp	r3, #67	; 0x43
 8004c8e:	d00c      	beq.n	8004caa <stime_setting+0x2e>
 8004c90:	2b43      	cmp	r3, #67	; 0x43
 8004c92:	f300 812e 	bgt.w	8004ef2 <stime_setting+0x276>
 8004c96:	2b0d      	cmp	r3, #13
 8004c98:	d007      	beq.n	8004caa <stime_setting+0x2e>
 8004c9a:	2b0d      	cmp	r3, #13
 8004c9c:	f2c0 8129 	blt.w	8004ef2 <stime_setting+0x276>
 8004ca0:	3b41      	subs	r3, #65	; 0x41
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	f200 8125 	bhi.w	8004ef2 <stime_setting+0x276>
 8004ca8:	e003      	b.n	8004cb2 <stime_setting+0x36>
		{
		  case SEL_KEY:
		  case RIGHT_KEY:
			  position =1;
 8004caa:	4b9e      	ldr	r3, [pc, #632]	; (8004f24 <stime_setting+0x2a8>)
 8004cac:	2201      	movs	r2, #1
 8004cae:	601a      	str	r2, [r3, #0]
			  break;
 8004cb0:	e134      	b.n	8004f1c <stime_setting+0x2a0>
		  case UP_KEY:
		  case DOWN_KEY:
			  if(stime.hours>=12)
 8004cb2:	4b9e      	ldr	r3, [pc, #632]	; (8004f2c <stime_setting+0x2b0>)
 8004cb4:	f993 3000 	ldrsb.w	r3, [r3]
 8004cb8:	2b0b      	cmp	r3, #11
 8004cba:	dd09      	ble.n	8004cd0 <stime_setting+0x54>
				  stime.hours -=12;
 8004cbc:	4b9b      	ldr	r3, [pc, #620]	; (8004f2c <stime_setting+0x2b0>)
 8004cbe:	f993 3000 	ldrsb.w	r3, [r3]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	3b0c      	subs	r3, #12
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	b25a      	sxtb	r2, r3
 8004cca:	4b98      	ldr	r3, [pc, #608]	; (8004f2c <stime_setting+0x2b0>)
 8004ccc:	701a      	strb	r2, [r3, #0]
			  else
				  stime.hours +=12;
			  break;
 8004cce:	e125      	b.n	8004f1c <stime_setting+0x2a0>
				  stime.hours +=12;
 8004cd0:	4b96      	ldr	r3, [pc, #600]	; (8004f2c <stime_setting+0x2b0>)
 8004cd2:	f993 3000 	ldrsb.w	r3, [r3]
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	330c      	adds	r3, #12
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	b25a      	sxtb	r2, r3
 8004cde:	4b93      	ldr	r3, [pc, #588]	; (8004f2c <stime_setting+0x2b0>)
 8004ce0:	701a      	strb	r2, [r3, #0]
			  break;
 8004ce2:	e11b      	b.n	8004f1c <stime_setting+0x2a0>
		  default:
			  break;
		}
	}
	else if(position==1)
 8004ce4:	4b8f      	ldr	r3, [pc, #572]	; (8004f24 <stime_setting+0x2a8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d149      	bne.n	8004d80 <stime_setting+0x104>
	{
		switch(key_value)
 8004cec:	4b8e      	ldr	r3, [pc, #568]	; (8004f28 <stime_setting+0x2ac>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b0d      	cmp	r3, #13
 8004cf2:	d017      	beq.n	8004d24 <stime_setting+0xa8>
 8004cf4:	2b0d      	cmp	r3, #13
 8004cf6:	f2c0 80fe 	blt.w	8004ef6 <stime_setting+0x27a>
 8004cfa:	2b44      	cmp	r3, #68	; 0x44
 8004cfc:	f300 80fb 	bgt.w	8004ef6 <stime_setting+0x27a>
 8004d00:	2b41      	cmp	r3, #65	; 0x41
 8004d02:	f2c0 80f8 	blt.w	8004ef6 <stime_setting+0x27a>
 8004d06:	3b41      	subs	r3, #65	; 0x41
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	f200 80f4 	bhi.w	8004ef6 <stime_setting+0x27a>
 8004d0e:	a201      	add	r2, pc, #4	; (adr r2, 8004d14 <stime_setting+0x98>)
 8004d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d14:	08004d35 	.word	0x08004d35
 8004d18:	08004d5b 	.word	0x08004d5b
 8004d1c:	08004d25 	.word	0x08004d25
 8004d20:	08004d2d 	.word	0x08004d2d
		{
		  case SEL_KEY:
		  case RIGHT_KEY:
			  position =2;
 8004d24:	4b7f      	ldr	r3, [pc, #508]	; (8004f24 <stime_setting+0x2a8>)
 8004d26:	2202      	movs	r2, #2
 8004d28:	601a      	str	r2, [r3, #0]
			  break;
 8004d2a:	e0f7      	b.n	8004f1c <stime_setting+0x2a0>
		  case LEFT_KEY:
			  position =0;
 8004d2c:	4b7d      	ldr	r3, [pc, #500]	; (8004f24 <stime_setting+0x2a8>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]
			  break;
 8004d32:	e0f3      	b.n	8004f1c <stime_setting+0x2a0>
		  case UP_KEY:
			  stime.hours++;
 8004d34:	4b7d      	ldr	r3, [pc, #500]	; (8004f2c <stime_setting+0x2b0>)
 8004d36:	f993 3000 	ldrsb.w	r3, [r3]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	b25a      	sxtb	r2, r3
 8004d42:	4b7a      	ldr	r3, [pc, #488]	; (8004f2c <stime_setting+0x2b0>)
 8004d44:	701a      	strb	r2, [r3, #0]
			  if(stime.hours>=12)
 8004d46:	4b79      	ldr	r3, [pc, #484]	; (8004f2c <stime_setting+0x2b0>)
 8004d48:	f993 3000 	ldrsb.w	r3, [r3]
 8004d4c:	2b0b      	cmp	r3, #11
 8004d4e:	f340 80d4 	ble.w	8004efa <stime_setting+0x27e>
				  stime.hours = 0;
 8004d52:	4b76      	ldr	r3, [pc, #472]	; (8004f2c <stime_setting+0x2b0>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	701a      	strb	r2, [r3, #0]
			  break;
 8004d58:	e0cf      	b.n	8004efa <stime_setting+0x27e>
		  case DOWN_KEY:
			  stime.hours--;
 8004d5a:	4b74      	ldr	r3, [pc, #464]	; (8004f2c <stime_setting+0x2b0>)
 8004d5c:	f993 3000 	ldrsb.w	r3, [r3]
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	b25a      	sxtb	r2, r3
 8004d68:	4b70      	ldr	r3, [pc, #448]	; (8004f2c <stime_setting+0x2b0>)
 8004d6a:	701a      	strb	r2, [r3, #0]
			  if(stime.hours<0)
 8004d6c:	4b6f      	ldr	r3, [pc, #444]	; (8004f2c <stime_setting+0x2b0>)
 8004d6e:	f993 3000 	ldrsb.w	r3, [r3]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f280 80c3 	bge.w	8004efe <stime_setting+0x282>
				  stime.hours = 11;
 8004d78:	4b6c      	ldr	r3, [pc, #432]	; (8004f2c <stime_setting+0x2b0>)
 8004d7a:	220b      	movs	r2, #11
 8004d7c:	701a      	strb	r2, [r3, #0]
			  break;
 8004d7e:	e0be      	b.n	8004efe <stime_setting+0x282>
		  default:
			  break;
		}

	}
	else if(position==2)
 8004d80:	4b68      	ldr	r3, [pc, #416]	; (8004f24 <stime_setting+0x2a8>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d148      	bne.n	8004e1a <stime_setting+0x19e>
	{
		switch(key_value)
 8004d88:	4b67      	ldr	r3, [pc, #412]	; (8004f28 <stime_setting+0x2ac>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	2b0d      	cmp	r3, #13
 8004d8e:	d017      	beq.n	8004dc0 <stime_setting+0x144>
 8004d90:	2b0d      	cmp	r3, #13
 8004d92:	f2c0 80b6 	blt.w	8004f02 <stime_setting+0x286>
 8004d96:	2b44      	cmp	r3, #68	; 0x44
 8004d98:	f300 80b3 	bgt.w	8004f02 <stime_setting+0x286>
 8004d9c:	2b41      	cmp	r3, #65	; 0x41
 8004d9e:	f2c0 80b0 	blt.w	8004f02 <stime_setting+0x286>
 8004da2:	3b41      	subs	r3, #65	; 0x41
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	f200 80ac 	bhi.w	8004f02 <stime_setting+0x286>
 8004daa:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <stime_setting+0x134>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004dd1 	.word	0x08004dd1
 8004db4:	08004df7 	.word	0x08004df7
 8004db8:	08004dc1 	.word	0x08004dc1
 8004dbc:	08004dc9 	.word	0x08004dc9
		{
		  case SEL_KEY:
		  case RIGHT_KEY:
			  position =3;
 8004dc0:	4b58      	ldr	r3, [pc, #352]	; (8004f24 <stime_setting+0x2a8>)
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	601a      	str	r2, [r3, #0]
			  break;
 8004dc6:	e0a9      	b.n	8004f1c <stime_setting+0x2a0>
		  case LEFT_KEY:
			  position =1;
 8004dc8:	4b56      	ldr	r3, [pc, #344]	; (8004f24 <stime_setting+0x2a8>)
 8004dca:	2201      	movs	r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]
			  break;
 8004dce:	e0a5      	b.n	8004f1c <stime_setting+0x2a0>
		  case UP_KEY:
			  stime.minutes++;
 8004dd0:	4b56      	ldr	r3, [pc, #344]	; (8004f2c <stime_setting+0x2b0>)
 8004dd2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	3301      	adds	r3, #1
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	b25a      	sxtb	r2, r3
 8004dde:	4b53      	ldr	r3, [pc, #332]	; (8004f2c <stime_setting+0x2b0>)
 8004de0:	705a      	strb	r2, [r3, #1]
			  if(stime.minutes>=60)
 8004de2:	4b52      	ldr	r3, [pc, #328]	; (8004f2c <stime_setting+0x2b0>)
 8004de4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004de8:	2b3b      	cmp	r3, #59	; 0x3b
 8004dea:	f340 808c 	ble.w	8004f06 <stime_setting+0x28a>
				  stime.minutes = 0;
 8004dee:	4b4f      	ldr	r3, [pc, #316]	; (8004f2c <stime_setting+0x2b0>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	705a      	strb	r2, [r3, #1]
			  break;
 8004df4:	e087      	b.n	8004f06 <stime_setting+0x28a>
		  case DOWN_KEY:
			  stime.minutes--;
 8004df6:	4b4d      	ldr	r3, [pc, #308]	; (8004f2c <stime_setting+0x2b0>)
 8004df8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	b25a      	sxtb	r2, r3
 8004e04:	4b49      	ldr	r3, [pc, #292]	; (8004f2c <stime_setting+0x2b0>)
 8004e06:	705a      	strb	r2, [r3, #1]
			  if(stime.minutes<0)
 8004e08:	4b48      	ldr	r3, [pc, #288]	; (8004f2c <stime_setting+0x2b0>)
 8004e0a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	da7b      	bge.n	8004f0a <stime_setting+0x28e>
				  stime.minutes = 59;
 8004e12:	4b46      	ldr	r3, [pc, #280]	; (8004f2c <stime_setting+0x2b0>)
 8004e14:	223b      	movs	r2, #59	; 0x3b
 8004e16:	705a      	strb	r2, [r3, #1]
			  break;
 8004e18:	e077      	b.n	8004f0a <stime_setting+0x28e>
		  default:
			  break;
		}
	}
	else if(position==3)
 8004e1a:	4b42      	ldr	r3, [pc, #264]	; (8004f24 <stime_setting+0x2a8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d175      	bne.n	8004f0e <stime_setting+0x292>
	{
		switch(key_value)
 8004e22:	4b41      	ldr	r3, [pc, #260]	; (8004f28 <stime_setting+0x2ac>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b0d      	cmp	r3, #13
 8004e28:	d014      	beq.n	8004e54 <stime_setting+0x1d8>
 8004e2a:	2b0d      	cmp	r3, #13
 8004e2c:	db71      	blt.n	8004f12 <stime_setting+0x296>
 8004e2e:	2b44      	cmp	r3, #68	; 0x44
 8004e30:	dc6f      	bgt.n	8004f12 <stime_setting+0x296>
 8004e32:	2b41      	cmp	r3, #65	; 0x41
 8004e34:	db6d      	blt.n	8004f12 <stime_setting+0x296>
 8004e36:	3b41      	subs	r3, #65	; 0x41
 8004e38:	2b03      	cmp	r3, #3
 8004e3a:	d86a      	bhi.n	8004f12 <stime_setting+0x296>
 8004e3c:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <stime_setting+0x1c8>)
 8004e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e42:	bf00      	nop
 8004e44:	08004eab 	.word	0x08004eab
 8004e48:	08004ecf 	.word	0x08004ecf
 8004e4c:	08004e55 	.word	0x08004e55
 8004e50:	08004ea3 	.word	0x08004ea3
		{
		  case SEL_KEY:
		  case RIGHT_KEY:
			  position = 0;
 8004e54:	4b33      	ldr	r3, [pc, #204]	; (8004f24 <stime_setting+0x2a8>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]
	    	  ctime.hours = stime.hours;
 8004e5a:	4b34      	ldr	r3, [pc, #208]	; (8004f2c <stime_setting+0x2b0>)
 8004e5c:	f993 2000 	ldrsb.w	r2, [r3]
 8004e60:	4b33      	ldr	r3, [pc, #204]	; (8004f30 <stime_setting+0x2b4>)
 8004e62:	701a      	strb	r2, [r3, #0]
	    	  ctime.minutes = stime.minutes;
 8004e64:	4b31      	ldr	r3, [pc, #196]	; (8004f2c <stime_setting+0x2b0>)
 8004e66:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8004e6a:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <stime_setting+0x2b4>)
 8004e6c:	705a      	strb	r2, [r3, #1]
	    	  ctime.seconds = stime.seconds;
 8004e6e:	4b2f      	ldr	r3, [pc, #188]	; (8004f2c <stime_setting+0x2b0>)
 8004e70:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8004e74:	4b2e      	ldr	r3, [pc, #184]	; (8004f30 <stime_setting+0x2b4>)
 8004e76:	709a      	strb	r2, [r3, #2]

	    	  default_nvitem.setting_time.hours = stime.hours;
 8004e78:	4b2c      	ldr	r3, [pc, #176]	; (8004f2c <stime_setting+0x2b0>)
 8004e7a:	f993 2000 	ldrsb.w	r2, [r3]
 8004e7e:	4b2d      	ldr	r3, [pc, #180]	; (8004f34 <stime_setting+0x2b8>)
 8004e80:	711a      	strb	r2, [r3, #4]
	    	  default_nvitem.setting_time.minutes = stime.minutes;
 8004e82:	4b2a      	ldr	r3, [pc, #168]	; (8004f2c <stime_setting+0x2b0>)
 8004e84:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8004e88:	4b2a      	ldr	r3, [pc, #168]	; (8004f34 <stime_setting+0x2b8>)
 8004e8a:	715a      	strb	r2, [r3, #5]
	    	  default_nvitem.setting_time.seconds = stime.seconds;
 8004e8c:	4b27      	ldr	r3, [pc, #156]	; (8004f2c <stime_setting+0x2b0>)
 8004e8e:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8004e92:	4b28      	ldr	r3, [pc, #160]	; (8004f34 <stime_setting+0x2b8>)
 8004e94:	719a      	strb	r2, [r3, #6]
	    	  update_nvitems();
 8004e96:	f7ff fc43 	bl	8004720 <update_nvitems>
			  current_state.mode = NORMAL_STATE;
 8004e9a:	4b27      	ldr	r3, [pc, #156]	; (8004f38 <stime_setting+0x2bc>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	701a      	strb	r2, [r3, #0]
			  break;
 8004ea0:	e03c      	b.n	8004f1c <stime_setting+0x2a0>
		  case LEFT_KEY:
			  position =2;
 8004ea2:	4b20      	ldr	r3, [pc, #128]	; (8004f24 <stime_setting+0x2a8>)
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	601a      	str	r2, [r3, #0]
			  break;
 8004ea8:	e038      	b.n	8004f1c <stime_setting+0x2a0>
		  case UP_KEY:
			  stime.seconds++;
 8004eaa:	4b20      	ldr	r3, [pc, #128]	; (8004f2c <stime_setting+0x2b0>)
 8004eac:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	b25a      	sxtb	r2, r3
 8004eb8:	4b1c      	ldr	r3, [pc, #112]	; (8004f2c <stime_setting+0x2b0>)
 8004eba:	709a      	strb	r2, [r3, #2]
			  if(stime.seconds>=60)
 8004ebc:	4b1b      	ldr	r3, [pc, #108]	; (8004f2c <stime_setting+0x2b0>)
 8004ebe:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004ec2:	2b3b      	cmp	r3, #59	; 0x3b
 8004ec4:	dd27      	ble.n	8004f16 <stime_setting+0x29a>
				  stime.seconds = 0;
 8004ec6:	4b19      	ldr	r3, [pc, #100]	; (8004f2c <stime_setting+0x2b0>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	709a      	strb	r2, [r3, #2]
			  break;
 8004ecc:	e023      	b.n	8004f16 <stime_setting+0x29a>
		  case DOWN_KEY:
			  stime.seconds--;
 8004ece:	4b17      	ldr	r3, [pc, #92]	; (8004f2c <stime_setting+0x2b0>)
 8004ed0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	b25a      	sxtb	r2, r3
 8004edc:	4b13      	ldr	r3, [pc, #76]	; (8004f2c <stime_setting+0x2b0>)
 8004ede:	709a      	strb	r2, [r3, #2]
			  if(stime.seconds<0)
 8004ee0:	4b12      	ldr	r3, [pc, #72]	; (8004f2c <stime_setting+0x2b0>)
 8004ee2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	da17      	bge.n	8004f1a <stime_setting+0x29e>
				  stime.seconds = 59;
 8004eea:	4b10      	ldr	r3, [pc, #64]	; (8004f2c <stime_setting+0x2b0>)
 8004eec:	223b      	movs	r2, #59	; 0x3b
 8004eee:	709a      	strb	r2, [r3, #2]
			  break;
 8004ef0:	e013      	b.n	8004f1a <stime_setting+0x29e>
			  break;
 8004ef2:	bf00      	nop
 8004ef4:	e012      	b.n	8004f1c <stime_setting+0x2a0>
			  break;
 8004ef6:	bf00      	nop
 8004ef8:	e010      	b.n	8004f1c <stime_setting+0x2a0>
			  break;
 8004efa:	bf00      	nop
 8004efc:	e00e      	b.n	8004f1c <stime_setting+0x2a0>
			  break;
 8004efe:	bf00      	nop
 8004f00:	e00c      	b.n	8004f1c <stime_setting+0x2a0>
			  break;
 8004f02:	bf00      	nop
 8004f04:	e00a      	b.n	8004f1c <stime_setting+0x2a0>
			  break;
 8004f06:	bf00      	nop
 8004f08:	e008      	b.n	8004f1c <stime_setting+0x2a0>
			  break;
 8004f0a:	bf00      	nop
 8004f0c:	e006      	b.n	8004f1c <stime_setting+0x2a0>
		  default:
			  break;
		}
	}
 8004f0e:	bf00      	nop
 8004f10:	e004      	b.n	8004f1c <stime_setting+0x2a0>
			  break;
 8004f12:	bf00      	nop
 8004f14:	e002      	b.n	8004f1c <stime_setting+0x2a0>
			  break;
 8004f16:	bf00      	nop
 8004f18:	e000      	b.n	8004f1c <stime_setting+0x2a0>
			  break;
 8004f1a:	bf00      	nop
//	printf("<%d,%d,%d,%d,%d>\r\n",key_value,position,stime.hours,stime.minutes,stime.seconds);
	time_display();
 8004f1c:	f7ff fd10 	bl	8004940 <time_display>
}
 8004f20:	bf00      	nop
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	200000f0 	.word	0x200000f0
 8004f28:	200001e0 	.word	0x200001e0
 8004f2c:	20000344 	.word	0x20000344
 8004f30:	2000027c 	.word	0x2000027c
 8004f34:	20000060 	.word	0x20000060
 8004f38:	200001d8 	.word	0x200001d8

08004f3c <atime_setting>:

void atime_setting(void)
{
 8004f3c:	b590      	push	{r4, r7, lr}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af02      	add	r7, sp, #8
static	int position = 0;

	if(position==0)
 8004f42:	4b9b      	ldr	r3, [pc, #620]	; (80051b0 <atime_setting+0x274>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d126      	bne.n	8004f98 <atime_setting+0x5c>
	{
		switch(key_value)
 8004f4a:	4b9a      	ldr	r3, [pc, #616]	; (80051b4 <atime_setting+0x278>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b42      	cmp	r3, #66	; 0x42
 8004f50:	dc02      	bgt.n	8004f58 <atime_setting+0x1c>
 8004f52:	2b41      	cmp	r3, #65	; 0x41
 8004f54:	da07      	bge.n	8004f66 <atime_setting+0x2a>
				  atime.hours -=12;
			  else
				  atime.hours +=12;
			  break;
		  default:
			  break;
 8004f56:	e0f9      	b.n	800514c <atime_setting+0x210>
		switch(key_value)
 8004f58:	2b43      	cmp	r3, #67	; 0x43
 8004f5a:	f040 80f7 	bne.w	800514c <atime_setting+0x210>
			  position =1;
 8004f5e:	4b94      	ldr	r3, [pc, #592]	; (80051b0 <atime_setting+0x274>)
 8004f60:	2201      	movs	r2, #1
 8004f62:	601a      	str	r2, [r3, #0]
			  break;
 8004f64:	e107      	b.n	8005176 <atime_setting+0x23a>
			  if(atime.hours>=12)
 8004f66:	4b94      	ldr	r3, [pc, #592]	; (80051b8 <atime_setting+0x27c>)
 8004f68:	f993 3000 	ldrsb.w	r3, [r3]
 8004f6c:	2b0b      	cmp	r3, #11
 8004f6e:	dd09      	ble.n	8004f84 <atime_setting+0x48>
				  atime.hours -=12;
 8004f70:	4b91      	ldr	r3, [pc, #580]	; (80051b8 <atime_setting+0x27c>)
 8004f72:	f993 3000 	ldrsb.w	r3, [r3]
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	3b0c      	subs	r3, #12
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	b25a      	sxtb	r2, r3
 8004f7e:	4b8e      	ldr	r3, [pc, #568]	; (80051b8 <atime_setting+0x27c>)
 8004f80:	701a      	strb	r2, [r3, #0]
			  break;
 8004f82:	e0f8      	b.n	8005176 <atime_setting+0x23a>
				  atime.hours +=12;
 8004f84:	4b8c      	ldr	r3, [pc, #560]	; (80051b8 <atime_setting+0x27c>)
 8004f86:	f993 3000 	ldrsb.w	r3, [r3]
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	330c      	adds	r3, #12
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	b25a      	sxtb	r2, r3
 8004f92:	4b89      	ldr	r3, [pc, #548]	; (80051b8 <atime_setting+0x27c>)
 8004f94:	701a      	strb	r2, [r3, #0]
			  break;
 8004f96:	e0ee      	b.n	8005176 <atime_setting+0x23a>
		}
	}
	else if(position==1)
 8004f98:	4b85      	ldr	r3, [pc, #532]	; (80051b0 <atime_setting+0x274>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d13f      	bne.n	8005020 <atime_setting+0xe4>
	{
		switch(key_value)
 8004fa0:	4b84      	ldr	r3, [pc, #528]	; (80051b4 <atime_setting+0x278>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	3b41      	subs	r3, #65	; 0x41
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	f200 80d2 	bhi.w	8005150 <atime_setting+0x214>
 8004fac:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <atime_setting+0x78>)
 8004fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb2:	bf00      	nop
 8004fb4:	08004fd5 	.word	0x08004fd5
 8004fb8:	08004ffb 	.word	0x08004ffb
 8004fbc:	08004fc5 	.word	0x08004fc5
 8004fc0:	08004fcd 	.word	0x08004fcd
		{
//		  case SEL_KEY:
		  case RIGHT_KEY:
			  position =2;
 8004fc4:	4b7a      	ldr	r3, [pc, #488]	; (80051b0 <atime_setting+0x274>)
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	601a      	str	r2, [r3, #0]
			  break;
 8004fca:	e0d4      	b.n	8005176 <atime_setting+0x23a>
		  case LEFT_KEY:
			  position =0;
 8004fcc:	4b78      	ldr	r3, [pc, #480]	; (80051b0 <atime_setting+0x274>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]
			  break;
 8004fd2:	e0d0      	b.n	8005176 <atime_setting+0x23a>
		  case UP_KEY:
			  atime.hours++;
 8004fd4:	4b78      	ldr	r3, [pc, #480]	; (80051b8 <atime_setting+0x27c>)
 8004fd6:	f993 3000 	ldrsb.w	r3, [r3]
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	3301      	adds	r3, #1
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	b25a      	sxtb	r2, r3
 8004fe2:	4b75      	ldr	r3, [pc, #468]	; (80051b8 <atime_setting+0x27c>)
 8004fe4:	701a      	strb	r2, [r3, #0]
			  if(atime.hours>=12)
 8004fe6:	4b74      	ldr	r3, [pc, #464]	; (80051b8 <atime_setting+0x27c>)
 8004fe8:	f993 3000 	ldrsb.w	r3, [r3]
 8004fec:	2b0b      	cmp	r3, #11
 8004fee:	f340 80b1 	ble.w	8005154 <atime_setting+0x218>
				  atime.hours = 0;
 8004ff2:	4b71      	ldr	r3, [pc, #452]	; (80051b8 <atime_setting+0x27c>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	701a      	strb	r2, [r3, #0]
			  break;
 8004ff8:	e0ac      	b.n	8005154 <atime_setting+0x218>
		  case DOWN_KEY:
			  atime.hours--;
 8004ffa:	4b6f      	ldr	r3, [pc, #444]	; (80051b8 <atime_setting+0x27c>)
 8004ffc:	f993 3000 	ldrsb.w	r3, [r3]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	3b01      	subs	r3, #1
 8005004:	b2db      	uxtb	r3, r3
 8005006:	b25a      	sxtb	r2, r3
 8005008:	4b6b      	ldr	r3, [pc, #428]	; (80051b8 <atime_setting+0x27c>)
 800500a:	701a      	strb	r2, [r3, #0]
			  if(atime.hours<0)
 800500c:	4b6a      	ldr	r3, [pc, #424]	; (80051b8 <atime_setting+0x27c>)
 800500e:	f993 3000 	ldrsb.w	r3, [r3]
 8005012:	2b00      	cmp	r3, #0
 8005014:	f280 80a0 	bge.w	8005158 <atime_setting+0x21c>
				  atime.hours = 11;
 8005018:	4b67      	ldr	r3, [pc, #412]	; (80051b8 <atime_setting+0x27c>)
 800501a:	220b      	movs	r2, #11
 800501c:	701a      	strb	r2, [r3, #0]
			  break;
 800501e:	e09b      	b.n	8005158 <atime_setting+0x21c>
		  default:
			  break;
		}

	}
	else if(position==2)
 8005020:	4b63      	ldr	r3, [pc, #396]	; (80051b0 <atime_setting+0x274>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b02      	cmp	r3, #2
 8005026:	d13d      	bne.n	80050a4 <atime_setting+0x168>
	{
		switch(key_value)
 8005028:	4b62      	ldr	r3, [pc, #392]	; (80051b4 <atime_setting+0x278>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	3b41      	subs	r3, #65	; 0x41
 800502e:	2b03      	cmp	r3, #3
 8005030:	f200 8094 	bhi.w	800515c <atime_setting+0x220>
 8005034:	a201      	add	r2, pc, #4	; (adr r2, 800503c <atime_setting+0x100>)
 8005036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503a:	bf00      	nop
 800503c:	0800505d 	.word	0x0800505d
 8005040:	08005081 	.word	0x08005081
 8005044:	0800504d 	.word	0x0800504d
 8005048:	08005055 	.word	0x08005055
		{
//		  case SEL_KEY:
		  case RIGHT_KEY:
			  position =3;
 800504c:	4b58      	ldr	r3, [pc, #352]	; (80051b0 <atime_setting+0x274>)
 800504e:	2203      	movs	r2, #3
 8005050:	601a      	str	r2, [r3, #0]
			  break;
 8005052:	e090      	b.n	8005176 <atime_setting+0x23a>
		  case LEFT_KEY:
			  position =1;
 8005054:	4b56      	ldr	r3, [pc, #344]	; (80051b0 <atime_setting+0x274>)
 8005056:	2201      	movs	r2, #1
 8005058:	601a      	str	r2, [r3, #0]
			  break;
 800505a:	e08c      	b.n	8005176 <atime_setting+0x23a>
		  case UP_KEY:
			  atime.minutes++;
 800505c:	4b56      	ldr	r3, [pc, #344]	; (80051b8 <atime_setting+0x27c>)
 800505e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	3301      	adds	r3, #1
 8005066:	b2db      	uxtb	r3, r3
 8005068:	b25a      	sxtb	r2, r3
 800506a:	4b53      	ldr	r3, [pc, #332]	; (80051b8 <atime_setting+0x27c>)
 800506c:	705a      	strb	r2, [r3, #1]
			  if(atime.minutes>=60)
 800506e:	4b52      	ldr	r3, [pc, #328]	; (80051b8 <atime_setting+0x27c>)
 8005070:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005074:	2b3b      	cmp	r3, #59	; 0x3b
 8005076:	dd73      	ble.n	8005160 <atime_setting+0x224>
				  atime.minutes = 0;
 8005078:	4b4f      	ldr	r3, [pc, #316]	; (80051b8 <atime_setting+0x27c>)
 800507a:	2200      	movs	r2, #0
 800507c:	705a      	strb	r2, [r3, #1]
			  break;
 800507e:	e06f      	b.n	8005160 <atime_setting+0x224>
		  case DOWN_KEY:
			  atime.minutes--;
 8005080:	4b4d      	ldr	r3, [pc, #308]	; (80051b8 <atime_setting+0x27c>)
 8005082:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005086:	b2db      	uxtb	r3, r3
 8005088:	3b01      	subs	r3, #1
 800508a:	b2db      	uxtb	r3, r3
 800508c:	b25a      	sxtb	r2, r3
 800508e:	4b4a      	ldr	r3, [pc, #296]	; (80051b8 <atime_setting+0x27c>)
 8005090:	705a      	strb	r2, [r3, #1]
			  if(atime.minutes<0)
 8005092:	4b49      	ldr	r3, [pc, #292]	; (80051b8 <atime_setting+0x27c>)
 8005094:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005098:	2b00      	cmp	r3, #0
 800509a:	da63      	bge.n	8005164 <atime_setting+0x228>
				  atime.minutes = 59;
 800509c:	4b46      	ldr	r3, [pc, #280]	; (80051b8 <atime_setting+0x27c>)
 800509e:	223b      	movs	r2, #59	; 0x3b
 80050a0:	705a      	strb	r2, [r3, #1]
			  break;
 80050a2:	e05f      	b.n	8005164 <atime_setting+0x228>
		  default:
			  break;
		}
	}
	else if(position==3)
 80050a4:	4b42      	ldr	r3, [pc, #264]	; (80051b0 <atime_setting+0x274>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b03      	cmp	r3, #3
 80050aa:	d15d      	bne.n	8005168 <atime_setting+0x22c>
	{
		switch(key_value)
 80050ac:	4b41      	ldr	r3, [pc, #260]	; (80051b4 <atime_setting+0x278>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	3b41      	subs	r3, #65	; 0x41
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d85a      	bhi.n	800516c <atime_setting+0x230>
 80050b6:	a201      	add	r2, pc, #4	; (adr r2, 80050bc <atime_setting+0x180>)
 80050b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050bc:	08005105 	.word	0x08005105
 80050c0:	08005129 	.word	0x08005129
 80050c4:	080050cd 	.word	0x080050cd
 80050c8:	080050fd 	.word	0x080050fd
		{
//		  case SEL_KEY:
		  case RIGHT_KEY:
			  position = 0;
 80050cc:	4b38      	ldr	r3, [pc, #224]	; (80051b0 <atime_setting+0x274>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]

			  default_nvitem.alarm_time.hours = atime.hours;
 80050d2:	4b39      	ldr	r3, [pc, #228]	; (80051b8 <atime_setting+0x27c>)
 80050d4:	f993 2000 	ldrsb.w	r2, [r3]
 80050d8:	4b38      	ldr	r3, [pc, #224]	; (80051bc <atime_setting+0x280>)
 80050da:	71da      	strb	r2, [r3, #7]
	    	  default_nvitem.alarm_time.minutes = atime.minutes;
 80050dc:	4b36      	ldr	r3, [pc, #216]	; (80051b8 <atime_setting+0x27c>)
 80050de:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80050e2:	4b36      	ldr	r3, [pc, #216]	; (80051bc <atime_setting+0x280>)
 80050e4:	721a      	strb	r2, [r3, #8]
	    	  default_nvitem.alarm_time.seconds = atime.seconds;
 80050e6:	4b34      	ldr	r3, [pc, #208]	; (80051b8 <atime_setting+0x27c>)
 80050e8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80050ec:	4b33      	ldr	r3, [pc, #204]	; (80051bc <atime_setting+0x280>)
 80050ee:	725a      	strb	r2, [r3, #9]
	    	  update_nvitems();
 80050f0:	f7ff fb16 	bl	8004720 <update_nvitems>

			  current_state.mode = NORMAL_STATE;
 80050f4:	4b32      	ldr	r3, [pc, #200]	; (80051c0 <atime_setting+0x284>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	701a      	strb	r2, [r3, #0]
			  break;
 80050fa:	e03c      	b.n	8005176 <atime_setting+0x23a>
		  case LEFT_KEY:
			  position =2;
 80050fc:	4b2c      	ldr	r3, [pc, #176]	; (80051b0 <atime_setting+0x274>)
 80050fe:	2202      	movs	r2, #2
 8005100:	601a      	str	r2, [r3, #0]
			  break;
 8005102:	e038      	b.n	8005176 <atime_setting+0x23a>
		  case UP_KEY:
			  atime.seconds++;
 8005104:	4b2c      	ldr	r3, [pc, #176]	; (80051b8 <atime_setting+0x27c>)
 8005106:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	3301      	adds	r3, #1
 800510e:	b2db      	uxtb	r3, r3
 8005110:	b25a      	sxtb	r2, r3
 8005112:	4b29      	ldr	r3, [pc, #164]	; (80051b8 <atime_setting+0x27c>)
 8005114:	709a      	strb	r2, [r3, #2]
			  if(atime.seconds>=60)
 8005116:	4b28      	ldr	r3, [pc, #160]	; (80051b8 <atime_setting+0x27c>)
 8005118:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800511c:	2b3b      	cmp	r3, #59	; 0x3b
 800511e:	dd27      	ble.n	8005170 <atime_setting+0x234>
				  atime.seconds = 0;
 8005120:	4b25      	ldr	r3, [pc, #148]	; (80051b8 <atime_setting+0x27c>)
 8005122:	2200      	movs	r2, #0
 8005124:	709a      	strb	r2, [r3, #2]
			  break;
 8005126:	e023      	b.n	8005170 <atime_setting+0x234>
		  case DOWN_KEY:
			  atime.seconds--;
 8005128:	4b23      	ldr	r3, [pc, #140]	; (80051b8 <atime_setting+0x27c>)
 800512a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800512e:	b2db      	uxtb	r3, r3
 8005130:	3b01      	subs	r3, #1
 8005132:	b2db      	uxtb	r3, r3
 8005134:	b25a      	sxtb	r2, r3
 8005136:	4b20      	ldr	r3, [pc, #128]	; (80051b8 <atime_setting+0x27c>)
 8005138:	709a      	strb	r2, [r3, #2]
			  if(atime.seconds<0)
 800513a:	4b1f      	ldr	r3, [pc, #124]	; (80051b8 <atime_setting+0x27c>)
 800513c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005140:	2b00      	cmp	r3, #0
 8005142:	da17      	bge.n	8005174 <atime_setting+0x238>
				  atime.seconds = 59;
 8005144:	4b1c      	ldr	r3, [pc, #112]	; (80051b8 <atime_setting+0x27c>)
 8005146:	223b      	movs	r2, #59	; 0x3b
 8005148:	709a      	strb	r2, [r3, #2]
			  break;
 800514a:	e013      	b.n	8005174 <atime_setting+0x238>
			  break;
 800514c:	bf00      	nop
 800514e:	e012      	b.n	8005176 <atime_setting+0x23a>
			  break;
 8005150:	bf00      	nop
 8005152:	e010      	b.n	8005176 <atime_setting+0x23a>
			  break;
 8005154:	bf00      	nop
 8005156:	e00e      	b.n	8005176 <atime_setting+0x23a>
			  break;
 8005158:	bf00      	nop
 800515a:	e00c      	b.n	8005176 <atime_setting+0x23a>
			  break;
 800515c:	bf00      	nop
 800515e:	e00a      	b.n	8005176 <atime_setting+0x23a>
			  break;
 8005160:	bf00      	nop
 8005162:	e008      	b.n	8005176 <atime_setting+0x23a>
			  break;
 8005164:	bf00      	nop
 8005166:	e006      	b.n	8005176 <atime_setting+0x23a>
		  default:
			  break;
		}
	}
 8005168:	bf00      	nop
 800516a:	e004      	b.n	8005176 <atime_setting+0x23a>
			  break;
 800516c:	bf00      	nop
 800516e:	e002      	b.n	8005176 <atime_setting+0x23a>
			  break;
 8005170:	bf00      	nop
 8005172:	e000      	b.n	8005176 <atime_setting+0x23a>
			  break;
 8005174:	bf00      	nop
	printf("[%d,%d,%d,%d,%d]\r\n",key_value,position,atime.hours,atime.minutes,atime.seconds);
 8005176:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <atime_setting+0x278>)
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	4b0c      	ldr	r3, [pc, #48]	; (80051b0 <atime_setting+0x274>)
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	4b0d      	ldr	r3, [pc, #52]	; (80051b8 <atime_setting+0x27c>)
 8005182:	f993 3000 	ldrsb.w	r3, [r3]
 8005186:	461c      	mov	r4, r3
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <atime_setting+0x27c>)
 800518a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800518e:	4619      	mov	r1, r3
 8005190:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <atime_setting+0x27c>)
 8005192:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	9100      	str	r1, [sp, #0]
 800519a:	4623      	mov	r3, r4
 800519c:	4601      	mov	r1, r0
 800519e:	4809      	ldr	r0, [pc, #36]	; (80051c4 <atime_setting+0x288>)
 80051a0:	f001 f8fc 	bl	800639c <iprintf>
	time_display();
 80051a4:	f7ff fbcc 	bl	8004940 <time_display>
}
 80051a8:	bf00      	nop
 80051aa:	3704      	adds	r7, #4
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd90      	pop	{r4, r7, pc}
 80051b0:	200000f4 	.word	0x200000f4
 80051b4:	200001e0 	.word	0x200001e0
 80051b8:	20000348 	.word	0x20000348
 80051bc:	20000060 	.word	0x20000060
 80051c0:	200001d8 	.word	0x200001d8
 80051c4:	080077b8 	.word	0x080077b8

080051c8 <mode_analysis>:
void mode_analysis(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0

    if(time_interval>=LONG_CLICK_MIN && time_interval <=LONG_CLICK_MAX)
 80051cc:	4b31      	ldr	r3, [pc, #196]	; (8005294 <mode_analysis+0xcc>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b13      	cmp	r3, #19
 80051d2:	d909      	bls.n	80051e8 <mode_analysis+0x20>
 80051d4:	4b2f      	ldr	r3, [pc, #188]	; (8005294 <mode_analysis+0xcc>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b32      	cmp	r3, #50	; 0x32
 80051da:	d805      	bhi.n	80051e8 <mode_analysis+0x20>
    {
    	long_key_count++;
 80051dc:	4b2e      	ldr	r3, [pc, #184]	; (8005298 <mode_analysis+0xd0>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3301      	adds	r3, #1
 80051e2:	4a2d      	ldr	r2, [pc, #180]	; (8005298 <mode_analysis+0xd0>)
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	e03e      	b.n	8005266 <mode_analysis+0x9e>
    }
    else if(time_interval>=DOUBLE_CLICK_MIN && time_interval <=DOUBLE_CLICK_MAX)
 80051e8:	4b2a      	ldr	r3, [pc, #168]	; (8005294 <mode_analysis+0xcc>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b63      	cmp	r3, #99	; 0x63
 80051ee:	d914      	bls.n	800521a <mode_analysis+0x52>
 80051f0:	4b28      	ldr	r3, [pc, #160]	; (8005294 <mode_analysis+0xcc>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2bc8      	cmp	r3, #200	; 0xc8
 80051f6:	d810      	bhi.n	800521a <mode_analysis+0x52>
    {
      if(current_state.mode == NORMAL_STATE)
 80051f8:	4b28      	ldr	r3, [pc, #160]	; (800529c <mode_analysis+0xd4>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d108      	bne.n	8005212 <mode_analysis+0x4a>
      {
    	  current_state.mode = MUSIC_SELECT;
 8005200:	4b26      	ldr	r3, [pc, #152]	; (800529c <mode_analysis+0xd4>)
 8005202:	2203      	movs	r2, #3
 8005204:	701a      	strb	r2, [r3, #0]
          printf("MUSIC_SELECT %ld\r\n",time_interval);
 8005206:	4b23      	ldr	r3, [pc, #140]	; (8005294 <mode_analysis+0xcc>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4619      	mov	r1, r3
 800520c:	4824      	ldr	r0, [pc, #144]	; (80052a0 <mode_analysis+0xd8>)
 800520e:	f001 f8c5 	bl	800639c <iprintf>
      }
      long_key_count = 0;
 8005212:	4b21      	ldr	r3, [pc, #132]	; (8005298 <mode_analysis+0xd0>)
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	e025      	b.n	8005266 <mode_analysis+0x9e>
    }
    else if(time_interval>= NORMAL_CLICK_MIN)
 800521a:	4b1e      	ldr	r3, [pc, #120]	; (8005294 <mode_analysis+0xcc>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005222:	d320      	bcc.n	8005266 <mode_analysis+0x9e>
    {
    	if(current_state.mode == NORMAL_STATE)
 8005224:	4b1d      	ldr	r3, [pc, #116]	; (800529c <mode_analysis+0xd4>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d119      	bne.n	8005260 <mode_analysis+0x98>
    	{
    	  current_state.mode = TIME_SETTING;
 800522c:	4b1b      	ldr	r3, [pc, #108]	; (800529c <mode_analysis+0xd4>)
 800522e:	2201      	movs	r2, #1
 8005230:	701a      	strb	r2, [r3, #0]
    	  stime.hours = ctime.hours;
 8005232:	4b1c      	ldr	r3, [pc, #112]	; (80052a4 <mode_analysis+0xdc>)
 8005234:	f993 2000 	ldrsb.w	r2, [r3]
 8005238:	4b1b      	ldr	r3, [pc, #108]	; (80052a8 <mode_analysis+0xe0>)
 800523a:	701a      	strb	r2, [r3, #0]
    	  stime.minutes = ctime.minutes;
 800523c:	4b19      	ldr	r3, [pc, #100]	; (80052a4 <mode_analysis+0xdc>)
 800523e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8005242:	4b19      	ldr	r3, [pc, #100]	; (80052a8 <mode_analysis+0xe0>)
 8005244:	705a      	strb	r2, [r3, #1]
    	  stime.seconds = ctime.seconds;
 8005246:	4b17      	ldr	r3, [pc, #92]	; (80052a4 <mode_analysis+0xdc>)
 8005248:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800524c:	4b16      	ldr	r3, [pc, #88]	; (80052a8 <mode_analysis+0xe0>)
 800524e:	709a      	strb	r2, [r3, #2]
    	  printf("TIME_SETTING     %ld\r\n",time_interval);
 8005250:	4b10      	ldr	r3, [pc, #64]	; (8005294 <mode_analysis+0xcc>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4619      	mov	r1, r3
 8005256:	4815      	ldr	r0, [pc, #84]	; (80052ac <mode_analysis+0xe4>)
 8005258:	f001 f8a0 	bl	800639c <iprintf>
    	  time_display();
 800525c:	f7ff fb70 	bl	8004940 <time_display>
    	}
      long_key_count = 0;
 8005260:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <mode_analysis+0xd0>)
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
    }

    if(long_key_count>=LONG_CLICK_COUNT)
 8005266:	4b0c      	ldr	r3, [pc, #48]	; (8005298 <mode_analysis+0xd0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b1d      	cmp	r3, #29
 800526c:	d90f      	bls.n	800528e <mode_analysis+0xc6>
    {
      if(current_state.mode == NORMAL_STATE)
 800526e:	4b0b      	ldr	r3, [pc, #44]	; (800529c <mode_analysis+0xd4>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d108      	bne.n	8005288 <mode_analysis+0xc0>
      {
        current_state.mode  = ALARM_TIME_SETTING;
 8005276:	4b09      	ldr	r3, [pc, #36]	; (800529c <mode_analysis+0xd4>)
 8005278:	2202      	movs	r2, #2
 800527a:	701a      	strb	r2, [r3, #0]
        printf("ALARM_TIME_SETTING    %ld\r\n",time_interval);
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <mode_analysis+0xcc>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4619      	mov	r1, r3
 8005282:	480b      	ldr	r0, [pc, #44]	; (80052b0 <mode_analysis+0xe8>)
 8005284:	f001 f88a 	bl	800639c <iprintf>
      }
      long_key_count = 0;
 8005288:	4b03      	ldr	r3, [pc, #12]	; (8005298 <mode_analysis+0xd0>)
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]
    }
}
 800528e:	bf00      	nop
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20000210 	.word	0x20000210
 8005298:	200002f0 	.word	0x200002f0
 800529c:	200001d8 	.word	0x200001d8
 80052a0:	080077cc 	.word	0x080077cc
 80052a4:	2000027c 	.word	0x2000027c
 80052a8:	20000344 	.word	0x20000344
 80052ac:	080077e0 	.word	0x080077e0
 80052b0:	080077f8 	.word	0x080077f8

080052b4 <LCD_SendInternal>:




/////// i2c
HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	4603      	mov	r3, r0
 80052bc:	71fb      	strb	r3, [r7, #7]
 80052be:	460b      	mov	r3, r1
 80052c0:	71bb      	strb	r3, [r7, #6]
 80052c2:	4613      	mov	r3, r2
 80052c4:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80052c6:	79fb      	ldrb	r3, [r7, #7]
 80052c8:	b299      	uxth	r1, r3
 80052ca:	f04f 33ff 	mov.w	r3, #4294967295
 80052ce:	2201      	movs	r2, #1
 80052d0:	4822      	ldr	r0, [pc, #136]	; (800535c <LCD_SendInternal+0xa8>)
 80052d2:	f7fc fd9d 	bl	8001e10 <HAL_I2C_IsDeviceReady>
 80052d6:	4603      	mov	r3, r0
 80052d8:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d000      	beq.n	80052e2 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80052e0:	e7f1      	b.n	80052c6 <LCD_SendInternal+0x12>
            break;
 80052e2:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 80052e4:	79bb      	ldrb	r3, [r7, #6]
 80052e6:	f023 030f 	bic.w	r3, r3, #15
 80052ea:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 80052ec:	79bb      	ldrb	r3, [r7, #6]
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80052f2:	7bba      	ldrb	r2, [r7, #14]
 80052f4:	797b      	ldrb	r3, [r7, #5]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	f043 030c 	orr.w	r3, r3, #12
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 8005302:	7bba      	ldrb	r2, [r7, #14]
 8005304:	797b      	ldrb	r3, [r7, #5]
 8005306:	4313      	orrs	r3, r2
 8005308:	b2db      	uxtb	r3, r3
 800530a:	f043 0308 	orr.w	r3, r3, #8
 800530e:	b2db      	uxtb	r3, r3
 8005310:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8005312:	7b7a      	ldrb	r2, [r7, #13]
 8005314:	797b      	ldrb	r3, [r7, #5]
 8005316:	4313      	orrs	r3, r2
 8005318:	b2db      	uxtb	r3, r3
 800531a:	f043 030c 	orr.w	r3, r3, #12
 800531e:	b2db      	uxtb	r3, r3
 8005320:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 8005322:	7b7a      	ldrb	r2, [r7, #13]
 8005324:	797b      	ldrb	r3, [r7, #5]
 8005326:	4313      	orrs	r3, r2
 8005328:	b2db      	uxtb	r3, r3
 800532a:	f043 0308 	orr.w	r3, r3, #8
 800532e:	b2db      	uxtb	r3, r3
 8005330:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8005332:	79fb      	ldrb	r3, [r7, #7]
 8005334:	b299      	uxth	r1, r3
 8005336:	f107 0208 	add.w	r2, r7, #8
 800533a:	f04f 33ff 	mov.w	r3, #4294967295
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	2304      	movs	r3, #4
 8005342:	4806      	ldr	r0, [pc, #24]	; (800535c <LCD_SendInternal+0xa8>)
 8005344:	f7fc fc66 	bl	8001c14 <HAL_I2C_Master_Transmit>
 8005348:	4603      	mov	r3, r0
 800534a:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 800534c:	2005      	movs	r0, #5
 800534e:	f7fb f995 	bl	800067c <HAL_Delay>
    return res;
 8005352:	7bfb      	ldrb	r3, [r7, #15]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	20000180 	.word	0x20000180

08005360 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	4603      	mov	r3, r0
 8005368:	460a      	mov	r2, r1
 800536a:	71fb      	strb	r3, [r7, #7]
 800536c:	4613      	mov	r3, r2
 800536e:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8005370:	79b9      	ldrb	r1, [r7, #6]
 8005372:	79fb      	ldrb	r3, [r7, #7]
 8005374:	2200      	movs	r2, #0
 8005376:	4618      	mov	r0, r3
 8005378:	f7ff ff9c 	bl	80052b4 <LCD_SendInternal>
}
 800537c:	bf00      	nop
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	4603      	mov	r3, r0
 800538c:	460a      	mov	r2, r1
 800538e:	71fb      	strb	r3, [r7, #7]
 8005390:	4613      	mov	r3, r2
 8005392:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8005394:	79b9      	ldrb	r1, [r7, #6]
 8005396:	79fb      	ldrb	r3, [r7, #7]
 8005398:	2201      	movs	r2, #1
 800539a:	4618      	mov	r0, r3
 800539c:	f7ff ff8a 	bl	80052b4 <LCD_SendInternal>
}
 80053a0:	bf00      	nop
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4603      	mov	r3, r0
 80053b0:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 80053b2:	79fb      	ldrb	r3, [r7, #7]
 80053b4:	2130      	movs	r1, #48	; 0x30
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff ffd2 	bl	8005360 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	2102      	movs	r1, #2
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7ff ffcd 	bl	8005360 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	210c      	movs	r1, #12
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff ffc8 	bl	8005360 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 80053d0:	79fb      	ldrb	r3, [r7, #7]
 80053d2:	2101      	movs	r1, #1
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff ffc3 	bl	8005360 <LCD_SendCommand>
}
 80053da:	bf00      	nop
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b082      	sub	sp, #8
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	4603      	mov	r3, r0
 80053ea:	6039      	str	r1, [r7, #0]
 80053ec:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 80053ee:	e009      	b.n	8005404 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	781a      	ldrb	r2, [r3, #0]
 80053f4:	79fb      	ldrb	r3, [r7, #7]
 80053f6:	4611      	mov	r1, r2
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff ffc3 	bl	8005384 <LCD_SendData>
        str++;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	3301      	adds	r3, #1
 8005402:	603b      	str	r3, [r7, #0]
    while(*str) {
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1f1      	bne.n	80053f0 <LCD_SendString+0xe>
    }
}
 800540c:	bf00      	nop
 800540e:	bf00      	nop
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <init>:
	{
		LCD_SendCommand(LCD_ADDR, 0b11000000);
	    LCD_SendString(LCD_ADDR, str);
	}
}
void init() {
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
    //I2C_Scan();
    LCD_Init(LCD_ADDR);
 800541c:	204e      	movs	r0, #78	; 0x4e
 800541e:	f7ff ffc3 	bl	80053a8 <LCD_Init>

    // set address to 0x00
    LCD_SendCommand(LCD_ADDR, 0b10000000);
 8005422:	2180      	movs	r1, #128	; 0x80
 8005424:	204e      	movs	r0, #78	; 0x4e
 8005426:	f7ff ff9b 	bl	8005360 <LCD_SendCommand>
    LCD_SendString(LCD_ADDR, line[0]);
 800542a:	4907      	ldr	r1, [pc, #28]	; (8005448 <init+0x30>)
 800542c:	204e      	movs	r0, #78	; 0x4e
 800542e:	f7ff ffd8 	bl	80053e2 <LCD_SendString>

    // set address to 0x40
    LCD_SendCommand(LCD_ADDR, 0b11000000);
 8005432:	21c0      	movs	r1, #192	; 0xc0
 8005434:	204e      	movs	r0, #78	; 0x4e
 8005436:	f7ff ff93 	bl	8005360 <LCD_SendCommand>
    LCD_SendString(LCD_ADDR, line[1]);
 800543a:	4904      	ldr	r1, [pc, #16]	; (800544c <init+0x34>)
 800543c:	204e      	movs	r0, #78	; 0x4e
 800543e:	f7ff ffd0 	bl	80053e2 <LCD_SendString>
}
 8005442:	bf00      	nop
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	200001e8 	.word	0x200001e8
 800544c:	200001fa 	.word	0x200001fa

08005450 <HAL_GPIO_EXTI_Callback>:
#define DOUBLE_CLICK_MIN 40
#define DOUBLE_CLICK_MAX 120


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	80fb      	strh	r3, [r7, #6]
  GPIO_PinState pin;
  int i;

  if(GPIO_Pin == GPIO_PIN_13)
 800545a:	88fb      	ldrh	r3, [r7, #6]
 800545c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005460:	f040 80b4 	bne.w	80055cc <HAL_GPIO_EXTI_Callback+0x17c>
  {
	current_time = HAL_GetTick();
 8005464:	f7fb f8fe 	bl	8000664 <HAL_GetTick>
 8005468:	4603      	mov	r3, r0
 800546a:	4a5a      	ldr	r2, [pc, #360]	; (80055d4 <HAL_GPIO_EXTI_Callback+0x184>)
 800546c:	6013      	str	r3, [r2, #0]
    time_interval = current_time - last_time;
 800546e:	4b59      	ldr	r3, [pc, #356]	; (80055d4 <HAL_GPIO_EXTI_Callback+0x184>)
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	4b59      	ldr	r3, [pc, #356]	; (80055d8 <HAL_GPIO_EXTI_Callback+0x188>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	4a58      	ldr	r2, [pc, #352]	; (80055dc <HAL_GPIO_EXTI_Callback+0x18c>)
 800547a:	6013      	str	r3, [r2, #0]
    last_time = current_time;
 800547c:	4b55      	ldr	r3, [pc, #340]	; (80055d4 <HAL_GPIO_EXTI_Callback+0x184>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a55      	ldr	r2, [pc, #340]	; (80055d8 <HAL_GPIO_EXTI_Callback+0x188>)
 8005482:	6013      	str	r3, [r2, #0]

    pin = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13);
 8005484:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005488:	4855      	ldr	r0, [pc, #340]	; (80055e0 <HAL_GPIO_EXTI_Callback+0x190>)
 800548a:	f7fc fa45 	bl	8001918 <HAL_GPIO_ReadPin>
 800548e:	4603      	mov	r3, r0
 8005490:	72fb      	strb	r3, [r7, #11]

	printf("<%d,%d>\r\n",pin,time_interval);
 8005492:	7afb      	ldrb	r3, [r7, #11]
 8005494:	4a51      	ldr	r2, [pc, #324]	; (80055dc <HAL_GPIO_EXTI_Callback+0x18c>)
 8005496:	6812      	ldr	r2, [r2, #0]
 8005498:	4619      	mov	r1, r3
 800549a:	4852      	ldr	r0, [pc, #328]	; (80055e4 <HAL_GPIO_EXTI_Callback+0x194>)
 800549c:	f000 ff7e 	bl	800639c <iprintf>

    if(time_interval<=2) // noise
 80054a0:	4b4e      	ldr	r3, [pc, #312]	; (80055dc <HAL_GPIO_EXTI_Callback+0x18c>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d807      	bhi.n	80054b8 <HAL_GPIO_EXTI_Callback+0x68>
    {
    	printf("Noise %d,%d\r\n",pin,time_interval);
 80054a8:	7afb      	ldrb	r3, [r7, #11]
 80054aa:	4a4c      	ldr	r2, [pc, #304]	; (80055dc <HAL_GPIO_EXTI_Callback+0x18c>)
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	4619      	mov	r1, r3
 80054b0:	484d      	ldr	r0, [pc, #308]	; (80055e8 <HAL_GPIO_EXTI_Callback+0x198>)
 80054b2:	f000 ff73 	bl	800639c <iprintf>
           }


    }
  }
}
 80054b6:	e089      	b.n	80055cc <HAL_GPIO_EXTI_Callback+0x17c>
      click[2].time = click[1].time;
 80054b8:	4b4c      	ldr	r3, [pc, #304]	; (80055ec <HAL_GPIO_EXTI_Callback+0x19c>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	4a4b      	ldr	r2, [pc, #300]	; (80055ec <HAL_GPIO_EXTI_Callback+0x19c>)
 80054be:	6113      	str	r3, [r2, #16]
      click[2].level = click[1].level;
 80054c0:	4b4a      	ldr	r3, [pc, #296]	; (80055ec <HAL_GPIO_EXTI_Callback+0x19c>)
 80054c2:	7b1a      	ldrb	r2, [r3, #12]
 80054c4:	4b49      	ldr	r3, [pc, #292]	; (80055ec <HAL_GPIO_EXTI_Callback+0x19c>)
 80054c6:	751a      	strb	r2, [r3, #20]
      click[1].time = click[0].time;
 80054c8:	4b48      	ldr	r3, [pc, #288]	; (80055ec <HAL_GPIO_EXTI_Callback+0x19c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a47      	ldr	r2, [pc, #284]	; (80055ec <HAL_GPIO_EXTI_Callback+0x19c>)
 80054ce:	6093      	str	r3, [r2, #8]
      click[1].level = click[0].level;
 80054d0:	4b46      	ldr	r3, [pc, #280]	; (80055ec <HAL_GPIO_EXTI_Callback+0x19c>)
 80054d2:	791a      	ldrb	r2, [r3, #4]
 80054d4:	4b45      	ldr	r3, [pc, #276]	; (80055ec <HAL_GPIO_EXTI_Callback+0x19c>)
 80054d6:	731a      	strb	r2, [r3, #12]
      click[0].time = time_interval;
 80054d8:	4b40      	ldr	r3, [pc, #256]	; (80055dc <HAL_GPIO_EXTI_Callback+0x18c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	461a      	mov	r2, r3
 80054de:	4b43      	ldr	r3, [pc, #268]	; (80055ec <HAL_GPIO_EXTI_Callback+0x19c>)
 80054e0:	601a      	str	r2, [r3, #0]
      click[0].level = pin;
 80054e2:	4a42      	ldr	r2, [pc, #264]	; (80055ec <HAL_GPIO_EXTI_Callback+0x19c>)
 80054e4:	7afb      	ldrb	r3, [r7, #11]
 80054e6:	7113      	strb	r3, [r2, #4]
      if( click[2].level ==GPIO_PIN_RESET && click[1].level == GPIO_PIN_SET &&  click[0].level ==GPIO_PIN_RESET)
 80054e8:	4b40      	ldr	r3, [pc, #256]	; (80055ec <HAL_GPIO_EXTI_Callback+0x19c>)
 80054ea:	7d1b      	ldrb	r3, [r3, #20]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d122      	bne.n	8005536 <HAL_GPIO_EXTI_Callback+0xe6>
 80054f0:	4b3e      	ldr	r3, [pc, #248]	; (80055ec <HAL_GPIO_EXTI_Callback+0x19c>)
 80054f2:	7b1b      	ldrb	r3, [r3, #12]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d11e      	bne.n	8005536 <HAL_GPIO_EXTI_Callback+0xe6>
 80054f8:	4b3c      	ldr	r3, [pc, #240]	; (80055ec <HAL_GPIO_EXTI_Callback+0x19c>)
 80054fa:	791b      	ldrb	r3, [r3, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d11a      	bne.n	8005536 <HAL_GPIO_EXTI_Callback+0xe6>
               for(i=0;i<3;i++)
 8005500:	2300      	movs	r3, #0
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	e00e      	b.n	8005524 <HAL_GPIO_EXTI_Callback+0xd4>
                  if(click[i].time>= DOUBLE_CLICK_MIN && click[i].time <= DOUBLE_CLICK_MAX)
 8005506:	4a39      	ldr	r2, [pc, #228]	; (80055ec <HAL_GPIO_EXTI_Callback+0x19c>)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800550e:	2b27      	cmp	r3, #39	; 0x27
 8005510:	dd0b      	ble.n	800552a <HAL_GPIO_EXTI_Callback+0xda>
 8005512:	4a36      	ldr	r2, [pc, #216]	; (80055ec <HAL_GPIO_EXTI_Callback+0x19c>)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800551a:	2b78      	cmp	r3, #120	; 0x78
 800551c:	dc05      	bgt.n	800552a <HAL_GPIO_EXTI_Callback+0xda>
               for(i=0;i<3;i++)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3301      	adds	r3, #1
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b02      	cmp	r3, #2
 8005528:	dded      	ble.n	8005506 <HAL_GPIO_EXTI_Callback+0xb6>
               if(i==3)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b03      	cmp	r3, #3
 800552e:	d102      	bne.n	8005536 <HAL_GPIO_EXTI_Callback+0xe6>
                  printf("Double Click\r\n");
 8005530:	482f      	ldr	r0, [pc, #188]	; (80055f0 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8005532:	f000 ffb9 	bl	80064a8 <puts>
           if(click[0].level == GPIO_PIN_RESET && click[0].time >=LONG_CLICK_MIN) // long click
 8005536:	4b2d      	ldr	r3, [pc, #180]	; (80055ec <HAL_GPIO_EXTI_Callback+0x19c>)
 8005538:	791b      	ldrb	r3, [r3, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d130      	bne.n	80055a0 <HAL_GPIO_EXTI_Callback+0x150>
 800553e:	4b2b      	ldr	r3, [pc, #172]	; (80055ec <HAL_GPIO_EXTI_Callback+0x19c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f240 52db 	movw	r2, #1499	; 0x5db
 8005546:	4293      	cmp	r3, r2
 8005548:	dd2a      	ble.n	80055a0 <HAL_GPIO_EXTI_Callback+0x150>
            printf("Long Key\r\n");
 800554a:	482a      	ldr	r0, [pc, #168]	; (80055f4 <HAL_GPIO_EXTI_Callback+0x1a4>)
 800554c:	f000 ffac 	bl	80064a8 <puts>
              ++flag;
 8005550:	4b29      	ldr	r3, [pc, #164]	; (80055f8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3301      	adds	r3, #1
 8005556:	4a28      	ldr	r2, [pc, #160]	; (80055f8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8005558:	6013      	str	r3, [r2, #0]
              if(flag==0)
 800555a:	4b27      	ldr	r3, [pc, #156]	; (80055f8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d103      	bne.n	800556a <HAL_GPIO_EXTI_Callback+0x11a>
                  current_state.mode=NORMAL_STATE;
 8005562:	4b26      	ldr	r3, [pc, #152]	; (80055fc <HAL_GPIO_EXTI_Callback+0x1ac>)
 8005564:	2200      	movs	r2, #0
 8005566:	701a      	strb	r2, [r3, #0]
              if(flag==0)
 8005568:	e02f      	b.n	80055ca <HAL_GPIO_EXTI_Callback+0x17a>
              else if(flag==1)
 800556a:	4b23      	ldr	r3, [pc, #140]	; (80055f8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d103      	bne.n	800557a <HAL_GPIO_EXTI_Callback+0x12a>
                  current_state.mode = TIME_SETTING;
 8005572:	4b22      	ldr	r3, [pc, #136]	; (80055fc <HAL_GPIO_EXTI_Callback+0x1ac>)
 8005574:	2201      	movs	r2, #1
 8005576:	701a      	strb	r2, [r3, #0]
              if(flag==0)
 8005578:	e027      	b.n	80055ca <HAL_GPIO_EXTI_Callback+0x17a>
              else if(flag==2)
 800557a:	4b1f      	ldr	r3, [pc, #124]	; (80055f8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b02      	cmp	r3, #2
 8005580:	d103      	bne.n	800558a <HAL_GPIO_EXTI_Callback+0x13a>
                  current_state.mode = ALARM_TIME_SETTING;
 8005582:	4b1e      	ldr	r3, [pc, #120]	; (80055fc <HAL_GPIO_EXTI_Callback+0x1ac>)
 8005584:	2202      	movs	r2, #2
 8005586:	701a      	strb	r2, [r3, #0]
              if(flag==0)
 8005588:	e01f      	b.n	80055ca <HAL_GPIO_EXTI_Callback+0x17a>
              else if(flag==3)
 800558a:	4b1b      	ldr	r3, [pc, #108]	; (80055f8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b03      	cmp	r3, #3
 8005590:	d11b      	bne.n	80055ca <HAL_GPIO_EXTI_Callback+0x17a>
                 current_state.mode=NORMAL_STATE;
 8005592:	4b1a      	ldr	r3, [pc, #104]	; (80055fc <HAL_GPIO_EXTI_Callback+0x1ac>)
 8005594:	2200      	movs	r2, #0
 8005596:	701a      	strb	r2, [r3, #0]
                 flag=0;
 8005598:	4b17      	ldr	r3, [pc, #92]	; (80055f8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]
              if(flag==0)
 800559e:	e014      	b.n	80055ca <HAL_GPIO_EXTI_Callback+0x17a>
           else if(click[0].level == GPIO_PIN_RESET && click[0].time < LONG_CLICK_MIN && click[0].time > DOUBLE_CLICK_MAX)
 80055a0:	4b12      	ldr	r3, [pc, #72]	; (80055ec <HAL_GPIO_EXTI_Callback+0x19c>)
 80055a2:	791b      	ldrb	r3, [r3, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d111      	bne.n	80055cc <HAL_GPIO_EXTI_Callback+0x17c>
 80055a8:	4b10      	ldr	r3, [pc, #64]	; (80055ec <HAL_GPIO_EXTI_Callback+0x19c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f240 52db 	movw	r2, #1499	; 0x5db
 80055b0:	4293      	cmp	r3, r2
 80055b2:	dc0b      	bgt.n	80055cc <HAL_GPIO_EXTI_Callback+0x17c>
 80055b4:	4b0d      	ldr	r3, [pc, #52]	; (80055ec <HAL_GPIO_EXTI_Callback+0x19c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b78      	cmp	r3, #120	; 0x78
 80055ba:	dd07      	ble.n	80055cc <HAL_GPIO_EXTI_Callback+0x17c>
             printf("Select Key, %d\r\n",click[0].time);
 80055bc:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <HAL_GPIO_EXTI_Callback+0x19c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4619      	mov	r1, r3
 80055c2:	480f      	ldr	r0, [pc, #60]	; (8005600 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80055c4:	f000 feea 	bl	800639c <iprintf>
}
 80055c8:	e000      	b.n	80055cc <HAL_GPIO_EXTI_Callback+0x17c>
              if(flag==0)
 80055ca:	bf00      	nop
}
 80055cc:	bf00      	nop
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	200001d4 	.word	0x200001d4
 80055d8:	200002ec 	.word	0x200002ec
 80055dc:	20000210 	.word	0x20000210
 80055e0:	40020800 	.word	0x40020800
 80055e4:	08007814 	.word	0x08007814
 80055e8:	08007820 	.word	0x08007820
 80055ec:	20000128 	.word	0x20000128
 80055f0:	08007830 	.word	0x08007830
 80055f4:	08007840 	.word	0x08007840
 80055f8:	200001e4 	.word	0x200001e4
 80055fc:	200001d8 	.word	0x200001d8
 8005600:	0800784c 	.word	0x0800784c

08005604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005608:	f7fa ffc6 	bl	8000598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800560c:	f000 f896 	bl	800573c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005610:	f000 faa6 	bl	8005b60 <MX_GPIO_Init>
  MX_RTC_Init();
 8005614:	f000 f9b8 	bl	8005988 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8005618:	f000 fa78 	bl	8005b0c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800561c:	f000 f9da 	bl	80059d4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8005620:	f000 f972 	bl	8005908 <MX_I2C1_Init>
  MX_TIM3_Init();
 8005624:	f000 fa24 	bl	8005a70 <MX_TIM3_Init>
  MX_ADC1_Init();
 8005628:	f000 f91c 	bl	8005864 <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800562c:	f000 f90e 	bl	800584c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8005630:	4836      	ldr	r0, [pc, #216]	; (800570c <main+0x108>)
 8005632:	f7fb f88b 	bl	800074c <HAL_ADC_Start>

   HAL_TIM_Base_Start_IT(&htim3);
 8005636:	4836      	ldr	r0, [pc, #216]	; (8005710 <main+0x10c>)
 8005638:	f7fd fec2 	bl	80033c0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Init(&htim2);
 800563c:	4835      	ldr	r0, [pc, #212]	; (8005714 <main+0x110>)
 800563e:	f7fd fe94 	bl	800336a <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8005642:	4834      	ldr	r0, [pc, #208]	; (8005714 <main+0x110>)
 8005644:	f7fd febc 	bl	80033c0 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart3,&key_value,1);
 8005648:	2201      	movs	r2, #1
 800564a:	4933      	ldr	r1, [pc, #204]	; (8005718 <main+0x114>)
 800564c:	4833      	ldr	r0, [pc, #204]	; (800571c <main+0x118>)
 800564e:	f7fe fb8d 	bl	8003d6c <HAL_UART_Receive_IT>

  init();
 8005652:	f7ff fee1 	bl	8005418 <init>

  current_state.mode = NORMAL_STATE;
 8005656:	4b32      	ldr	r3, [pc, #200]	; (8005720 <main+0x11c>)
 8005658:	2200      	movs	r2, #0
 800565a:	701a      	strb	r2, [r3, #0]
  current_state.button = NO_KEY;
 800565c:	4b30      	ldr	r3, [pc, #192]	; (8005720 <main+0x11c>)
 800565e:	2200      	movs	r2, #0
 8005660:	705a      	strb	r2, [r3, #1]
  current_state.music_num = 0;
 8005662:	4b2f      	ldr	r3, [pc, #188]	; (8005720 <main+0x11c>)
 8005664:	2200      	movs	r2, #0
 8005666:	605a      	str	r2, [r3, #4]

  if(nv_items->magic_num == MAGIC_NUM) //
 8005668:	4b2e      	ldr	r3, [pc, #184]	; (8005724 <main+0x120>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a2e      	ldr	r2, [pc, #184]	; (8005728 <main+0x124>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d114      	bne.n	800569c <main+0x98>
  {
    memcpy(&default_nvitem,nv_items,sizeof(NVitemTypeDef));
 8005672:	4b2e      	ldr	r3, [pc, #184]	; (800572c <main+0x128>)
 8005674:	4a2b      	ldr	r2, [pc, #172]	; (8005724 <main+0x120>)
 8005676:	ca07      	ldmia	r2, {r0, r1, r2}
 8005678:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    ctime.hours = default_nvitem.setting_time.hours;
 800567c:	4b2b      	ldr	r3, [pc, #172]	; (800572c <main+0x128>)
 800567e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8005682:	4b2b      	ldr	r3, [pc, #172]	; (8005730 <main+0x12c>)
 8005684:	701a      	strb	r2, [r3, #0]
	ctime.minutes = default_nvitem.setting_time.minutes;
 8005686:	4b29      	ldr	r3, [pc, #164]	; (800572c <main+0x128>)
 8005688:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800568c:	4b28      	ldr	r3, [pc, #160]	; (8005730 <main+0x12c>)
 800568e:	705a      	strb	r2, [r3, #1]
	ctime.seconds = default_nvitem.setting_time.seconds;
 8005690:	4b26      	ldr	r3, [pc, #152]	; (800572c <main+0x128>)
 8005692:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8005696:	4b26      	ldr	r3, [pc, #152]	; (8005730 <main+0x12c>)
 8005698:	709a      	strb	r2, [r3, #2]
 800569a:	e001      	b.n	80056a0 <main+0x9c>
  }
  else
  {
	update_nvitems();
 800569c:	f7ff f840 	bl	8004720 <update_nvitems>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  switch(current_state.mode)
 80056a0:	4b1f      	ldr	r3, [pc, #124]	; (8005720 <main+0x11c>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d02c      	beq.n	8005702 <main+0xfe>
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	dc2d      	bgt.n	8005708 <main+0x104>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <main+0xb2>
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d013      	beq.n	80056dc <main+0xd8>

	  case ALARM_TIME_SETTING:
	  	 	  stime_setting();
	  	  	  break;
	  default:
	   		 break;
 80056b4:	e028      	b.n	8005708 <main+0x104>
	      time_display();
 80056b6:	f7ff f943 	bl	8004940 <time_display>
	      LCD_SendCommand(LCD_ADDR, 0b10000000);
 80056ba:	2180      	movs	r1, #128	; 0x80
 80056bc:	204e      	movs	r0, #78	; 0x4e
 80056be:	f7ff fe4f 	bl	8005360 <LCD_SendCommand>
	      LCD_SendString(LCD_ADDR, line[0]);
 80056c2:	491c      	ldr	r1, [pc, #112]	; (8005734 <main+0x130>)
 80056c4:	204e      	movs	r0, #78	; 0x4e
 80056c6:	f7ff fe8c 	bl	80053e2 <LCD_SendString>
	      LCD_SendCommand(LCD_ADDR, 0b11000000);
 80056ca:	21c0      	movs	r1, #192	; 0xc0
 80056cc:	204e      	movs	r0, #78	; 0x4e
 80056ce:	f7ff fe47 	bl	8005360 <LCD_SendCommand>
	      LCD_SendString(LCD_ADDR, line[1]);
 80056d2:	4919      	ldr	r1, [pc, #100]	; (8005738 <main+0x134>)
 80056d4:	204e      	movs	r0, #78	; 0x4e
 80056d6:	f7ff fe84 	bl	80053e2 <LCD_SendString>
	   break;
 80056da:	e016      	b.n	800570a <main+0x106>
		   time_display();
 80056dc:	f7ff f930 	bl	8004940 <time_display>
		   LCD_SendCommand(LCD_ADDR, 0b10000000);
 80056e0:	2180      	movs	r1, #128	; 0x80
 80056e2:	204e      	movs	r0, #78	; 0x4e
 80056e4:	f7ff fe3c 	bl	8005360 <LCD_SendCommand>
		   LCD_SendString(LCD_ADDR, line[0]);
 80056e8:	4912      	ldr	r1, [pc, #72]	; (8005734 <main+0x130>)
 80056ea:	204e      	movs	r0, #78	; 0x4e
 80056ec:	f7ff fe79 	bl	80053e2 <LCD_SendString>
		   LCD_SendCommand(LCD_ADDR, 0b11000000);
 80056f0:	21c0      	movs	r1, #192	; 0xc0
 80056f2:	204e      	movs	r0, #78	; 0x4e
 80056f4:	f7ff fe34 	bl	8005360 <LCD_SendCommand>
		   LCD_SendString(LCD_ADDR, line[1]);
 80056f8:	490f      	ldr	r1, [pc, #60]	; (8005738 <main+0x134>)
 80056fa:	204e      	movs	r0, #78	; 0x4e
 80056fc:	f7ff fe71 	bl	80053e2 <LCD_SendString>
	  break;
 8005700:	e003      	b.n	800570a <main+0x106>
	  	 	  stime_setting();
 8005702:	f7ff fabb 	bl	8004c7c <stime_setting>
	  	  	  break;
 8005706:	e000      	b.n	800570a <main+0x106>
	   		 break;
 8005708:	bf00      	nop
	  switch(current_state.mode)
 800570a:	e7c9      	b.n	80056a0 <main+0x9c>
 800570c:	20000280 	.word	0x20000280
 8005710:	20000214 	.word	0x20000214
 8005714:	200002f4 	.word	0x200002f4
 8005718:	200001e0 	.word	0x200001e0
 800571c:	20000140 	.word	0x20000140
 8005720:	200001d8 	.word	0x200001d8
 8005724:	081e0000 	.word	0x081e0000
 8005728:	deadbeef 	.word	0xdeadbeef
 800572c:	20000060 	.word	0x20000060
 8005730:	2000027c 	.word	0x2000027c
 8005734:	200001e8 	.word	0x200001e8
 8005738:	200001fa 	.word	0x200001fa

0800573c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b0a0      	sub	sp, #128	; 0x80
 8005740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005742:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005746:	2230      	movs	r2, #48	; 0x30
 8005748:	2100      	movs	r1, #0
 800574a:	4618      	mov	r0, r3
 800574c:	f000 fe1e 	bl	800638c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005750:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	605a      	str	r2, [r3, #4]
 800575a:	609a      	str	r2, [r3, #8]
 800575c:	60da      	str	r2, [r3, #12]
 800575e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005760:	f107 030c 	add.w	r3, r7, #12
 8005764:	2230      	movs	r2, #48	; 0x30
 8005766:	2100      	movs	r1, #0
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fe0f 	bl	800638c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800576e:	2300      	movs	r3, #0
 8005770:	60bb      	str	r3, [r7, #8]
 8005772:	4b34      	ldr	r3, [pc, #208]	; (8005844 <SystemClock_Config+0x108>)
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	4a33      	ldr	r2, [pc, #204]	; (8005844 <SystemClock_Config+0x108>)
 8005778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800577c:	6413      	str	r3, [r2, #64]	; 0x40
 800577e:	4b31      	ldr	r3, [pc, #196]	; (8005844 <SystemClock_Config+0x108>)
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005786:	60bb      	str	r3, [r7, #8]
 8005788:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800578a:	2300      	movs	r3, #0
 800578c:	607b      	str	r3, [r7, #4]
 800578e:	4b2e      	ldr	r3, [pc, #184]	; (8005848 <SystemClock_Config+0x10c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a2d      	ldr	r2, [pc, #180]	; (8005848 <SystemClock_Config+0x10c>)
 8005794:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	4b2b      	ldr	r3, [pc, #172]	; (8005848 <SystemClock_Config+0x10c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80057a2:	607b      	str	r3, [r7, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80057a6:	2306      	movs	r3, #6
 80057a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80057aa:	2301      	movs	r3, #1
 80057ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80057ae:	2301      	movs	r3, #1
 80057b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80057b2:	2310      	movs	r3, #16
 80057b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80057b6:	2302      	movs	r3, #2
 80057b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80057ba:	2300      	movs	r3, #0
 80057bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80057be:	2308      	movs	r3, #8
 80057c0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 80057c2:	23b4      	movs	r3, #180	; 0xb4
 80057c4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80057c6:	2302      	movs	r3, #2
 80057c8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80057ca:	2307      	movs	r3, #7
 80057cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fc ff06 	bl	80025e4 <HAL_RCC_OscConfig>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80057de:	f000 faf7 	bl	8005dd0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80057e2:	f7fc feaf 	bl	8002544 <HAL_PWREx_EnableOverDrive>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80057ec:	f000 faf0 	bl	8005dd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80057f0:	230f      	movs	r3, #15
 80057f2:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80057f4:	2302      	movs	r3, #2
 80057f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80057f8:	2300      	movs	r3, #0
 80057fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80057fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005800:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8005802:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005806:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005808:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800580c:	2105      	movs	r1, #5
 800580e:	4618      	mov	r0, r3
 8005810:	f7fd f92a 	bl	8002a68 <HAL_RCC_ClockConfig>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800581a:	f000 fad9 	bl	8005dd0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800581e:	2320      	movs	r3, #32
 8005820:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005822:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005826:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005828:	f107 030c 	add.w	r3, r7, #12
 800582c:	4618      	mov	r0, r3
 800582e:	f7fd fb13 	bl	8002e58 <HAL_RCCEx_PeriphCLKConfig>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <SystemClock_Config+0x100>
  {
    Error_Handler();
 8005838:	f000 faca 	bl	8005dd0 <Error_Handler>
  }
}
 800583c:	bf00      	nop
 800583e:	3780      	adds	r7, #128	; 0x80
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40023800 	.word	0x40023800
 8005848:	40007000 	.word	0x40007000

0800584c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005850:	2200      	movs	r2, #0
 8005852:	2100      	movs	r1, #0
 8005854:	2028      	movs	r0, #40	; 0x28
 8005856:	f7fb fb56 	bl	8000f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800585a:	2028      	movs	r0, #40	; 0x28
 800585c:	f7fb fb6f 	bl	8000f3e <HAL_NVIC_EnableIRQ>
}
 8005860:	bf00      	nop
 8005862:	bd80      	pop	{r7, pc}

08005864 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800586a:	463b      	mov	r3, r7
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	605a      	str	r2, [r3, #4]
 8005872:	609a      	str	r2, [r3, #8]
 8005874:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005876:	4b22      	ldr	r3, [pc, #136]	; (8005900 <MX_ADC1_Init+0x9c>)
 8005878:	4a22      	ldr	r2, [pc, #136]	; (8005904 <MX_ADC1_Init+0xa0>)
 800587a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800587c:	4b20      	ldr	r3, [pc, #128]	; (8005900 <MX_ADC1_Init+0x9c>)
 800587e:	2200      	movs	r2, #0
 8005880:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005882:	4b1f      	ldr	r3, [pc, #124]	; (8005900 <MX_ADC1_Init+0x9c>)
 8005884:	2200      	movs	r2, #0
 8005886:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8005888:	4b1d      	ldr	r3, [pc, #116]	; (8005900 <MX_ADC1_Init+0x9c>)
 800588a:	2200      	movs	r2, #0
 800588c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800588e:	4b1c      	ldr	r3, [pc, #112]	; (8005900 <MX_ADC1_Init+0x9c>)
 8005890:	2200      	movs	r2, #0
 8005892:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005894:	4b1a      	ldr	r3, [pc, #104]	; (8005900 <MX_ADC1_Init+0x9c>)
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800589c:	4b18      	ldr	r3, [pc, #96]	; (8005900 <MX_ADC1_Init+0x9c>)
 800589e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80058a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80058a4:	4b16      	ldr	r3, [pc, #88]	; (8005900 <MX_ADC1_Init+0x9c>)
 80058a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80058aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80058ac:	4b14      	ldr	r3, [pc, #80]	; (8005900 <MX_ADC1_Init+0x9c>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80058b2:	4b13      	ldr	r3, [pc, #76]	; (8005900 <MX_ADC1_Init+0x9c>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80058b8:	4b11      	ldr	r3, [pc, #68]	; (8005900 <MX_ADC1_Init+0x9c>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80058c0:	4b0f      	ldr	r3, [pc, #60]	; (8005900 <MX_ADC1_Init+0x9c>)
 80058c2:	2201      	movs	r2, #1
 80058c4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80058c6:	480e      	ldr	r0, [pc, #56]	; (8005900 <MX_ADC1_Init+0x9c>)
 80058c8:	f7fa fefc 	bl	80006c4 <HAL_ADC_Init>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80058d2:	f000 fa7d 	bl	8005dd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80058d6:	2303      	movs	r3, #3
 80058d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80058da:	2301      	movs	r3, #1
 80058dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80058de:	2300      	movs	r3, #0
 80058e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80058e2:	463b      	mov	r3, r7
 80058e4:	4619      	mov	r1, r3
 80058e6:	4806      	ldr	r0, [pc, #24]	; (8005900 <MX_ADC1_Init+0x9c>)
 80058e8:	f7fb f804 	bl	80008f4 <HAL_ADC_ConfigChannel>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80058f2:	f000 fa6d 	bl	8005dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80058f6:	bf00      	nop
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20000280 	.word	0x20000280
 8005904:	40012000 	.word	0x40012000

08005908 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800590c:	4b1b      	ldr	r3, [pc, #108]	; (800597c <MX_I2C1_Init+0x74>)
 800590e:	4a1c      	ldr	r2, [pc, #112]	; (8005980 <MX_I2C1_Init+0x78>)
 8005910:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005912:	4b1a      	ldr	r3, [pc, #104]	; (800597c <MX_I2C1_Init+0x74>)
 8005914:	4a1b      	ldr	r2, [pc, #108]	; (8005984 <MX_I2C1_Init+0x7c>)
 8005916:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005918:	4b18      	ldr	r3, [pc, #96]	; (800597c <MX_I2C1_Init+0x74>)
 800591a:	2200      	movs	r2, #0
 800591c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800591e:	4b17      	ldr	r3, [pc, #92]	; (800597c <MX_I2C1_Init+0x74>)
 8005920:	2200      	movs	r2, #0
 8005922:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005924:	4b15      	ldr	r3, [pc, #84]	; (800597c <MX_I2C1_Init+0x74>)
 8005926:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800592a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800592c:	4b13      	ldr	r3, [pc, #76]	; (800597c <MX_I2C1_Init+0x74>)
 800592e:	2200      	movs	r2, #0
 8005930:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005932:	4b12      	ldr	r3, [pc, #72]	; (800597c <MX_I2C1_Init+0x74>)
 8005934:	2200      	movs	r2, #0
 8005936:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005938:	4b10      	ldr	r3, [pc, #64]	; (800597c <MX_I2C1_Init+0x74>)
 800593a:	2200      	movs	r2, #0
 800593c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800593e:	4b0f      	ldr	r3, [pc, #60]	; (800597c <MX_I2C1_Init+0x74>)
 8005940:	2200      	movs	r2, #0
 8005942:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005944:	480d      	ldr	r0, [pc, #52]	; (800597c <MX_I2C1_Init+0x74>)
 8005946:	f7fc f831 	bl	80019ac <HAL_I2C_Init>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005950:	f000 fa3e 	bl	8005dd0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005954:	2100      	movs	r1, #0
 8005956:	4809      	ldr	r0, [pc, #36]	; (800597c <MX_I2C1_Init+0x74>)
 8005958:	f7fc fd79 	bl	800244e <HAL_I2CEx_ConfigAnalogFilter>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8005962:	f000 fa35 	bl	8005dd0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005966:	2100      	movs	r1, #0
 8005968:	4804      	ldr	r0, [pc, #16]	; (800597c <MX_I2C1_Init+0x74>)
 800596a:	f7fc fdac 	bl	80024c6 <HAL_I2CEx_ConfigDigitalFilter>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8005974:	f000 fa2c 	bl	8005dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005978:	bf00      	nop
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20000180 	.word	0x20000180
 8005980:	40005400 	.word	0x40005400
 8005984:	000186a0 	.word	0x000186a0

08005988 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800598c:	4b0f      	ldr	r3, [pc, #60]	; (80059cc <MX_RTC_Init+0x44>)
 800598e:	4a10      	ldr	r2, [pc, #64]	; (80059d0 <MX_RTC_Init+0x48>)
 8005990:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005992:	4b0e      	ldr	r3, [pc, #56]	; (80059cc <MX_RTC_Init+0x44>)
 8005994:	2200      	movs	r2, #0
 8005996:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005998:	4b0c      	ldr	r3, [pc, #48]	; (80059cc <MX_RTC_Init+0x44>)
 800599a:	227f      	movs	r2, #127	; 0x7f
 800599c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800599e:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <MX_RTC_Init+0x44>)
 80059a0:	22ff      	movs	r2, #255	; 0xff
 80059a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80059a4:	4b09      	ldr	r3, [pc, #36]	; (80059cc <MX_RTC_Init+0x44>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80059aa:	4b08      	ldr	r3, [pc, #32]	; (80059cc <MX_RTC_Init+0x44>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80059b0:	4b06      	ldr	r3, [pc, #24]	; (80059cc <MX_RTC_Init+0x44>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80059b6:	4805      	ldr	r0, [pc, #20]	; (80059cc <MX_RTC_Init+0x44>)
 80059b8:	f7fd fbf2 	bl	80031a0 <HAL_RTC_Init>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80059c2:	f000 fa05 	bl	8005dd0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80059c6:	bf00      	nop
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	200002cc 	.word	0x200002cc
 80059d0:	40002800 	.word	0x40002800

080059d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059da:	f107 0308 	add.w	r3, r7, #8
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	605a      	str	r2, [r3, #4]
 80059e4:	609a      	str	r2, [r3, #8]
 80059e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059e8:	463b      	mov	r3, r7
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80059f0:	4b1e      	ldr	r3, [pc, #120]	; (8005a6c <MX_TIM2_Init+0x98>)
 80059f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80059f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80059f8:	4b1c      	ldr	r3, [pc, #112]	; (8005a6c <MX_TIM2_Init+0x98>)
 80059fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a00:	4b1a      	ldr	r3, [pc, #104]	; (8005a6c <MX_TIM2_Init+0x98>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 900;
 8005a06:	4b19      	ldr	r3, [pc, #100]	; (8005a6c <MX_TIM2_Init+0x98>)
 8005a08:	f44f 7261 	mov.w	r2, #900	; 0x384
 8005a0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a0e:	4b17      	ldr	r3, [pc, #92]	; (8005a6c <MX_TIM2_Init+0x98>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a14:	4b15      	ldr	r3, [pc, #84]	; (8005a6c <MX_TIM2_Init+0x98>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005a1a:	4814      	ldr	r0, [pc, #80]	; (8005a6c <MX_TIM2_Init+0x98>)
 8005a1c:	f7fd fca5 	bl	800336a <HAL_TIM_Base_Init>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005a26:	f000 f9d3 	bl	8005dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005a30:	f107 0308 	add.w	r3, r7, #8
 8005a34:	4619      	mov	r1, r3
 8005a36:	480d      	ldr	r0, [pc, #52]	; (8005a6c <MX_TIM2_Init+0x98>)
 8005a38:	f7fd fdee 	bl	8003618 <HAL_TIM_ConfigClockSource>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005a42:	f000 f9c5 	bl	8005dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a46:	2300      	movs	r3, #0
 8005a48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005a4e:	463b      	mov	r3, r7
 8005a50:	4619      	mov	r1, r3
 8005a52:	4806      	ldr	r0, [pc, #24]	; (8005a6c <MX_TIM2_Init+0x98>)
 8005a54:	f7fe f806 	bl	8003a64 <HAL_TIMEx_MasterConfigSynchronization>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005a5e:	f000 f9b7 	bl	8005dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005a62:	bf00      	nop
 8005a64:	3718      	adds	r7, #24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	200002f4 	.word	0x200002f4

08005a70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a76:	f107 0308 	add.w	r3, r7, #8
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	605a      	str	r2, [r3, #4]
 8005a80:	609a      	str	r2, [r3, #8]
 8005a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a84:	463b      	mov	r3, r7
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005a8c:	4b1d      	ldr	r3, [pc, #116]	; (8005b04 <MX_TIM3_Init+0x94>)
 8005a8e:	4a1e      	ldr	r2, [pc, #120]	; (8005b08 <MX_TIM3_Init+0x98>)
 8005a90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 8005a92:	4b1c      	ldr	r3, [pc, #112]	; (8005b04 <MX_TIM3_Init+0x94>)
 8005a94:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a9a:	4b1a      	ldr	r3, [pc, #104]	; (8005b04 <MX_TIM3_Init+0x94>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 900;
 8005aa0:	4b18      	ldr	r3, [pc, #96]	; (8005b04 <MX_TIM3_Init+0x94>)
 8005aa2:	f44f 7261 	mov.w	r2, #900	; 0x384
 8005aa6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005aa8:	4b16      	ldr	r3, [pc, #88]	; (8005b04 <MX_TIM3_Init+0x94>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005aae:	4b15      	ldr	r3, [pc, #84]	; (8005b04 <MX_TIM3_Init+0x94>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005ab4:	4813      	ldr	r0, [pc, #76]	; (8005b04 <MX_TIM3_Init+0x94>)
 8005ab6:	f7fd fc58 	bl	800336a <HAL_TIM_Base_Init>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8005ac0:	f000 f986 	bl	8005dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ac8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005aca:	f107 0308 	add.w	r3, r7, #8
 8005ace:	4619      	mov	r1, r3
 8005ad0:	480c      	ldr	r0, [pc, #48]	; (8005b04 <MX_TIM3_Init+0x94>)
 8005ad2:	f7fd fda1 	bl	8003618 <HAL_TIM_ConfigClockSource>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8005adc:	f000 f978 	bl	8005dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005ae0:	2320      	movs	r3, #32
 8005ae2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8005ae4:	2380      	movs	r3, #128	; 0x80
 8005ae6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005ae8:	463b      	mov	r3, r7
 8005aea:	4619      	mov	r1, r3
 8005aec:	4805      	ldr	r0, [pc, #20]	; (8005b04 <MX_TIM3_Init+0x94>)
 8005aee:	f7fd ffb9 	bl	8003a64 <HAL_TIMEx_MasterConfigSynchronization>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8005af8:	f000 f96a 	bl	8005dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005afc:	bf00      	nop
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20000214 	.word	0x20000214
 8005b08:	40000400 	.word	0x40000400

08005b0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005b10:	4b11      	ldr	r3, [pc, #68]	; (8005b58 <MX_USART3_UART_Init+0x4c>)
 8005b12:	4a12      	ldr	r2, [pc, #72]	; (8005b5c <MX_USART3_UART_Init+0x50>)
 8005b14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005b16:	4b10      	ldr	r3, [pc, #64]	; (8005b58 <MX_USART3_UART_Init+0x4c>)
 8005b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005b1e:	4b0e      	ldr	r3, [pc, #56]	; (8005b58 <MX_USART3_UART_Init+0x4c>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005b24:	4b0c      	ldr	r3, [pc, #48]	; (8005b58 <MX_USART3_UART_Init+0x4c>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005b2a:	4b0b      	ldr	r3, [pc, #44]	; (8005b58 <MX_USART3_UART_Init+0x4c>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005b30:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <MX_USART3_UART_Init+0x4c>)
 8005b32:	220c      	movs	r2, #12
 8005b34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b36:	4b08      	ldr	r3, [pc, #32]	; (8005b58 <MX_USART3_UART_Init+0x4c>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b3c:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <MX_USART3_UART_Init+0x4c>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005b42:	4805      	ldr	r0, [pc, #20]	; (8005b58 <MX_USART3_UART_Init+0x4c>)
 8005b44:	f7fd ffe7 	bl	8003b16 <HAL_UART_Init>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005b4e:	f000 f93f 	bl	8005dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005b52:	bf00      	nop
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20000140 	.word	0x20000140
 8005b5c:	40004800 	.word	0x40004800

08005b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08c      	sub	sp, #48	; 0x30
 8005b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b66:	f107 031c 	add.w	r3, r7, #28
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	605a      	str	r2, [r3, #4]
 8005b70:	609a      	str	r2, [r3, #8]
 8005b72:	60da      	str	r2, [r3, #12]
 8005b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b76:	2300      	movs	r3, #0
 8005b78:	61bb      	str	r3, [r7, #24]
 8005b7a:	4b86      	ldr	r3, [pc, #536]	; (8005d94 <MX_GPIO_Init+0x234>)
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7e:	4a85      	ldr	r2, [pc, #532]	; (8005d94 <MX_GPIO_Init+0x234>)
 8005b80:	f043 0304 	orr.w	r3, r3, #4
 8005b84:	6313      	str	r3, [r2, #48]	; 0x30
 8005b86:	4b83      	ldr	r3, [pc, #524]	; (8005d94 <MX_GPIO_Init+0x234>)
 8005b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8a:	f003 0304 	and.w	r3, r3, #4
 8005b8e:	61bb      	str	r3, [r7, #24]
 8005b90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005b92:	2300      	movs	r3, #0
 8005b94:	617b      	str	r3, [r7, #20]
 8005b96:	4b7f      	ldr	r3, [pc, #508]	; (8005d94 <MX_GPIO_Init+0x234>)
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	4a7e      	ldr	r2, [pc, #504]	; (8005d94 <MX_GPIO_Init+0x234>)
 8005b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ba2:	4b7c      	ldr	r3, [pc, #496]	; (8005d94 <MX_GPIO_Init+0x234>)
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005baa:	617b      	str	r3, [r7, #20]
 8005bac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bae:	2300      	movs	r3, #0
 8005bb0:	613b      	str	r3, [r7, #16]
 8005bb2:	4b78      	ldr	r3, [pc, #480]	; (8005d94 <MX_GPIO_Init+0x234>)
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb6:	4a77      	ldr	r2, [pc, #476]	; (8005d94 <MX_GPIO_Init+0x234>)
 8005bb8:	f043 0301 	orr.w	r3, r3, #1
 8005bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8005bbe:	4b75      	ldr	r3, [pc, #468]	; (8005d94 <MX_GPIO_Init+0x234>)
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	613b      	str	r3, [r7, #16]
 8005bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	4b71      	ldr	r3, [pc, #452]	; (8005d94 <MX_GPIO_Init+0x234>)
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd2:	4a70      	ldr	r2, [pc, #448]	; (8005d94 <MX_GPIO_Init+0x234>)
 8005bd4:	f043 0302 	orr.w	r3, r3, #2
 8005bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8005bda:	4b6e      	ldr	r3, [pc, #440]	; (8005d94 <MX_GPIO_Init+0x234>)
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005be6:	2300      	movs	r3, #0
 8005be8:	60bb      	str	r3, [r7, #8]
 8005bea:	4b6a      	ldr	r3, [pc, #424]	; (8005d94 <MX_GPIO_Init+0x234>)
 8005bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bee:	4a69      	ldr	r2, [pc, #420]	; (8005d94 <MX_GPIO_Init+0x234>)
 8005bf0:	f043 0308 	orr.w	r3, r3, #8
 8005bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8005bf6:	4b67      	ldr	r3, [pc, #412]	; (8005d94 <MX_GPIO_Init+0x234>)
 8005bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	60bb      	str	r3, [r7, #8]
 8005c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005c02:	2300      	movs	r3, #0
 8005c04:	607b      	str	r3, [r7, #4]
 8005c06:	4b63      	ldr	r3, [pc, #396]	; (8005d94 <MX_GPIO_Init+0x234>)
 8005c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0a:	4a62      	ldr	r2, [pc, #392]	; (8005d94 <MX_GPIO_Init+0x234>)
 8005c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c10:	6313      	str	r3, [r2, #48]	; 0x30
 8005c12:	4b60      	ldr	r3, [pc, #384]	; (8005d94 <MX_GPIO_Init+0x234>)
 8005c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1a:	607b      	str	r3, [r7, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8005c24:	485c      	ldr	r0, [pc, #368]	; (8005d98 <MX_GPIO_Init+0x238>)
 8005c26:	f7fb fe8f 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	2140      	movs	r1, #64	; 0x40
 8005c2e:	485b      	ldr	r0, [pc, #364]	; (8005d9c <MX_GPIO_Init+0x23c>)
 8005c30:	f7fb fe8a 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8005c34:	2200      	movs	r2, #0
 8005c36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c3a:	4859      	ldr	r0, [pc, #356]	; (8005da0 <MX_GPIO_Init+0x240>)
 8005c3c:	f7fb fe84 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8005c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005c46:	4b57      	ldr	r3, [pc, #348]	; (8005da4 <MX_GPIO_Init+0x244>)
 8005c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8005c4e:	f107 031c 	add.w	r3, r7, #28
 8005c52:	4619      	mov	r1, r3
 8005c54:	4852      	ldr	r0, [pc, #328]	; (8005da0 <MX_GPIO_Init+0x240>)
 8005c56:	f7fb fcb3 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005c5a:	2332      	movs	r3, #50	; 0x32
 8005c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c5e:	2302      	movs	r3, #2
 8005c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c62:	2300      	movs	r3, #0
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c66:	2303      	movs	r3, #3
 8005c68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005c6a:	230b      	movs	r3, #11
 8005c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c6e:	f107 031c 	add.w	r3, r7, #28
 8005c72:	4619      	mov	r1, r3
 8005c74:	484a      	ldr	r0, [pc, #296]	; (8005da0 <MX_GPIO_Init+0x240>)
 8005c76:	f7fb fca3 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005c7a:	2386      	movs	r3, #134	; 0x86
 8005c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c7e:	2302      	movs	r3, #2
 8005c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c82:	2300      	movs	r3, #0
 8005c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c86:	2303      	movs	r3, #3
 8005c88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005c8a:	230b      	movs	r3, #11
 8005c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c8e:	f107 031c 	add.w	r3, r7, #28
 8005c92:	4619      	mov	r1, r3
 8005c94:	4844      	ldr	r0, [pc, #272]	; (8005da8 <MX_GPIO_Init+0x248>)
 8005c96:	f7fb fc93 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005c9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005cac:	230b      	movs	r3, #11
 8005cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005cb0:	f107 031c 	add.w	r3, r7, #28
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4838      	ldr	r0, [pc, #224]	; (8005d98 <MX_GPIO_Init+0x238>)
 8005cb8:	f7fb fc82 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8005cbc:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8005cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cce:	f107 031c 	add.w	r3, r7, #28
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4830      	ldr	r0, [pc, #192]	; (8005d98 <MX_GPIO_Init+0x238>)
 8005cd6:	f7fb fc73 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005cda:	2340      	movs	r3, #64	; 0x40
 8005cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005cea:	f107 031c 	add.w	r3, r7, #28
 8005cee:	4619      	mov	r1, r3
 8005cf0:	482a      	ldr	r0, [pc, #168]	; (8005d9c <MX_GPIO_Init+0x23c>)
 8005cf2:	f7fb fc65 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005cf6:	2380      	movs	r3, #128	; 0x80
 8005cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005d02:	f107 031c 	add.w	r3, r7, #28
 8005d06:	4619      	mov	r1, r3
 8005d08:	4824      	ldr	r0, [pc, #144]	; (8005d9c <MX_GPIO_Init+0x23c>)
 8005d0a:	f7fb fc59 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8005d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d14:	2301      	movs	r3, #1
 8005d16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8005d20:	f107 031c 	add.w	r3, r7, #28
 8005d24:	4619      	mov	r1, r3
 8005d26:	481e      	ldr	r0, [pc, #120]	; (8005da0 <MX_GPIO_Init+0x240>)
 8005d28:	f7fb fc4a 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005d2c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8005d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d32:	2302      	movs	r3, #2
 8005d34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005d3e:	230a      	movs	r3, #10
 8005d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d42:	f107 031c 	add.w	r3, r7, #28
 8005d46:	4619      	mov	r1, r3
 8005d48:	4817      	ldr	r0, [pc, #92]	; (8005da8 <MX_GPIO_Init+0x248>)
 8005d4a:	f7fb fc39 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d54:	2300      	movs	r3, #0
 8005d56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005d5c:	f107 031c 	add.w	r3, r7, #28
 8005d60:	4619      	mov	r1, r3
 8005d62:	4811      	ldr	r0, [pc, #68]	; (8005da8 <MX_GPIO_Init+0x248>)
 8005d64:	f7fb fc2c 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005d68:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d6e:	2302      	movs	r3, #2
 8005d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d72:	2300      	movs	r3, #0
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d76:	2303      	movs	r3, #3
 8005d78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005d7a:	230b      	movs	r3, #11
 8005d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005d7e:	f107 031c 	add.w	r3, r7, #28
 8005d82:	4619      	mov	r1, r3
 8005d84:	4805      	ldr	r0, [pc, #20]	; (8005d9c <MX_GPIO_Init+0x23c>)
 8005d86:	f7fb fc1b 	bl	80015c0 <HAL_GPIO_Init>

}
 8005d8a:	bf00      	nop
 8005d8c:	3730      	adds	r7, #48	; 0x30
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	40023800 	.word	0x40023800
 8005d98:	40020400 	.word	0x40020400
 8005d9c:	40021800 	.word	0x40021800
 8005da0:	40020800 	.word	0x40020800
 8005da4:	10310000 	.word	0x10310000
 8005da8:	40020000 	.word	0x40020000

08005dac <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8005db4:	1d39      	adds	r1, r7, #4
 8005db6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005dba:	2201      	movs	r2, #1
 8005dbc:	4803      	ldr	r0, [pc, #12]	; (8005dcc <__io_putchar+0x20>)
 8005dbe:	f7fd fef7 	bl	8003bb0 <HAL_UART_Transmit>

  return ch;
 8005dc2:	687b      	ldr	r3, [r7, #4]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3708      	adds	r7, #8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	20000140 	.word	0x20000140

08005dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005dd4:	bf00      	nop
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
	...

08005de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005de6:	2300      	movs	r3, #0
 8005de8:	607b      	str	r3, [r7, #4]
 8005dea:	4b10      	ldr	r3, [pc, #64]	; (8005e2c <HAL_MspInit+0x4c>)
 8005dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dee:	4a0f      	ldr	r2, [pc, #60]	; (8005e2c <HAL_MspInit+0x4c>)
 8005df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005df4:	6453      	str	r3, [r2, #68]	; 0x44
 8005df6:	4b0d      	ldr	r3, [pc, #52]	; (8005e2c <HAL_MspInit+0x4c>)
 8005df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dfe:	607b      	str	r3, [r7, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e02:	2300      	movs	r3, #0
 8005e04:	603b      	str	r3, [r7, #0]
 8005e06:	4b09      	ldr	r3, [pc, #36]	; (8005e2c <HAL_MspInit+0x4c>)
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	4a08      	ldr	r2, [pc, #32]	; (8005e2c <HAL_MspInit+0x4c>)
 8005e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e10:	6413      	str	r3, [r2, #64]	; 0x40
 8005e12:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <HAL_MspInit+0x4c>)
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e1a:	603b      	str	r3, [r7, #0]
 8005e1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	40023800 	.word	0x40023800

08005e30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08a      	sub	sp, #40	; 0x28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e38:	f107 0314 	add.w	r3, r7, #20
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	605a      	str	r2, [r3, #4]
 8005e42:	609a      	str	r2, [r3, #8]
 8005e44:	60da      	str	r2, [r3, #12]
 8005e46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a17      	ldr	r2, [pc, #92]	; (8005eac <HAL_ADC_MspInit+0x7c>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d127      	bne.n	8005ea2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005e52:	2300      	movs	r3, #0
 8005e54:	613b      	str	r3, [r7, #16]
 8005e56:	4b16      	ldr	r3, [pc, #88]	; (8005eb0 <HAL_ADC_MspInit+0x80>)
 8005e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5a:	4a15      	ldr	r2, [pc, #84]	; (8005eb0 <HAL_ADC_MspInit+0x80>)
 8005e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e60:	6453      	str	r3, [r2, #68]	; 0x44
 8005e62:	4b13      	ldr	r3, [pc, #76]	; (8005eb0 <HAL_ADC_MspInit+0x80>)
 8005e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6a:	613b      	str	r3, [r7, #16]
 8005e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	4b0f      	ldr	r3, [pc, #60]	; (8005eb0 <HAL_ADC_MspInit+0x80>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e76:	4a0e      	ldr	r2, [pc, #56]	; (8005eb0 <HAL_ADC_MspInit+0x80>)
 8005e78:	f043 0301 	orr.w	r3, r3, #1
 8005e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e7e:	4b0c      	ldr	r3, [pc, #48]	; (8005eb0 <HAL_ADC_MspInit+0x80>)
 8005e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005e8a:	2308      	movs	r3, #8
 8005e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e96:	f107 0314 	add.w	r3, r7, #20
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4805      	ldr	r0, [pc, #20]	; (8005eb4 <HAL_ADC_MspInit+0x84>)
 8005e9e:	f7fb fb8f 	bl	80015c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005ea2:	bf00      	nop
 8005ea4:	3728      	adds	r7, #40	; 0x28
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	40012000 	.word	0x40012000
 8005eb0:	40023800 	.word	0x40023800
 8005eb4:	40020000 	.word	0x40020000

08005eb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08a      	sub	sp, #40	; 0x28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ec0:	f107 0314 	add.w	r3, r7, #20
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]
 8005ec8:	605a      	str	r2, [r3, #4]
 8005eca:	609a      	str	r2, [r3, #8]
 8005ecc:	60da      	str	r2, [r3, #12]
 8005ece:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a19      	ldr	r2, [pc, #100]	; (8005f3c <HAL_I2C_MspInit+0x84>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d12c      	bne.n	8005f34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eda:	2300      	movs	r3, #0
 8005edc:	613b      	str	r3, [r7, #16]
 8005ede:	4b18      	ldr	r3, [pc, #96]	; (8005f40 <HAL_I2C_MspInit+0x88>)
 8005ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee2:	4a17      	ldr	r2, [pc, #92]	; (8005f40 <HAL_I2C_MspInit+0x88>)
 8005ee4:	f043 0302 	orr.w	r3, r3, #2
 8005ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8005eea:	4b15      	ldr	r3, [pc, #84]	; (8005f40 <HAL_I2C_MspInit+0x88>)
 8005eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	613b      	str	r3, [r7, #16]
 8005ef4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005ef6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005efc:	2312      	movs	r3, #18
 8005efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f00:	2301      	movs	r3, #1
 8005f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f04:	2303      	movs	r3, #3
 8005f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005f08:	2304      	movs	r3, #4
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f0c:	f107 0314 	add.w	r3, r7, #20
 8005f10:	4619      	mov	r1, r3
 8005f12:	480c      	ldr	r0, [pc, #48]	; (8005f44 <HAL_I2C_MspInit+0x8c>)
 8005f14:	f7fb fb54 	bl	80015c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005f18:	2300      	movs	r3, #0
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	4b08      	ldr	r3, [pc, #32]	; (8005f40 <HAL_I2C_MspInit+0x88>)
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	4a07      	ldr	r2, [pc, #28]	; (8005f40 <HAL_I2C_MspInit+0x88>)
 8005f22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f26:	6413      	str	r3, [r2, #64]	; 0x40
 8005f28:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <HAL_I2C_MspInit+0x88>)
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005f34:	bf00      	nop
 8005f36:	3728      	adds	r7, #40	; 0x28
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	40005400 	.word	0x40005400
 8005f40:	40023800 	.word	0x40023800
 8005f44:	40020400 	.word	0x40020400

08005f48 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a05      	ldr	r2, [pc, #20]	; (8005f6c <HAL_RTC_MspInit+0x24>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d102      	bne.n	8005f60 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005f5a:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <HAL_RTC_MspInit+0x28>)
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	40002800 	.word	0x40002800
 8005f70:	42470e3c 	.word	0x42470e3c

08005f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f84:	d116      	bne.n	8005fb4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	4b1a      	ldr	r3, [pc, #104]	; (8005ff4 <HAL_TIM_Base_MspInit+0x80>)
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	4a19      	ldr	r2, [pc, #100]	; (8005ff4 <HAL_TIM_Base_MspInit+0x80>)
 8005f90:	f043 0301 	orr.w	r3, r3, #1
 8005f94:	6413      	str	r3, [r2, #64]	; 0x40
 8005f96:	4b17      	ldr	r3, [pc, #92]	; (8005ff4 <HAL_TIM_Base_MspInit+0x80>)
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	201c      	movs	r0, #28
 8005fa8:	f7fa ffad 	bl	8000f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005fac:	201c      	movs	r0, #28
 8005fae:	f7fa ffc6 	bl	8000f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005fb2:	e01a      	b.n	8005fea <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a0f      	ldr	r2, [pc, #60]	; (8005ff8 <HAL_TIM_Base_MspInit+0x84>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d115      	bne.n	8005fea <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60bb      	str	r3, [r7, #8]
 8005fc2:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <HAL_TIM_Base_MspInit+0x80>)
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	4a0b      	ldr	r2, [pc, #44]	; (8005ff4 <HAL_TIM_Base_MspInit+0x80>)
 8005fc8:	f043 0302 	orr.w	r3, r3, #2
 8005fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8005fce:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <HAL_TIM_Base_MspInit+0x80>)
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	60bb      	str	r3, [r7, #8]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2100      	movs	r1, #0
 8005fde:	201d      	movs	r0, #29
 8005fe0:	f7fa ff91 	bl	8000f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005fe4:	201d      	movs	r0, #29
 8005fe6:	f7fa ffaa 	bl	8000f3e <HAL_NVIC_EnableIRQ>
}
 8005fea:	bf00      	nop
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	40023800 	.word	0x40023800
 8005ff8:	40000400 	.word	0x40000400

08005ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08a      	sub	sp, #40	; 0x28
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006004:	f107 0314 	add.w	r3, r7, #20
 8006008:	2200      	movs	r2, #0
 800600a:	601a      	str	r2, [r3, #0]
 800600c:	605a      	str	r2, [r3, #4]
 800600e:	609a      	str	r2, [r3, #8]
 8006010:	60da      	str	r2, [r3, #12]
 8006012:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a1d      	ldr	r2, [pc, #116]	; (8006090 <HAL_UART_MspInit+0x94>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d134      	bne.n	8006088 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800601e:	2300      	movs	r3, #0
 8006020:	613b      	str	r3, [r7, #16]
 8006022:	4b1c      	ldr	r3, [pc, #112]	; (8006094 <HAL_UART_MspInit+0x98>)
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	4a1b      	ldr	r2, [pc, #108]	; (8006094 <HAL_UART_MspInit+0x98>)
 8006028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800602c:	6413      	str	r3, [r2, #64]	; 0x40
 800602e:	4b19      	ldr	r3, [pc, #100]	; (8006094 <HAL_UART_MspInit+0x98>)
 8006030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006036:	613b      	str	r3, [r7, #16]
 8006038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800603a:	2300      	movs	r3, #0
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	4b15      	ldr	r3, [pc, #84]	; (8006094 <HAL_UART_MspInit+0x98>)
 8006040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006042:	4a14      	ldr	r2, [pc, #80]	; (8006094 <HAL_UART_MspInit+0x98>)
 8006044:	f043 0308 	orr.w	r3, r3, #8
 8006048:	6313      	str	r3, [r2, #48]	; 0x30
 800604a:	4b12      	ldr	r3, [pc, #72]	; (8006094 <HAL_UART_MspInit+0x98>)
 800604c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604e:	f003 0308 	and.w	r3, r3, #8
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8006056:	f44f 7340 	mov.w	r3, #768	; 0x300
 800605a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800605c:	2302      	movs	r3, #2
 800605e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006060:	2301      	movs	r3, #1
 8006062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006064:	2303      	movs	r3, #3
 8006066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006068:	2307      	movs	r3, #7
 800606a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800606c:	f107 0314 	add.w	r3, r7, #20
 8006070:	4619      	mov	r1, r3
 8006072:	4809      	ldr	r0, [pc, #36]	; (8006098 <HAL_UART_MspInit+0x9c>)
 8006074:	f7fb faa4 	bl	80015c0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006078:	2200      	movs	r2, #0
 800607a:	2100      	movs	r1, #0
 800607c:	2027      	movs	r0, #39	; 0x27
 800607e:	f7fa ff42 	bl	8000f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006082:	2027      	movs	r0, #39	; 0x27
 8006084:	f7fa ff5b 	bl	8000f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006088:	bf00      	nop
 800608a:	3728      	adds	r7, #40	; 0x28
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	40004800 	.word	0x40004800
 8006094:	40023800 	.word	0x40023800
 8006098:	40020c00 	.word	0x40020c00

0800609c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80060a0:	bf00      	nop
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80060aa:	b480      	push	{r7}
 80060ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80060ae:	e7fe      	b.n	80060ae <HardFault_Handler+0x4>

080060b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80060b0:	b480      	push	{r7}
 80060b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80060b4:	e7fe      	b.n	80060b4 <MemManage_Handler+0x4>

080060b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80060b6:	b480      	push	{r7}
 80060b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80060ba:	e7fe      	b.n	80060ba <BusFault_Handler+0x4>

080060bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80060c0:	e7fe      	b.n	80060c0 <UsageFault_Handler+0x4>

080060c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80060c2:	b480      	push	{r7}
 80060c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80060c6:	bf00      	nop
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80060d4:	bf00      	nop
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80060de:	b480      	push	{r7}
 80060e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80060e2:	bf00      	nop
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80060f0:	f7fa faa4 	bl	800063c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80060f4:	bf00      	nop
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80060fc:	4802      	ldr	r0, [pc, #8]	; (8006108 <TIM2_IRQHandler+0x10>)
 80060fe:	f7fd f983 	bl	8003408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006102:	bf00      	nop
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	200002f4 	.word	0x200002f4

0800610c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006110:	4802      	ldr	r0, [pc, #8]	; (800611c <TIM3_IRQHandler+0x10>)
 8006112:	f7fd f979 	bl	8003408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006116:	bf00      	nop
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	20000214 	.word	0x20000214

08006120 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006124:	4802      	ldr	r0, [pc, #8]	; (8006130 <USART3_IRQHandler+0x10>)
 8006126:	f7fd fe77 	bl	8003e18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800612a:	bf00      	nop
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20000140 	.word	0x20000140

08006134 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006138:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800613c:	f7fb fc1e 	bl	800197c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006140:	bf00      	nop
 8006142:	bd80      	pop	{r7, pc}

08006144 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006150:	2300      	movs	r3, #0
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	e00a      	b.n	800616c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006156:	f3af 8000 	nop.w
 800615a:	4601      	mov	r1, r0
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	60ba      	str	r2, [r7, #8]
 8006162:	b2ca      	uxtb	r2, r1
 8006164:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	3301      	adds	r3, #1
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	429a      	cmp	r2, r3
 8006172:	dbf0      	blt.n	8006156 <_read+0x12>
	}

return len;
 8006174:	687b      	ldr	r3, [r7, #4]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b086      	sub	sp, #24
 8006182:	af00      	add	r7, sp, #0
 8006184:	60f8      	str	r0, [r7, #12]
 8006186:	60b9      	str	r1, [r7, #8]
 8006188:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800618a:	2300      	movs	r3, #0
 800618c:	617b      	str	r3, [r7, #20]
 800618e:	e009      	b.n	80061a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	60ba      	str	r2, [r7, #8]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff fe07 	bl	8005dac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	3301      	adds	r3, #1
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	dbf1      	blt.n	8006190 <_write+0x12>
	}
	return len;
 80061ac:	687b      	ldr	r3, [r7, #4]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <_close>:

int _close(int file)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
	return -1;
 80061be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80061de:	605a      	str	r2, [r3, #4]
	return 0;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <_isatty>:

int _isatty(int file)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
	return 1;
 80061f6:	2301      	movs	r3, #1
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
	return 0;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
	...

08006220 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006228:	4b11      	ldr	r3, [pc, #68]	; (8006270 <_sbrk+0x50>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d102      	bne.n	8006236 <_sbrk+0x16>
		heap_end = &end;
 8006230:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <_sbrk+0x50>)
 8006232:	4a10      	ldr	r2, [pc, #64]	; (8006274 <_sbrk+0x54>)
 8006234:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006236:	4b0e      	ldr	r3, [pc, #56]	; (8006270 <_sbrk+0x50>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800623c:	4b0c      	ldr	r3, [pc, #48]	; (8006270 <_sbrk+0x50>)
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4413      	add	r3, r2
 8006244:	466a      	mov	r2, sp
 8006246:	4293      	cmp	r3, r2
 8006248:	d907      	bls.n	800625a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800624a:	f000 f875 	bl	8006338 <__errno>
 800624e:	4603      	mov	r3, r0
 8006250:	220c      	movs	r2, #12
 8006252:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006254:	f04f 33ff 	mov.w	r3, #4294967295
 8006258:	e006      	b.n	8006268 <_sbrk+0x48>
	}

	heap_end += incr;
 800625a:	4b05      	ldr	r3, [pc, #20]	; (8006270 <_sbrk+0x50>)
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4413      	add	r3, r2
 8006262:	4a03      	ldr	r2, [pc, #12]	; (8006270 <_sbrk+0x50>)
 8006264:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006266:	68fb      	ldr	r3, [r7, #12]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	200000f8 	.word	0x200000f8
 8006274:	20000368 	.word	0x20000368

08006278 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006278:	b480      	push	{r7}
 800627a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800627c:	4b16      	ldr	r3, [pc, #88]	; (80062d8 <SystemInit+0x60>)
 800627e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006282:	4a15      	ldr	r2, [pc, #84]	; (80062d8 <SystemInit+0x60>)
 8006284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800628c:	4b13      	ldr	r3, [pc, #76]	; (80062dc <SystemInit+0x64>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a12      	ldr	r2, [pc, #72]	; (80062dc <SystemInit+0x64>)
 8006292:	f043 0301 	orr.w	r3, r3, #1
 8006296:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006298:	4b10      	ldr	r3, [pc, #64]	; (80062dc <SystemInit+0x64>)
 800629a:	2200      	movs	r2, #0
 800629c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800629e:	4b0f      	ldr	r3, [pc, #60]	; (80062dc <SystemInit+0x64>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a0e      	ldr	r2, [pc, #56]	; (80062dc <SystemInit+0x64>)
 80062a4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80062a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062ac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80062ae:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <SystemInit+0x64>)
 80062b0:	4a0b      	ldr	r2, [pc, #44]	; (80062e0 <SystemInit+0x68>)
 80062b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80062b4:	4b09      	ldr	r3, [pc, #36]	; (80062dc <SystemInit+0x64>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a08      	ldr	r2, [pc, #32]	; (80062dc <SystemInit+0x64>)
 80062ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80062c0:	4b06      	ldr	r3, [pc, #24]	; (80062dc <SystemInit+0x64>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80062c6:	4b04      	ldr	r3, [pc, #16]	; (80062d8 <SystemInit+0x60>)
 80062c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80062cc:	609a      	str	r2, [r3, #8]
#endif
}
 80062ce:	bf00      	nop
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	e000ed00 	.word	0xe000ed00
 80062dc:	40023800 	.word	0x40023800
 80062e0:	24003010 	.word	0x24003010

080062e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80062e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800631c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80062e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80062ea:	e003      	b.n	80062f4 <LoopCopyDataInit>

080062ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80062ec:	4b0c      	ldr	r3, [pc, #48]	; (8006320 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80062ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80062f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80062f2:	3104      	adds	r1, #4

080062f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80062f4:	480b      	ldr	r0, [pc, #44]	; (8006324 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80062f6:	4b0c      	ldr	r3, [pc, #48]	; (8006328 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80062f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80062fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80062fc:	d3f6      	bcc.n	80062ec <CopyDataInit>
  ldr  r2, =_sbss
 80062fe:	4a0b      	ldr	r2, [pc, #44]	; (800632c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006300:	e002      	b.n	8006308 <LoopFillZerobss>

08006302 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006302:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006304:	f842 3b04 	str.w	r3, [r2], #4

08006308 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006308:	4b09      	ldr	r3, [pc, #36]	; (8006330 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800630a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800630c:	d3f9      	bcc.n	8006302 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800630e:	f7ff ffb3 	bl	8006278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006312:	f000 f817 	bl	8006344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006316:	f7ff f975 	bl	8005604 <main>
  bx  lr    
 800631a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800631c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8006320:	08007920 	.word	0x08007920
  ldr  r0, =_sdata
 8006324:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006328:	200000d4 	.word	0x200000d4
  ldr  r2, =_sbss
 800632c:	200000d4 	.word	0x200000d4
  ldr  r3, = _ebss
 8006330:	20000364 	.word	0x20000364

08006334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006334:	e7fe      	b.n	8006334 <ADC_IRQHandler>
	...

08006338 <__errno>:
 8006338:	4b01      	ldr	r3, [pc, #4]	; (8006340 <__errno+0x8>)
 800633a:	6818      	ldr	r0, [r3, #0]
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	20000070 	.word	0x20000070

08006344 <__libc_init_array>:
 8006344:	b570      	push	{r4, r5, r6, lr}
 8006346:	4d0d      	ldr	r5, [pc, #52]	; (800637c <__libc_init_array+0x38>)
 8006348:	4c0d      	ldr	r4, [pc, #52]	; (8006380 <__libc_init_array+0x3c>)
 800634a:	1b64      	subs	r4, r4, r5
 800634c:	10a4      	asrs	r4, r4, #2
 800634e:	2600      	movs	r6, #0
 8006350:	42a6      	cmp	r6, r4
 8006352:	d109      	bne.n	8006368 <__libc_init_array+0x24>
 8006354:	4d0b      	ldr	r5, [pc, #44]	; (8006384 <__libc_init_array+0x40>)
 8006356:	4c0c      	ldr	r4, [pc, #48]	; (8006388 <__libc_init_array+0x44>)
 8006358:	f001 f9ce 	bl	80076f8 <_init>
 800635c:	1b64      	subs	r4, r4, r5
 800635e:	10a4      	asrs	r4, r4, #2
 8006360:	2600      	movs	r6, #0
 8006362:	42a6      	cmp	r6, r4
 8006364:	d105      	bne.n	8006372 <__libc_init_array+0x2e>
 8006366:	bd70      	pop	{r4, r5, r6, pc}
 8006368:	f855 3b04 	ldr.w	r3, [r5], #4
 800636c:	4798      	blx	r3
 800636e:	3601      	adds	r6, #1
 8006370:	e7ee      	b.n	8006350 <__libc_init_array+0xc>
 8006372:	f855 3b04 	ldr.w	r3, [r5], #4
 8006376:	4798      	blx	r3
 8006378:	3601      	adds	r6, #1
 800637a:	e7f2      	b.n	8006362 <__libc_init_array+0x1e>
 800637c:	08007918 	.word	0x08007918
 8006380:	08007918 	.word	0x08007918
 8006384:	08007918 	.word	0x08007918
 8006388:	0800791c 	.word	0x0800791c

0800638c <memset>:
 800638c:	4402      	add	r2, r0
 800638e:	4603      	mov	r3, r0
 8006390:	4293      	cmp	r3, r2
 8006392:	d100      	bne.n	8006396 <memset+0xa>
 8006394:	4770      	bx	lr
 8006396:	f803 1b01 	strb.w	r1, [r3], #1
 800639a:	e7f9      	b.n	8006390 <memset+0x4>

0800639c <iprintf>:
 800639c:	b40f      	push	{r0, r1, r2, r3}
 800639e:	4b0a      	ldr	r3, [pc, #40]	; (80063c8 <iprintf+0x2c>)
 80063a0:	b513      	push	{r0, r1, r4, lr}
 80063a2:	681c      	ldr	r4, [r3, #0]
 80063a4:	b124      	cbz	r4, 80063b0 <iprintf+0x14>
 80063a6:	69a3      	ldr	r3, [r4, #24]
 80063a8:	b913      	cbnz	r3, 80063b0 <iprintf+0x14>
 80063aa:	4620      	mov	r0, r4
 80063ac:	f000 fa8e 	bl	80068cc <__sinit>
 80063b0:	ab05      	add	r3, sp, #20
 80063b2:	9a04      	ldr	r2, [sp, #16]
 80063b4:	68a1      	ldr	r1, [r4, #8]
 80063b6:	9301      	str	r3, [sp, #4]
 80063b8:	4620      	mov	r0, r4
 80063ba:	f000 fdbb 	bl	8006f34 <_vfiprintf_r>
 80063be:	b002      	add	sp, #8
 80063c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063c4:	b004      	add	sp, #16
 80063c6:	4770      	bx	lr
 80063c8:	20000070 	.word	0x20000070

080063cc <_puts_r>:
 80063cc:	b570      	push	{r4, r5, r6, lr}
 80063ce:	460e      	mov	r6, r1
 80063d0:	4605      	mov	r5, r0
 80063d2:	b118      	cbz	r0, 80063dc <_puts_r+0x10>
 80063d4:	6983      	ldr	r3, [r0, #24]
 80063d6:	b90b      	cbnz	r3, 80063dc <_puts_r+0x10>
 80063d8:	f000 fa78 	bl	80068cc <__sinit>
 80063dc:	69ab      	ldr	r3, [r5, #24]
 80063de:	68ac      	ldr	r4, [r5, #8]
 80063e0:	b913      	cbnz	r3, 80063e8 <_puts_r+0x1c>
 80063e2:	4628      	mov	r0, r5
 80063e4:	f000 fa72 	bl	80068cc <__sinit>
 80063e8:	4b2c      	ldr	r3, [pc, #176]	; (800649c <_puts_r+0xd0>)
 80063ea:	429c      	cmp	r4, r3
 80063ec:	d120      	bne.n	8006430 <_puts_r+0x64>
 80063ee:	686c      	ldr	r4, [r5, #4]
 80063f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063f2:	07db      	lsls	r3, r3, #31
 80063f4:	d405      	bmi.n	8006402 <_puts_r+0x36>
 80063f6:	89a3      	ldrh	r3, [r4, #12]
 80063f8:	0598      	lsls	r0, r3, #22
 80063fa:	d402      	bmi.n	8006402 <_puts_r+0x36>
 80063fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063fe:	f000 fb03 	bl	8006a08 <__retarget_lock_acquire_recursive>
 8006402:	89a3      	ldrh	r3, [r4, #12]
 8006404:	0719      	lsls	r1, r3, #28
 8006406:	d51d      	bpl.n	8006444 <_puts_r+0x78>
 8006408:	6923      	ldr	r3, [r4, #16]
 800640a:	b1db      	cbz	r3, 8006444 <_puts_r+0x78>
 800640c:	3e01      	subs	r6, #1
 800640e:	68a3      	ldr	r3, [r4, #8]
 8006410:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006414:	3b01      	subs	r3, #1
 8006416:	60a3      	str	r3, [r4, #8]
 8006418:	bb39      	cbnz	r1, 800646a <_puts_r+0x9e>
 800641a:	2b00      	cmp	r3, #0
 800641c:	da38      	bge.n	8006490 <_puts_r+0xc4>
 800641e:	4622      	mov	r2, r4
 8006420:	210a      	movs	r1, #10
 8006422:	4628      	mov	r0, r5
 8006424:	f000 f878 	bl	8006518 <__swbuf_r>
 8006428:	3001      	adds	r0, #1
 800642a:	d011      	beq.n	8006450 <_puts_r+0x84>
 800642c:	250a      	movs	r5, #10
 800642e:	e011      	b.n	8006454 <_puts_r+0x88>
 8006430:	4b1b      	ldr	r3, [pc, #108]	; (80064a0 <_puts_r+0xd4>)
 8006432:	429c      	cmp	r4, r3
 8006434:	d101      	bne.n	800643a <_puts_r+0x6e>
 8006436:	68ac      	ldr	r4, [r5, #8]
 8006438:	e7da      	b.n	80063f0 <_puts_r+0x24>
 800643a:	4b1a      	ldr	r3, [pc, #104]	; (80064a4 <_puts_r+0xd8>)
 800643c:	429c      	cmp	r4, r3
 800643e:	bf08      	it	eq
 8006440:	68ec      	ldreq	r4, [r5, #12]
 8006442:	e7d5      	b.n	80063f0 <_puts_r+0x24>
 8006444:	4621      	mov	r1, r4
 8006446:	4628      	mov	r0, r5
 8006448:	f000 f8b8 	bl	80065bc <__swsetup_r>
 800644c:	2800      	cmp	r0, #0
 800644e:	d0dd      	beq.n	800640c <_puts_r+0x40>
 8006450:	f04f 35ff 	mov.w	r5, #4294967295
 8006454:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006456:	07da      	lsls	r2, r3, #31
 8006458:	d405      	bmi.n	8006466 <_puts_r+0x9a>
 800645a:	89a3      	ldrh	r3, [r4, #12]
 800645c:	059b      	lsls	r3, r3, #22
 800645e:	d402      	bmi.n	8006466 <_puts_r+0x9a>
 8006460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006462:	f000 fad2 	bl	8006a0a <__retarget_lock_release_recursive>
 8006466:	4628      	mov	r0, r5
 8006468:	bd70      	pop	{r4, r5, r6, pc}
 800646a:	2b00      	cmp	r3, #0
 800646c:	da04      	bge.n	8006478 <_puts_r+0xac>
 800646e:	69a2      	ldr	r2, [r4, #24]
 8006470:	429a      	cmp	r2, r3
 8006472:	dc06      	bgt.n	8006482 <_puts_r+0xb6>
 8006474:	290a      	cmp	r1, #10
 8006476:	d004      	beq.n	8006482 <_puts_r+0xb6>
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	6022      	str	r2, [r4, #0]
 800647e:	7019      	strb	r1, [r3, #0]
 8006480:	e7c5      	b.n	800640e <_puts_r+0x42>
 8006482:	4622      	mov	r2, r4
 8006484:	4628      	mov	r0, r5
 8006486:	f000 f847 	bl	8006518 <__swbuf_r>
 800648a:	3001      	adds	r0, #1
 800648c:	d1bf      	bne.n	800640e <_puts_r+0x42>
 800648e:	e7df      	b.n	8006450 <_puts_r+0x84>
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	250a      	movs	r5, #10
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	6022      	str	r2, [r4, #0]
 8006498:	701d      	strb	r5, [r3, #0]
 800649a:	e7db      	b.n	8006454 <_puts_r+0x88>
 800649c:	0800789c 	.word	0x0800789c
 80064a0:	080078bc 	.word	0x080078bc
 80064a4:	0800787c 	.word	0x0800787c

080064a8 <puts>:
 80064a8:	4b02      	ldr	r3, [pc, #8]	; (80064b4 <puts+0xc>)
 80064aa:	4601      	mov	r1, r0
 80064ac:	6818      	ldr	r0, [r3, #0]
 80064ae:	f7ff bf8d 	b.w	80063cc <_puts_r>
 80064b2:	bf00      	nop
 80064b4:	20000070 	.word	0x20000070

080064b8 <siprintf>:
 80064b8:	b40e      	push	{r1, r2, r3}
 80064ba:	b500      	push	{lr}
 80064bc:	b09c      	sub	sp, #112	; 0x70
 80064be:	ab1d      	add	r3, sp, #116	; 0x74
 80064c0:	9002      	str	r0, [sp, #8]
 80064c2:	9006      	str	r0, [sp, #24]
 80064c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064c8:	4809      	ldr	r0, [pc, #36]	; (80064f0 <siprintf+0x38>)
 80064ca:	9107      	str	r1, [sp, #28]
 80064cc:	9104      	str	r1, [sp, #16]
 80064ce:	4909      	ldr	r1, [pc, #36]	; (80064f4 <siprintf+0x3c>)
 80064d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80064d4:	9105      	str	r1, [sp, #20]
 80064d6:	6800      	ldr	r0, [r0, #0]
 80064d8:	9301      	str	r3, [sp, #4]
 80064da:	a902      	add	r1, sp, #8
 80064dc:	f000 fc00 	bl	8006ce0 <_svfiprintf_r>
 80064e0:	9b02      	ldr	r3, [sp, #8]
 80064e2:	2200      	movs	r2, #0
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	b01c      	add	sp, #112	; 0x70
 80064e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064ec:	b003      	add	sp, #12
 80064ee:	4770      	bx	lr
 80064f0:	20000070 	.word	0x20000070
 80064f4:	ffff0208 	.word	0xffff0208

080064f8 <strcat>:
 80064f8:	b510      	push	{r4, lr}
 80064fa:	4602      	mov	r2, r0
 80064fc:	7814      	ldrb	r4, [r2, #0]
 80064fe:	4613      	mov	r3, r2
 8006500:	3201      	adds	r2, #1
 8006502:	2c00      	cmp	r4, #0
 8006504:	d1fa      	bne.n	80064fc <strcat+0x4>
 8006506:	3b01      	subs	r3, #1
 8006508:	f811 2b01 	ldrb.w	r2, [r1], #1
 800650c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006510:	2a00      	cmp	r2, #0
 8006512:	d1f9      	bne.n	8006508 <strcat+0x10>
 8006514:	bd10      	pop	{r4, pc}
	...

08006518 <__swbuf_r>:
 8006518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800651a:	460e      	mov	r6, r1
 800651c:	4614      	mov	r4, r2
 800651e:	4605      	mov	r5, r0
 8006520:	b118      	cbz	r0, 800652a <__swbuf_r+0x12>
 8006522:	6983      	ldr	r3, [r0, #24]
 8006524:	b90b      	cbnz	r3, 800652a <__swbuf_r+0x12>
 8006526:	f000 f9d1 	bl	80068cc <__sinit>
 800652a:	4b21      	ldr	r3, [pc, #132]	; (80065b0 <__swbuf_r+0x98>)
 800652c:	429c      	cmp	r4, r3
 800652e:	d12b      	bne.n	8006588 <__swbuf_r+0x70>
 8006530:	686c      	ldr	r4, [r5, #4]
 8006532:	69a3      	ldr	r3, [r4, #24]
 8006534:	60a3      	str	r3, [r4, #8]
 8006536:	89a3      	ldrh	r3, [r4, #12]
 8006538:	071a      	lsls	r2, r3, #28
 800653a:	d52f      	bpl.n	800659c <__swbuf_r+0x84>
 800653c:	6923      	ldr	r3, [r4, #16]
 800653e:	b36b      	cbz	r3, 800659c <__swbuf_r+0x84>
 8006540:	6923      	ldr	r3, [r4, #16]
 8006542:	6820      	ldr	r0, [r4, #0]
 8006544:	1ac0      	subs	r0, r0, r3
 8006546:	6963      	ldr	r3, [r4, #20]
 8006548:	b2f6      	uxtb	r6, r6
 800654a:	4283      	cmp	r3, r0
 800654c:	4637      	mov	r7, r6
 800654e:	dc04      	bgt.n	800655a <__swbuf_r+0x42>
 8006550:	4621      	mov	r1, r4
 8006552:	4628      	mov	r0, r5
 8006554:	f000 f926 	bl	80067a4 <_fflush_r>
 8006558:	bb30      	cbnz	r0, 80065a8 <__swbuf_r+0x90>
 800655a:	68a3      	ldr	r3, [r4, #8]
 800655c:	3b01      	subs	r3, #1
 800655e:	60a3      	str	r3, [r4, #8]
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	1c5a      	adds	r2, r3, #1
 8006564:	6022      	str	r2, [r4, #0]
 8006566:	701e      	strb	r6, [r3, #0]
 8006568:	6963      	ldr	r3, [r4, #20]
 800656a:	3001      	adds	r0, #1
 800656c:	4283      	cmp	r3, r0
 800656e:	d004      	beq.n	800657a <__swbuf_r+0x62>
 8006570:	89a3      	ldrh	r3, [r4, #12]
 8006572:	07db      	lsls	r3, r3, #31
 8006574:	d506      	bpl.n	8006584 <__swbuf_r+0x6c>
 8006576:	2e0a      	cmp	r6, #10
 8006578:	d104      	bne.n	8006584 <__swbuf_r+0x6c>
 800657a:	4621      	mov	r1, r4
 800657c:	4628      	mov	r0, r5
 800657e:	f000 f911 	bl	80067a4 <_fflush_r>
 8006582:	b988      	cbnz	r0, 80065a8 <__swbuf_r+0x90>
 8006584:	4638      	mov	r0, r7
 8006586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006588:	4b0a      	ldr	r3, [pc, #40]	; (80065b4 <__swbuf_r+0x9c>)
 800658a:	429c      	cmp	r4, r3
 800658c:	d101      	bne.n	8006592 <__swbuf_r+0x7a>
 800658e:	68ac      	ldr	r4, [r5, #8]
 8006590:	e7cf      	b.n	8006532 <__swbuf_r+0x1a>
 8006592:	4b09      	ldr	r3, [pc, #36]	; (80065b8 <__swbuf_r+0xa0>)
 8006594:	429c      	cmp	r4, r3
 8006596:	bf08      	it	eq
 8006598:	68ec      	ldreq	r4, [r5, #12]
 800659a:	e7ca      	b.n	8006532 <__swbuf_r+0x1a>
 800659c:	4621      	mov	r1, r4
 800659e:	4628      	mov	r0, r5
 80065a0:	f000 f80c 	bl	80065bc <__swsetup_r>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d0cb      	beq.n	8006540 <__swbuf_r+0x28>
 80065a8:	f04f 37ff 	mov.w	r7, #4294967295
 80065ac:	e7ea      	b.n	8006584 <__swbuf_r+0x6c>
 80065ae:	bf00      	nop
 80065b0:	0800789c 	.word	0x0800789c
 80065b4:	080078bc 	.word	0x080078bc
 80065b8:	0800787c 	.word	0x0800787c

080065bc <__swsetup_r>:
 80065bc:	4b32      	ldr	r3, [pc, #200]	; (8006688 <__swsetup_r+0xcc>)
 80065be:	b570      	push	{r4, r5, r6, lr}
 80065c0:	681d      	ldr	r5, [r3, #0]
 80065c2:	4606      	mov	r6, r0
 80065c4:	460c      	mov	r4, r1
 80065c6:	b125      	cbz	r5, 80065d2 <__swsetup_r+0x16>
 80065c8:	69ab      	ldr	r3, [r5, #24]
 80065ca:	b913      	cbnz	r3, 80065d2 <__swsetup_r+0x16>
 80065cc:	4628      	mov	r0, r5
 80065ce:	f000 f97d 	bl	80068cc <__sinit>
 80065d2:	4b2e      	ldr	r3, [pc, #184]	; (800668c <__swsetup_r+0xd0>)
 80065d4:	429c      	cmp	r4, r3
 80065d6:	d10f      	bne.n	80065f8 <__swsetup_r+0x3c>
 80065d8:	686c      	ldr	r4, [r5, #4]
 80065da:	89a3      	ldrh	r3, [r4, #12]
 80065dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065e0:	0719      	lsls	r1, r3, #28
 80065e2:	d42c      	bmi.n	800663e <__swsetup_r+0x82>
 80065e4:	06dd      	lsls	r5, r3, #27
 80065e6:	d411      	bmi.n	800660c <__swsetup_r+0x50>
 80065e8:	2309      	movs	r3, #9
 80065ea:	6033      	str	r3, [r6, #0]
 80065ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065f0:	81a3      	strh	r3, [r4, #12]
 80065f2:	f04f 30ff 	mov.w	r0, #4294967295
 80065f6:	e03e      	b.n	8006676 <__swsetup_r+0xba>
 80065f8:	4b25      	ldr	r3, [pc, #148]	; (8006690 <__swsetup_r+0xd4>)
 80065fa:	429c      	cmp	r4, r3
 80065fc:	d101      	bne.n	8006602 <__swsetup_r+0x46>
 80065fe:	68ac      	ldr	r4, [r5, #8]
 8006600:	e7eb      	b.n	80065da <__swsetup_r+0x1e>
 8006602:	4b24      	ldr	r3, [pc, #144]	; (8006694 <__swsetup_r+0xd8>)
 8006604:	429c      	cmp	r4, r3
 8006606:	bf08      	it	eq
 8006608:	68ec      	ldreq	r4, [r5, #12]
 800660a:	e7e6      	b.n	80065da <__swsetup_r+0x1e>
 800660c:	0758      	lsls	r0, r3, #29
 800660e:	d512      	bpl.n	8006636 <__swsetup_r+0x7a>
 8006610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006612:	b141      	cbz	r1, 8006626 <__swsetup_r+0x6a>
 8006614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006618:	4299      	cmp	r1, r3
 800661a:	d002      	beq.n	8006622 <__swsetup_r+0x66>
 800661c:	4630      	mov	r0, r6
 800661e:	f000 fa59 	bl	8006ad4 <_free_r>
 8006622:	2300      	movs	r3, #0
 8006624:	6363      	str	r3, [r4, #52]	; 0x34
 8006626:	89a3      	ldrh	r3, [r4, #12]
 8006628:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800662c:	81a3      	strh	r3, [r4, #12]
 800662e:	2300      	movs	r3, #0
 8006630:	6063      	str	r3, [r4, #4]
 8006632:	6923      	ldr	r3, [r4, #16]
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	89a3      	ldrh	r3, [r4, #12]
 8006638:	f043 0308 	orr.w	r3, r3, #8
 800663c:	81a3      	strh	r3, [r4, #12]
 800663e:	6923      	ldr	r3, [r4, #16]
 8006640:	b94b      	cbnz	r3, 8006656 <__swsetup_r+0x9a>
 8006642:	89a3      	ldrh	r3, [r4, #12]
 8006644:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800664c:	d003      	beq.n	8006656 <__swsetup_r+0x9a>
 800664e:	4621      	mov	r1, r4
 8006650:	4630      	mov	r0, r6
 8006652:	f000 f9ff 	bl	8006a54 <__smakebuf_r>
 8006656:	89a0      	ldrh	r0, [r4, #12]
 8006658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800665c:	f010 0301 	ands.w	r3, r0, #1
 8006660:	d00a      	beq.n	8006678 <__swsetup_r+0xbc>
 8006662:	2300      	movs	r3, #0
 8006664:	60a3      	str	r3, [r4, #8]
 8006666:	6963      	ldr	r3, [r4, #20]
 8006668:	425b      	negs	r3, r3
 800666a:	61a3      	str	r3, [r4, #24]
 800666c:	6923      	ldr	r3, [r4, #16]
 800666e:	b943      	cbnz	r3, 8006682 <__swsetup_r+0xc6>
 8006670:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006674:	d1ba      	bne.n	80065ec <__swsetup_r+0x30>
 8006676:	bd70      	pop	{r4, r5, r6, pc}
 8006678:	0781      	lsls	r1, r0, #30
 800667a:	bf58      	it	pl
 800667c:	6963      	ldrpl	r3, [r4, #20]
 800667e:	60a3      	str	r3, [r4, #8]
 8006680:	e7f4      	b.n	800666c <__swsetup_r+0xb0>
 8006682:	2000      	movs	r0, #0
 8006684:	e7f7      	b.n	8006676 <__swsetup_r+0xba>
 8006686:	bf00      	nop
 8006688:	20000070 	.word	0x20000070
 800668c:	0800789c 	.word	0x0800789c
 8006690:	080078bc 	.word	0x080078bc
 8006694:	0800787c 	.word	0x0800787c

08006698 <__sflush_r>:
 8006698:	898a      	ldrh	r2, [r1, #12]
 800669a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800669e:	4605      	mov	r5, r0
 80066a0:	0710      	lsls	r0, r2, #28
 80066a2:	460c      	mov	r4, r1
 80066a4:	d458      	bmi.n	8006758 <__sflush_r+0xc0>
 80066a6:	684b      	ldr	r3, [r1, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	dc05      	bgt.n	80066b8 <__sflush_r+0x20>
 80066ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	dc02      	bgt.n	80066b8 <__sflush_r+0x20>
 80066b2:	2000      	movs	r0, #0
 80066b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066ba:	2e00      	cmp	r6, #0
 80066bc:	d0f9      	beq.n	80066b2 <__sflush_r+0x1a>
 80066be:	2300      	movs	r3, #0
 80066c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066c4:	682f      	ldr	r7, [r5, #0]
 80066c6:	602b      	str	r3, [r5, #0]
 80066c8:	d032      	beq.n	8006730 <__sflush_r+0x98>
 80066ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066cc:	89a3      	ldrh	r3, [r4, #12]
 80066ce:	075a      	lsls	r2, r3, #29
 80066d0:	d505      	bpl.n	80066de <__sflush_r+0x46>
 80066d2:	6863      	ldr	r3, [r4, #4]
 80066d4:	1ac0      	subs	r0, r0, r3
 80066d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066d8:	b10b      	cbz	r3, 80066de <__sflush_r+0x46>
 80066da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066dc:	1ac0      	subs	r0, r0, r3
 80066de:	2300      	movs	r3, #0
 80066e0:	4602      	mov	r2, r0
 80066e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066e4:	6a21      	ldr	r1, [r4, #32]
 80066e6:	4628      	mov	r0, r5
 80066e8:	47b0      	blx	r6
 80066ea:	1c43      	adds	r3, r0, #1
 80066ec:	89a3      	ldrh	r3, [r4, #12]
 80066ee:	d106      	bne.n	80066fe <__sflush_r+0x66>
 80066f0:	6829      	ldr	r1, [r5, #0]
 80066f2:	291d      	cmp	r1, #29
 80066f4:	d82c      	bhi.n	8006750 <__sflush_r+0xb8>
 80066f6:	4a2a      	ldr	r2, [pc, #168]	; (80067a0 <__sflush_r+0x108>)
 80066f8:	40ca      	lsrs	r2, r1
 80066fa:	07d6      	lsls	r6, r2, #31
 80066fc:	d528      	bpl.n	8006750 <__sflush_r+0xb8>
 80066fe:	2200      	movs	r2, #0
 8006700:	6062      	str	r2, [r4, #4]
 8006702:	04d9      	lsls	r1, r3, #19
 8006704:	6922      	ldr	r2, [r4, #16]
 8006706:	6022      	str	r2, [r4, #0]
 8006708:	d504      	bpl.n	8006714 <__sflush_r+0x7c>
 800670a:	1c42      	adds	r2, r0, #1
 800670c:	d101      	bne.n	8006712 <__sflush_r+0x7a>
 800670e:	682b      	ldr	r3, [r5, #0]
 8006710:	b903      	cbnz	r3, 8006714 <__sflush_r+0x7c>
 8006712:	6560      	str	r0, [r4, #84]	; 0x54
 8006714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006716:	602f      	str	r7, [r5, #0]
 8006718:	2900      	cmp	r1, #0
 800671a:	d0ca      	beq.n	80066b2 <__sflush_r+0x1a>
 800671c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006720:	4299      	cmp	r1, r3
 8006722:	d002      	beq.n	800672a <__sflush_r+0x92>
 8006724:	4628      	mov	r0, r5
 8006726:	f000 f9d5 	bl	8006ad4 <_free_r>
 800672a:	2000      	movs	r0, #0
 800672c:	6360      	str	r0, [r4, #52]	; 0x34
 800672e:	e7c1      	b.n	80066b4 <__sflush_r+0x1c>
 8006730:	6a21      	ldr	r1, [r4, #32]
 8006732:	2301      	movs	r3, #1
 8006734:	4628      	mov	r0, r5
 8006736:	47b0      	blx	r6
 8006738:	1c41      	adds	r1, r0, #1
 800673a:	d1c7      	bne.n	80066cc <__sflush_r+0x34>
 800673c:	682b      	ldr	r3, [r5, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d0c4      	beq.n	80066cc <__sflush_r+0x34>
 8006742:	2b1d      	cmp	r3, #29
 8006744:	d001      	beq.n	800674a <__sflush_r+0xb2>
 8006746:	2b16      	cmp	r3, #22
 8006748:	d101      	bne.n	800674e <__sflush_r+0xb6>
 800674a:	602f      	str	r7, [r5, #0]
 800674c:	e7b1      	b.n	80066b2 <__sflush_r+0x1a>
 800674e:	89a3      	ldrh	r3, [r4, #12]
 8006750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006754:	81a3      	strh	r3, [r4, #12]
 8006756:	e7ad      	b.n	80066b4 <__sflush_r+0x1c>
 8006758:	690f      	ldr	r7, [r1, #16]
 800675a:	2f00      	cmp	r7, #0
 800675c:	d0a9      	beq.n	80066b2 <__sflush_r+0x1a>
 800675e:	0793      	lsls	r3, r2, #30
 8006760:	680e      	ldr	r6, [r1, #0]
 8006762:	bf08      	it	eq
 8006764:	694b      	ldreq	r3, [r1, #20]
 8006766:	600f      	str	r7, [r1, #0]
 8006768:	bf18      	it	ne
 800676a:	2300      	movne	r3, #0
 800676c:	eba6 0807 	sub.w	r8, r6, r7
 8006770:	608b      	str	r3, [r1, #8]
 8006772:	f1b8 0f00 	cmp.w	r8, #0
 8006776:	dd9c      	ble.n	80066b2 <__sflush_r+0x1a>
 8006778:	6a21      	ldr	r1, [r4, #32]
 800677a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800677c:	4643      	mov	r3, r8
 800677e:	463a      	mov	r2, r7
 8006780:	4628      	mov	r0, r5
 8006782:	47b0      	blx	r6
 8006784:	2800      	cmp	r0, #0
 8006786:	dc06      	bgt.n	8006796 <__sflush_r+0xfe>
 8006788:	89a3      	ldrh	r3, [r4, #12]
 800678a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800678e:	81a3      	strh	r3, [r4, #12]
 8006790:	f04f 30ff 	mov.w	r0, #4294967295
 8006794:	e78e      	b.n	80066b4 <__sflush_r+0x1c>
 8006796:	4407      	add	r7, r0
 8006798:	eba8 0800 	sub.w	r8, r8, r0
 800679c:	e7e9      	b.n	8006772 <__sflush_r+0xda>
 800679e:	bf00      	nop
 80067a0:	20400001 	.word	0x20400001

080067a4 <_fflush_r>:
 80067a4:	b538      	push	{r3, r4, r5, lr}
 80067a6:	690b      	ldr	r3, [r1, #16]
 80067a8:	4605      	mov	r5, r0
 80067aa:	460c      	mov	r4, r1
 80067ac:	b913      	cbnz	r3, 80067b4 <_fflush_r+0x10>
 80067ae:	2500      	movs	r5, #0
 80067b0:	4628      	mov	r0, r5
 80067b2:	bd38      	pop	{r3, r4, r5, pc}
 80067b4:	b118      	cbz	r0, 80067be <_fflush_r+0x1a>
 80067b6:	6983      	ldr	r3, [r0, #24]
 80067b8:	b90b      	cbnz	r3, 80067be <_fflush_r+0x1a>
 80067ba:	f000 f887 	bl	80068cc <__sinit>
 80067be:	4b14      	ldr	r3, [pc, #80]	; (8006810 <_fflush_r+0x6c>)
 80067c0:	429c      	cmp	r4, r3
 80067c2:	d11b      	bne.n	80067fc <_fflush_r+0x58>
 80067c4:	686c      	ldr	r4, [r5, #4]
 80067c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d0ef      	beq.n	80067ae <_fflush_r+0xa>
 80067ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067d0:	07d0      	lsls	r0, r2, #31
 80067d2:	d404      	bmi.n	80067de <_fflush_r+0x3a>
 80067d4:	0599      	lsls	r1, r3, #22
 80067d6:	d402      	bmi.n	80067de <_fflush_r+0x3a>
 80067d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067da:	f000 f915 	bl	8006a08 <__retarget_lock_acquire_recursive>
 80067de:	4628      	mov	r0, r5
 80067e0:	4621      	mov	r1, r4
 80067e2:	f7ff ff59 	bl	8006698 <__sflush_r>
 80067e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067e8:	07da      	lsls	r2, r3, #31
 80067ea:	4605      	mov	r5, r0
 80067ec:	d4e0      	bmi.n	80067b0 <_fflush_r+0xc>
 80067ee:	89a3      	ldrh	r3, [r4, #12]
 80067f0:	059b      	lsls	r3, r3, #22
 80067f2:	d4dd      	bmi.n	80067b0 <_fflush_r+0xc>
 80067f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067f6:	f000 f908 	bl	8006a0a <__retarget_lock_release_recursive>
 80067fa:	e7d9      	b.n	80067b0 <_fflush_r+0xc>
 80067fc:	4b05      	ldr	r3, [pc, #20]	; (8006814 <_fflush_r+0x70>)
 80067fe:	429c      	cmp	r4, r3
 8006800:	d101      	bne.n	8006806 <_fflush_r+0x62>
 8006802:	68ac      	ldr	r4, [r5, #8]
 8006804:	e7df      	b.n	80067c6 <_fflush_r+0x22>
 8006806:	4b04      	ldr	r3, [pc, #16]	; (8006818 <_fflush_r+0x74>)
 8006808:	429c      	cmp	r4, r3
 800680a:	bf08      	it	eq
 800680c:	68ec      	ldreq	r4, [r5, #12]
 800680e:	e7da      	b.n	80067c6 <_fflush_r+0x22>
 8006810:	0800789c 	.word	0x0800789c
 8006814:	080078bc 	.word	0x080078bc
 8006818:	0800787c 	.word	0x0800787c

0800681c <std>:
 800681c:	2300      	movs	r3, #0
 800681e:	b510      	push	{r4, lr}
 8006820:	4604      	mov	r4, r0
 8006822:	e9c0 3300 	strd	r3, r3, [r0]
 8006826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800682a:	6083      	str	r3, [r0, #8]
 800682c:	8181      	strh	r1, [r0, #12]
 800682e:	6643      	str	r3, [r0, #100]	; 0x64
 8006830:	81c2      	strh	r2, [r0, #14]
 8006832:	6183      	str	r3, [r0, #24]
 8006834:	4619      	mov	r1, r3
 8006836:	2208      	movs	r2, #8
 8006838:	305c      	adds	r0, #92	; 0x5c
 800683a:	f7ff fda7 	bl	800638c <memset>
 800683e:	4b05      	ldr	r3, [pc, #20]	; (8006854 <std+0x38>)
 8006840:	6263      	str	r3, [r4, #36]	; 0x24
 8006842:	4b05      	ldr	r3, [pc, #20]	; (8006858 <std+0x3c>)
 8006844:	62a3      	str	r3, [r4, #40]	; 0x28
 8006846:	4b05      	ldr	r3, [pc, #20]	; (800685c <std+0x40>)
 8006848:	62e3      	str	r3, [r4, #44]	; 0x2c
 800684a:	4b05      	ldr	r3, [pc, #20]	; (8006860 <std+0x44>)
 800684c:	6224      	str	r4, [r4, #32]
 800684e:	6323      	str	r3, [r4, #48]	; 0x30
 8006850:	bd10      	pop	{r4, pc}
 8006852:	bf00      	nop
 8006854:	080074dd 	.word	0x080074dd
 8006858:	080074ff 	.word	0x080074ff
 800685c:	08007537 	.word	0x08007537
 8006860:	0800755b 	.word	0x0800755b

08006864 <_cleanup_r>:
 8006864:	4901      	ldr	r1, [pc, #4]	; (800686c <_cleanup_r+0x8>)
 8006866:	f000 b8af 	b.w	80069c8 <_fwalk_reent>
 800686a:	bf00      	nop
 800686c:	080067a5 	.word	0x080067a5

08006870 <__sfmoreglue>:
 8006870:	b570      	push	{r4, r5, r6, lr}
 8006872:	1e4a      	subs	r2, r1, #1
 8006874:	2568      	movs	r5, #104	; 0x68
 8006876:	4355      	muls	r5, r2
 8006878:	460e      	mov	r6, r1
 800687a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800687e:	f000 f979 	bl	8006b74 <_malloc_r>
 8006882:	4604      	mov	r4, r0
 8006884:	b140      	cbz	r0, 8006898 <__sfmoreglue+0x28>
 8006886:	2100      	movs	r1, #0
 8006888:	e9c0 1600 	strd	r1, r6, [r0]
 800688c:	300c      	adds	r0, #12
 800688e:	60a0      	str	r0, [r4, #8]
 8006890:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006894:	f7ff fd7a 	bl	800638c <memset>
 8006898:	4620      	mov	r0, r4
 800689a:	bd70      	pop	{r4, r5, r6, pc}

0800689c <__sfp_lock_acquire>:
 800689c:	4801      	ldr	r0, [pc, #4]	; (80068a4 <__sfp_lock_acquire+0x8>)
 800689e:	f000 b8b3 	b.w	8006a08 <__retarget_lock_acquire_recursive>
 80068a2:	bf00      	nop
 80068a4:	2000035c 	.word	0x2000035c

080068a8 <__sfp_lock_release>:
 80068a8:	4801      	ldr	r0, [pc, #4]	; (80068b0 <__sfp_lock_release+0x8>)
 80068aa:	f000 b8ae 	b.w	8006a0a <__retarget_lock_release_recursive>
 80068ae:	bf00      	nop
 80068b0:	2000035c 	.word	0x2000035c

080068b4 <__sinit_lock_acquire>:
 80068b4:	4801      	ldr	r0, [pc, #4]	; (80068bc <__sinit_lock_acquire+0x8>)
 80068b6:	f000 b8a7 	b.w	8006a08 <__retarget_lock_acquire_recursive>
 80068ba:	bf00      	nop
 80068bc:	20000357 	.word	0x20000357

080068c0 <__sinit_lock_release>:
 80068c0:	4801      	ldr	r0, [pc, #4]	; (80068c8 <__sinit_lock_release+0x8>)
 80068c2:	f000 b8a2 	b.w	8006a0a <__retarget_lock_release_recursive>
 80068c6:	bf00      	nop
 80068c8:	20000357 	.word	0x20000357

080068cc <__sinit>:
 80068cc:	b510      	push	{r4, lr}
 80068ce:	4604      	mov	r4, r0
 80068d0:	f7ff fff0 	bl	80068b4 <__sinit_lock_acquire>
 80068d4:	69a3      	ldr	r3, [r4, #24]
 80068d6:	b11b      	cbz	r3, 80068e0 <__sinit+0x14>
 80068d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068dc:	f7ff bff0 	b.w	80068c0 <__sinit_lock_release>
 80068e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068e4:	6523      	str	r3, [r4, #80]	; 0x50
 80068e6:	4b13      	ldr	r3, [pc, #76]	; (8006934 <__sinit+0x68>)
 80068e8:	4a13      	ldr	r2, [pc, #76]	; (8006938 <__sinit+0x6c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80068ee:	42a3      	cmp	r3, r4
 80068f0:	bf04      	itt	eq
 80068f2:	2301      	moveq	r3, #1
 80068f4:	61a3      	streq	r3, [r4, #24]
 80068f6:	4620      	mov	r0, r4
 80068f8:	f000 f820 	bl	800693c <__sfp>
 80068fc:	6060      	str	r0, [r4, #4]
 80068fe:	4620      	mov	r0, r4
 8006900:	f000 f81c 	bl	800693c <__sfp>
 8006904:	60a0      	str	r0, [r4, #8]
 8006906:	4620      	mov	r0, r4
 8006908:	f000 f818 	bl	800693c <__sfp>
 800690c:	2200      	movs	r2, #0
 800690e:	60e0      	str	r0, [r4, #12]
 8006910:	2104      	movs	r1, #4
 8006912:	6860      	ldr	r0, [r4, #4]
 8006914:	f7ff ff82 	bl	800681c <std>
 8006918:	68a0      	ldr	r0, [r4, #8]
 800691a:	2201      	movs	r2, #1
 800691c:	2109      	movs	r1, #9
 800691e:	f7ff ff7d 	bl	800681c <std>
 8006922:	68e0      	ldr	r0, [r4, #12]
 8006924:	2202      	movs	r2, #2
 8006926:	2112      	movs	r1, #18
 8006928:	f7ff ff78 	bl	800681c <std>
 800692c:	2301      	movs	r3, #1
 800692e:	61a3      	str	r3, [r4, #24]
 8006930:	e7d2      	b.n	80068d8 <__sinit+0xc>
 8006932:	bf00      	nop
 8006934:	08007878 	.word	0x08007878
 8006938:	08006865 	.word	0x08006865

0800693c <__sfp>:
 800693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693e:	4607      	mov	r7, r0
 8006940:	f7ff ffac 	bl	800689c <__sfp_lock_acquire>
 8006944:	4b1e      	ldr	r3, [pc, #120]	; (80069c0 <__sfp+0x84>)
 8006946:	681e      	ldr	r6, [r3, #0]
 8006948:	69b3      	ldr	r3, [r6, #24]
 800694a:	b913      	cbnz	r3, 8006952 <__sfp+0x16>
 800694c:	4630      	mov	r0, r6
 800694e:	f7ff ffbd 	bl	80068cc <__sinit>
 8006952:	3648      	adds	r6, #72	; 0x48
 8006954:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006958:	3b01      	subs	r3, #1
 800695a:	d503      	bpl.n	8006964 <__sfp+0x28>
 800695c:	6833      	ldr	r3, [r6, #0]
 800695e:	b30b      	cbz	r3, 80069a4 <__sfp+0x68>
 8006960:	6836      	ldr	r6, [r6, #0]
 8006962:	e7f7      	b.n	8006954 <__sfp+0x18>
 8006964:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006968:	b9d5      	cbnz	r5, 80069a0 <__sfp+0x64>
 800696a:	4b16      	ldr	r3, [pc, #88]	; (80069c4 <__sfp+0x88>)
 800696c:	60e3      	str	r3, [r4, #12]
 800696e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006972:	6665      	str	r5, [r4, #100]	; 0x64
 8006974:	f000 f847 	bl	8006a06 <__retarget_lock_init_recursive>
 8006978:	f7ff ff96 	bl	80068a8 <__sfp_lock_release>
 800697c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006980:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006984:	6025      	str	r5, [r4, #0]
 8006986:	61a5      	str	r5, [r4, #24]
 8006988:	2208      	movs	r2, #8
 800698a:	4629      	mov	r1, r5
 800698c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006990:	f7ff fcfc 	bl	800638c <memset>
 8006994:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006998:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800699c:	4620      	mov	r0, r4
 800699e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069a0:	3468      	adds	r4, #104	; 0x68
 80069a2:	e7d9      	b.n	8006958 <__sfp+0x1c>
 80069a4:	2104      	movs	r1, #4
 80069a6:	4638      	mov	r0, r7
 80069a8:	f7ff ff62 	bl	8006870 <__sfmoreglue>
 80069ac:	4604      	mov	r4, r0
 80069ae:	6030      	str	r0, [r6, #0]
 80069b0:	2800      	cmp	r0, #0
 80069b2:	d1d5      	bne.n	8006960 <__sfp+0x24>
 80069b4:	f7ff ff78 	bl	80068a8 <__sfp_lock_release>
 80069b8:	230c      	movs	r3, #12
 80069ba:	603b      	str	r3, [r7, #0]
 80069bc:	e7ee      	b.n	800699c <__sfp+0x60>
 80069be:	bf00      	nop
 80069c0:	08007878 	.word	0x08007878
 80069c4:	ffff0001 	.word	0xffff0001

080069c8 <_fwalk_reent>:
 80069c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069cc:	4606      	mov	r6, r0
 80069ce:	4688      	mov	r8, r1
 80069d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069d4:	2700      	movs	r7, #0
 80069d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069da:	f1b9 0901 	subs.w	r9, r9, #1
 80069de:	d505      	bpl.n	80069ec <_fwalk_reent+0x24>
 80069e0:	6824      	ldr	r4, [r4, #0]
 80069e2:	2c00      	cmp	r4, #0
 80069e4:	d1f7      	bne.n	80069d6 <_fwalk_reent+0xe>
 80069e6:	4638      	mov	r0, r7
 80069e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ec:	89ab      	ldrh	r3, [r5, #12]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d907      	bls.n	8006a02 <_fwalk_reent+0x3a>
 80069f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069f6:	3301      	adds	r3, #1
 80069f8:	d003      	beq.n	8006a02 <_fwalk_reent+0x3a>
 80069fa:	4629      	mov	r1, r5
 80069fc:	4630      	mov	r0, r6
 80069fe:	47c0      	blx	r8
 8006a00:	4307      	orrs	r7, r0
 8006a02:	3568      	adds	r5, #104	; 0x68
 8006a04:	e7e9      	b.n	80069da <_fwalk_reent+0x12>

08006a06 <__retarget_lock_init_recursive>:
 8006a06:	4770      	bx	lr

08006a08 <__retarget_lock_acquire_recursive>:
 8006a08:	4770      	bx	lr

08006a0a <__retarget_lock_release_recursive>:
 8006a0a:	4770      	bx	lr

08006a0c <__swhatbuf_r>:
 8006a0c:	b570      	push	{r4, r5, r6, lr}
 8006a0e:	460e      	mov	r6, r1
 8006a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a14:	2900      	cmp	r1, #0
 8006a16:	b096      	sub	sp, #88	; 0x58
 8006a18:	4614      	mov	r4, r2
 8006a1a:	461d      	mov	r5, r3
 8006a1c:	da07      	bge.n	8006a2e <__swhatbuf_r+0x22>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	602b      	str	r3, [r5, #0]
 8006a22:	89b3      	ldrh	r3, [r6, #12]
 8006a24:	061a      	lsls	r2, r3, #24
 8006a26:	d410      	bmi.n	8006a4a <__swhatbuf_r+0x3e>
 8006a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a2c:	e00e      	b.n	8006a4c <__swhatbuf_r+0x40>
 8006a2e:	466a      	mov	r2, sp
 8006a30:	f000 fdba 	bl	80075a8 <_fstat_r>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	dbf2      	blt.n	8006a1e <__swhatbuf_r+0x12>
 8006a38:	9a01      	ldr	r2, [sp, #4]
 8006a3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a42:	425a      	negs	r2, r3
 8006a44:	415a      	adcs	r2, r3
 8006a46:	602a      	str	r2, [r5, #0]
 8006a48:	e7ee      	b.n	8006a28 <__swhatbuf_r+0x1c>
 8006a4a:	2340      	movs	r3, #64	; 0x40
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	6023      	str	r3, [r4, #0]
 8006a50:	b016      	add	sp, #88	; 0x58
 8006a52:	bd70      	pop	{r4, r5, r6, pc}

08006a54 <__smakebuf_r>:
 8006a54:	898b      	ldrh	r3, [r1, #12]
 8006a56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a58:	079d      	lsls	r5, r3, #30
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	460c      	mov	r4, r1
 8006a5e:	d507      	bpl.n	8006a70 <__smakebuf_r+0x1c>
 8006a60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a64:	6023      	str	r3, [r4, #0]
 8006a66:	6123      	str	r3, [r4, #16]
 8006a68:	2301      	movs	r3, #1
 8006a6a:	6163      	str	r3, [r4, #20]
 8006a6c:	b002      	add	sp, #8
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}
 8006a70:	ab01      	add	r3, sp, #4
 8006a72:	466a      	mov	r2, sp
 8006a74:	f7ff ffca 	bl	8006a0c <__swhatbuf_r>
 8006a78:	9900      	ldr	r1, [sp, #0]
 8006a7a:	4605      	mov	r5, r0
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	f000 f879 	bl	8006b74 <_malloc_r>
 8006a82:	b948      	cbnz	r0, 8006a98 <__smakebuf_r+0x44>
 8006a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a88:	059a      	lsls	r2, r3, #22
 8006a8a:	d4ef      	bmi.n	8006a6c <__smakebuf_r+0x18>
 8006a8c:	f023 0303 	bic.w	r3, r3, #3
 8006a90:	f043 0302 	orr.w	r3, r3, #2
 8006a94:	81a3      	strh	r3, [r4, #12]
 8006a96:	e7e3      	b.n	8006a60 <__smakebuf_r+0xc>
 8006a98:	4b0d      	ldr	r3, [pc, #52]	; (8006ad0 <__smakebuf_r+0x7c>)
 8006a9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a9c:	89a3      	ldrh	r3, [r4, #12]
 8006a9e:	6020      	str	r0, [r4, #0]
 8006aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa4:	81a3      	strh	r3, [r4, #12]
 8006aa6:	9b00      	ldr	r3, [sp, #0]
 8006aa8:	6163      	str	r3, [r4, #20]
 8006aaa:	9b01      	ldr	r3, [sp, #4]
 8006aac:	6120      	str	r0, [r4, #16]
 8006aae:	b15b      	cbz	r3, 8006ac8 <__smakebuf_r+0x74>
 8006ab0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	f000 fd89 	bl	80075cc <_isatty_r>
 8006aba:	b128      	cbz	r0, 8006ac8 <__smakebuf_r+0x74>
 8006abc:	89a3      	ldrh	r3, [r4, #12]
 8006abe:	f023 0303 	bic.w	r3, r3, #3
 8006ac2:	f043 0301 	orr.w	r3, r3, #1
 8006ac6:	81a3      	strh	r3, [r4, #12]
 8006ac8:	89a0      	ldrh	r0, [r4, #12]
 8006aca:	4305      	orrs	r5, r0
 8006acc:	81a5      	strh	r5, [r4, #12]
 8006ace:	e7cd      	b.n	8006a6c <__smakebuf_r+0x18>
 8006ad0:	08006865 	.word	0x08006865

08006ad4 <_free_r>:
 8006ad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ad6:	2900      	cmp	r1, #0
 8006ad8:	d048      	beq.n	8006b6c <_free_r+0x98>
 8006ada:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ade:	9001      	str	r0, [sp, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ae6:	bfb8      	it	lt
 8006ae8:	18e4      	addlt	r4, r4, r3
 8006aea:	f000 fdb9 	bl	8007660 <__malloc_lock>
 8006aee:	4a20      	ldr	r2, [pc, #128]	; (8006b70 <_free_r+0x9c>)
 8006af0:	9801      	ldr	r0, [sp, #4]
 8006af2:	6813      	ldr	r3, [r2, #0]
 8006af4:	4615      	mov	r5, r2
 8006af6:	b933      	cbnz	r3, 8006b06 <_free_r+0x32>
 8006af8:	6063      	str	r3, [r4, #4]
 8006afa:	6014      	str	r4, [r2, #0]
 8006afc:	b003      	add	sp, #12
 8006afe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b02:	f000 bdb3 	b.w	800766c <__malloc_unlock>
 8006b06:	42a3      	cmp	r3, r4
 8006b08:	d90b      	bls.n	8006b22 <_free_r+0x4e>
 8006b0a:	6821      	ldr	r1, [r4, #0]
 8006b0c:	1862      	adds	r2, r4, r1
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	bf04      	itt	eq
 8006b12:	681a      	ldreq	r2, [r3, #0]
 8006b14:	685b      	ldreq	r3, [r3, #4]
 8006b16:	6063      	str	r3, [r4, #4]
 8006b18:	bf04      	itt	eq
 8006b1a:	1852      	addeq	r2, r2, r1
 8006b1c:	6022      	streq	r2, [r4, #0]
 8006b1e:	602c      	str	r4, [r5, #0]
 8006b20:	e7ec      	b.n	8006afc <_free_r+0x28>
 8006b22:	461a      	mov	r2, r3
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	b10b      	cbz	r3, 8006b2c <_free_r+0x58>
 8006b28:	42a3      	cmp	r3, r4
 8006b2a:	d9fa      	bls.n	8006b22 <_free_r+0x4e>
 8006b2c:	6811      	ldr	r1, [r2, #0]
 8006b2e:	1855      	adds	r5, r2, r1
 8006b30:	42a5      	cmp	r5, r4
 8006b32:	d10b      	bne.n	8006b4c <_free_r+0x78>
 8006b34:	6824      	ldr	r4, [r4, #0]
 8006b36:	4421      	add	r1, r4
 8006b38:	1854      	adds	r4, r2, r1
 8006b3a:	42a3      	cmp	r3, r4
 8006b3c:	6011      	str	r1, [r2, #0]
 8006b3e:	d1dd      	bne.n	8006afc <_free_r+0x28>
 8006b40:	681c      	ldr	r4, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	6053      	str	r3, [r2, #4]
 8006b46:	4421      	add	r1, r4
 8006b48:	6011      	str	r1, [r2, #0]
 8006b4a:	e7d7      	b.n	8006afc <_free_r+0x28>
 8006b4c:	d902      	bls.n	8006b54 <_free_r+0x80>
 8006b4e:	230c      	movs	r3, #12
 8006b50:	6003      	str	r3, [r0, #0]
 8006b52:	e7d3      	b.n	8006afc <_free_r+0x28>
 8006b54:	6825      	ldr	r5, [r4, #0]
 8006b56:	1961      	adds	r1, r4, r5
 8006b58:	428b      	cmp	r3, r1
 8006b5a:	bf04      	itt	eq
 8006b5c:	6819      	ldreq	r1, [r3, #0]
 8006b5e:	685b      	ldreq	r3, [r3, #4]
 8006b60:	6063      	str	r3, [r4, #4]
 8006b62:	bf04      	itt	eq
 8006b64:	1949      	addeq	r1, r1, r5
 8006b66:	6021      	streq	r1, [r4, #0]
 8006b68:	6054      	str	r4, [r2, #4]
 8006b6a:	e7c7      	b.n	8006afc <_free_r+0x28>
 8006b6c:	b003      	add	sp, #12
 8006b6e:	bd30      	pop	{r4, r5, pc}
 8006b70:	200000fc 	.word	0x200000fc

08006b74 <_malloc_r>:
 8006b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b76:	1ccd      	adds	r5, r1, #3
 8006b78:	f025 0503 	bic.w	r5, r5, #3
 8006b7c:	3508      	adds	r5, #8
 8006b7e:	2d0c      	cmp	r5, #12
 8006b80:	bf38      	it	cc
 8006b82:	250c      	movcc	r5, #12
 8006b84:	2d00      	cmp	r5, #0
 8006b86:	4606      	mov	r6, r0
 8006b88:	db01      	blt.n	8006b8e <_malloc_r+0x1a>
 8006b8a:	42a9      	cmp	r1, r5
 8006b8c:	d903      	bls.n	8006b96 <_malloc_r+0x22>
 8006b8e:	230c      	movs	r3, #12
 8006b90:	6033      	str	r3, [r6, #0]
 8006b92:	2000      	movs	r0, #0
 8006b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b96:	f000 fd63 	bl	8007660 <__malloc_lock>
 8006b9a:	4921      	ldr	r1, [pc, #132]	; (8006c20 <_malloc_r+0xac>)
 8006b9c:	680a      	ldr	r2, [r1, #0]
 8006b9e:	4614      	mov	r4, r2
 8006ba0:	b99c      	cbnz	r4, 8006bca <_malloc_r+0x56>
 8006ba2:	4f20      	ldr	r7, [pc, #128]	; (8006c24 <_malloc_r+0xb0>)
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	b923      	cbnz	r3, 8006bb2 <_malloc_r+0x3e>
 8006ba8:	4621      	mov	r1, r4
 8006baa:	4630      	mov	r0, r6
 8006bac:	f000 fc86 	bl	80074bc <_sbrk_r>
 8006bb0:	6038      	str	r0, [r7, #0]
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	f000 fc81 	bl	80074bc <_sbrk_r>
 8006bba:	1c43      	adds	r3, r0, #1
 8006bbc:	d123      	bne.n	8006c06 <_malloc_r+0x92>
 8006bbe:	230c      	movs	r3, #12
 8006bc0:	6033      	str	r3, [r6, #0]
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	f000 fd52 	bl	800766c <__malloc_unlock>
 8006bc8:	e7e3      	b.n	8006b92 <_malloc_r+0x1e>
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	1b5b      	subs	r3, r3, r5
 8006bce:	d417      	bmi.n	8006c00 <_malloc_r+0x8c>
 8006bd0:	2b0b      	cmp	r3, #11
 8006bd2:	d903      	bls.n	8006bdc <_malloc_r+0x68>
 8006bd4:	6023      	str	r3, [r4, #0]
 8006bd6:	441c      	add	r4, r3
 8006bd8:	6025      	str	r5, [r4, #0]
 8006bda:	e004      	b.n	8006be6 <_malloc_r+0x72>
 8006bdc:	6863      	ldr	r3, [r4, #4]
 8006bde:	42a2      	cmp	r2, r4
 8006be0:	bf0c      	ite	eq
 8006be2:	600b      	streq	r3, [r1, #0]
 8006be4:	6053      	strne	r3, [r2, #4]
 8006be6:	4630      	mov	r0, r6
 8006be8:	f000 fd40 	bl	800766c <__malloc_unlock>
 8006bec:	f104 000b 	add.w	r0, r4, #11
 8006bf0:	1d23      	adds	r3, r4, #4
 8006bf2:	f020 0007 	bic.w	r0, r0, #7
 8006bf6:	1ac2      	subs	r2, r0, r3
 8006bf8:	d0cc      	beq.n	8006b94 <_malloc_r+0x20>
 8006bfa:	1a1b      	subs	r3, r3, r0
 8006bfc:	50a3      	str	r3, [r4, r2]
 8006bfe:	e7c9      	b.n	8006b94 <_malloc_r+0x20>
 8006c00:	4622      	mov	r2, r4
 8006c02:	6864      	ldr	r4, [r4, #4]
 8006c04:	e7cc      	b.n	8006ba0 <_malloc_r+0x2c>
 8006c06:	1cc4      	adds	r4, r0, #3
 8006c08:	f024 0403 	bic.w	r4, r4, #3
 8006c0c:	42a0      	cmp	r0, r4
 8006c0e:	d0e3      	beq.n	8006bd8 <_malloc_r+0x64>
 8006c10:	1a21      	subs	r1, r4, r0
 8006c12:	4630      	mov	r0, r6
 8006c14:	f000 fc52 	bl	80074bc <_sbrk_r>
 8006c18:	3001      	adds	r0, #1
 8006c1a:	d1dd      	bne.n	8006bd8 <_malloc_r+0x64>
 8006c1c:	e7cf      	b.n	8006bbe <_malloc_r+0x4a>
 8006c1e:	bf00      	nop
 8006c20:	200000fc 	.word	0x200000fc
 8006c24:	20000100 	.word	0x20000100

08006c28 <__ssputs_r>:
 8006c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c2c:	688e      	ldr	r6, [r1, #8]
 8006c2e:	429e      	cmp	r6, r3
 8006c30:	4682      	mov	sl, r0
 8006c32:	460c      	mov	r4, r1
 8006c34:	4690      	mov	r8, r2
 8006c36:	461f      	mov	r7, r3
 8006c38:	d838      	bhi.n	8006cac <__ssputs_r+0x84>
 8006c3a:	898a      	ldrh	r2, [r1, #12]
 8006c3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c40:	d032      	beq.n	8006ca8 <__ssputs_r+0x80>
 8006c42:	6825      	ldr	r5, [r4, #0]
 8006c44:	6909      	ldr	r1, [r1, #16]
 8006c46:	eba5 0901 	sub.w	r9, r5, r1
 8006c4a:	6965      	ldr	r5, [r4, #20]
 8006c4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c54:	3301      	adds	r3, #1
 8006c56:	444b      	add	r3, r9
 8006c58:	106d      	asrs	r5, r5, #1
 8006c5a:	429d      	cmp	r5, r3
 8006c5c:	bf38      	it	cc
 8006c5e:	461d      	movcc	r5, r3
 8006c60:	0553      	lsls	r3, r2, #21
 8006c62:	d531      	bpl.n	8006cc8 <__ssputs_r+0xa0>
 8006c64:	4629      	mov	r1, r5
 8006c66:	f7ff ff85 	bl	8006b74 <_malloc_r>
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	b950      	cbnz	r0, 8006c84 <__ssputs_r+0x5c>
 8006c6e:	230c      	movs	r3, #12
 8006c70:	f8ca 3000 	str.w	r3, [sl]
 8006c74:	89a3      	ldrh	r3, [r4, #12]
 8006c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c7a:	81a3      	strh	r3, [r4, #12]
 8006c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c84:	6921      	ldr	r1, [r4, #16]
 8006c86:	464a      	mov	r2, r9
 8006c88:	f000 fcc2 	bl	8007610 <memcpy>
 8006c8c:	89a3      	ldrh	r3, [r4, #12]
 8006c8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c96:	81a3      	strh	r3, [r4, #12]
 8006c98:	6126      	str	r6, [r4, #16]
 8006c9a:	6165      	str	r5, [r4, #20]
 8006c9c:	444e      	add	r6, r9
 8006c9e:	eba5 0509 	sub.w	r5, r5, r9
 8006ca2:	6026      	str	r6, [r4, #0]
 8006ca4:	60a5      	str	r5, [r4, #8]
 8006ca6:	463e      	mov	r6, r7
 8006ca8:	42be      	cmp	r6, r7
 8006caa:	d900      	bls.n	8006cae <__ssputs_r+0x86>
 8006cac:	463e      	mov	r6, r7
 8006cae:	4632      	mov	r2, r6
 8006cb0:	6820      	ldr	r0, [r4, #0]
 8006cb2:	4641      	mov	r1, r8
 8006cb4:	f000 fcba 	bl	800762c <memmove>
 8006cb8:	68a3      	ldr	r3, [r4, #8]
 8006cba:	6822      	ldr	r2, [r4, #0]
 8006cbc:	1b9b      	subs	r3, r3, r6
 8006cbe:	4432      	add	r2, r6
 8006cc0:	60a3      	str	r3, [r4, #8]
 8006cc2:	6022      	str	r2, [r4, #0]
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	e7db      	b.n	8006c80 <__ssputs_r+0x58>
 8006cc8:	462a      	mov	r2, r5
 8006cca:	f000 fcd5 	bl	8007678 <_realloc_r>
 8006cce:	4606      	mov	r6, r0
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	d1e1      	bne.n	8006c98 <__ssputs_r+0x70>
 8006cd4:	6921      	ldr	r1, [r4, #16]
 8006cd6:	4650      	mov	r0, sl
 8006cd8:	f7ff fefc 	bl	8006ad4 <_free_r>
 8006cdc:	e7c7      	b.n	8006c6e <__ssputs_r+0x46>
	...

08006ce0 <_svfiprintf_r>:
 8006ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce4:	4698      	mov	r8, r3
 8006ce6:	898b      	ldrh	r3, [r1, #12]
 8006ce8:	061b      	lsls	r3, r3, #24
 8006cea:	b09d      	sub	sp, #116	; 0x74
 8006cec:	4607      	mov	r7, r0
 8006cee:	460d      	mov	r5, r1
 8006cf0:	4614      	mov	r4, r2
 8006cf2:	d50e      	bpl.n	8006d12 <_svfiprintf_r+0x32>
 8006cf4:	690b      	ldr	r3, [r1, #16]
 8006cf6:	b963      	cbnz	r3, 8006d12 <_svfiprintf_r+0x32>
 8006cf8:	2140      	movs	r1, #64	; 0x40
 8006cfa:	f7ff ff3b 	bl	8006b74 <_malloc_r>
 8006cfe:	6028      	str	r0, [r5, #0]
 8006d00:	6128      	str	r0, [r5, #16]
 8006d02:	b920      	cbnz	r0, 8006d0e <_svfiprintf_r+0x2e>
 8006d04:	230c      	movs	r3, #12
 8006d06:	603b      	str	r3, [r7, #0]
 8006d08:	f04f 30ff 	mov.w	r0, #4294967295
 8006d0c:	e0d1      	b.n	8006eb2 <_svfiprintf_r+0x1d2>
 8006d0e:	2340      	movs	r3, #64	; 0x40
 8006d10:	616b      	str	r3, [r5, #20]
 8006d12:	2300      	movs	r3, #0
 8006d14:	9309      	str	r3, [sp, #36]	; 0x24
 8006d16:	2320      	movs	r3, #32
 8006d18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d20:	2330      	movs	r3, #48	; 0x30
 8006d22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006ecc <_svfiprintf_r+0x1ec>
 8006d26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d2a:	f04f 0901 	mov.w	r9, #1
 8006d2e:	4623      	mov	r3, r4
 8006d30:	469a      	mov	sl, r3
 8006d32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d36:	b10a      	cbz	r2, 8006d3c <_svfiprintf_r+0x5c>
 8006d38:	2a25      	cmp	r2, #37	; 0x25
 8006d3a:	d1f9      	bne.n	8006d30 <_svfiprintf_r+0x50>
 8006d3c:	ebba 0b04 	subs.w	fp, sl, r4
 8006d40:	d00b      	beq.n	8006d5a <_svfiprintf_r+0x7a>
 8006d42:	465b      	mov	r3, fp
 8006d44:	4622      	mov	r2, r4
 8006d46:	4629      	mov	r1, r5
 8006d48:	4638      	mov	r0, r7
 8006d4a:	f7ff ff6d 	bl	8006c28 <__ssputs_r>
 8006d4e:	3001      	adds	r0, #1
 8006d50:	f000 80aa 	beq.w	8006ea8 <_svfiprintf_r+0x1c8>
 8006d54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d56:	445a      	add	r2, fp
 8006d58:	9209      	str	r2, [sp, #36]	; 0x24
 8006d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 80a2 	beq.w	8006ea8 <_svfiprintf_r+0x1c8>
 8006d64:	2300      	movs	r3, #0
 8006d66:	f04f 32ff 	mov.w	r2, #4294967295
 8006d6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d6e:	f10a 0a01 	add.w	sl, sl, #1
 8006d72:	9304      	str	r3, [sp, #16]
 8006d74:	9307      	str	r3, [sp, #28]
 8006d76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d7a:	931a      	str	r3, [sp, #104]	; 0x68
 8006d7c:	4654      	mov	r4, sl
 8006d7e:	2205      	movs	r2, #5
 8006d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d84:	4851      	ldr	r0, [pc, #324]	; (8006ecc <_svfiprintf_r+0x1ec>)
 8006d86:	f7f9 fa3b 	bl	8000200 <memchr>
 8006d8a:	9a04      	ldr	r2, [sp, #16]
 8006d8c:	b9d8      	cbnz	r0, 8006dc6 <_svfiprintf_r+0xe6>
 8006d8e:	06d0      	lsls	r0, r2, #27
 8006d90:	bf44      	itt	mi
 8006d92:	2320      	movmi	r3, #32
 8006d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d98:	0711      	lsls	r1, r2, #28
 8006d9a:	bf44      	itt	mi
 8006d9c:	232b      	movmi	r3, #43	; 0x2b
 8006d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006da2:	f89a 3000 	ldrb.w	r3, [sl]
 8006da6:	2b2a      	cmp	r3, #42	; 0x2a
 8006da8:	d015      	beq.n	8006dd6 <_svfiprintf_r+0xf6>
 8006daa:	9a07      	ldr	r2, [sp, #28]
 8006dac:	4654      	mov	r4, sl
 8006dae:	2000      	movs	r0, #0
 8006db0:	f04f 0c0a 	mov.w	ip, #10
 8006db4:	4621      	mov	r1, r4
 8006db6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dba:	3b30      	subs	r3, #48	; 0x30
 8006dbc:	2b09      	cmp	r3, #9
 8006dbe:	d94e      	bls.n	8006e5e <_svfiprintf_r+0x17e>
 8006dc0:	b1b0      	cbz	r0, 8006df0 <_svfiprintf_r+0x110>
 8006dc2:	9207      	str	r2, [sp, #28]
 8006dc4:	e014      	b.n	8006df0 <_svfiprintf_r+0x110>
 8006dc6:	eba0 0308 	sub.w	r3, r0, r8
 8006dca:	fa09 f303 	lsl.w	r3, r9, r3
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	9304      	str	r3, [sp, #16]
 8006dd2:	46a2      	mov	sl, r4
 8006dd4:	e7d2      	b.n	8006d7c <_svfiprintf_r+0x9c>
 8006dd6:	9b03      	ldr	r3, [sp, #12]
 8006dd8:	1d19      	adds	r1, r3, #4
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	9103      	str	r1, [sp, #12]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	bfbb      	ittet	lt
 8006de2:	425b      	neglt	r3, r3
 8006de4:	f042 0202 	orrlt.w	r2, r2, #2
 8006de8:	9307      	strge	r3, [sp, #28]
 8006dea:	9307      	strlt	r3, [sp, #28]
 8006dec:	bfb8      	it	lt
 8006dee:	9204      	strlt	r2, [sp, #16]
 8006df0:	7823      	ldrb	r3, [r4, #0]
 8006df2:	2b2e      	cmp	r3, #46	; 0x2e
 8006df4:	d10c      	bne.n	8006e10 <_svfiprintf_r+0x130>
 8006df6:	7863      	ldrb	r3, [r4, #1]
 8006df8:	2b2a      	cmp	r3, #42	; 0x2a
 8006dfa:	d135      	bne.n	8006e68 <_svfiprintf_r+0x188>
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	1d1a      	adds	r2, r3, #4
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	9203      	str	r2, [sp, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	bfb8      	it	lt
 8006e08:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e0c:	3402      	adds	r4, #2
 8006e0e:	9305      	str	r3, [sp, #20]
 8006e10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006edc <_svfiprintf_r+0x1fc>
 8006e14:	7821      	ldrb	r1, [r4, #0]
 8006e16:	2203      	movs	r2, #3
 8006e18:	4650      	mov	r0, sl
 8006e1a:	f7f9 f9f1 	bl	8000200 <memchr>
 8006e1e:	b140      	cbz	r0, 8006e32 <_svfiprintf_r+0x152>
 8006e20:	2340      	movs	r3, #64	; 0x40
 8006e22:	eba0 000a 	sub.w	r0, r0, sl
 8006e26:	fa03 f000 	lsl.w	r0, r3, r0
 8006e2a:	9b04      	ldr	r3, [sp, #16]
 8006e2c:	4303      	orrs	r3, r0
 8006e2e:	3401      	adds	r4, #1
 8006e30:	9304      	str	r3, [sp, #16]
 8006e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e36:	4826      	ldr	r0, [pc, #152]	; (8006ed0 <_svfiprintf_r+0x1f0>)
 8006e38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e3c:	2206      	movs	r2, #6
 8006e3e:	f7f9 f9df 	bl	8000200 <memchr>
 8006e42:	2800      	cmp	r0, #0
 8006e44:	d038      	beq.n	8006eb8 <_svfiprintf_r+0x1d8>
 8006e46:	4b23      	ldr	r3, [pc, #140]	; (8006ed4 <_svfiprintf_r+0x1f4>)
 8006e48:	bb1b      	cbnz	r3, 8006e92 <_svfiprintf_r+0x1b2>
 8006e4a:	9b03      	ldr	r3, [sp, #12]
 8006e4c:	3307      	adds	r3, #7
 8006e4e:	f023 0307 	bic.w	r3, r3, #7
 8006e52:	3308      	adds	r3, #8
 8006e54:	9303      	str	r3, [sp, #12]
 8006e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e58:	4433      	add	r3, r6
 8006e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e5c:	e767      	b.n	8006d2e <_svfiprintf_r+0x4e>
 8006e5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e62:	460c      	mov	r4, r1
 8006e64:	2001      	movs	r0, #1
 8006e66:	e7a5      	b.n	8006db4 <_svfiprintf_r+0xd4>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	3401      	adds	r4, #1
 8006e6c:	9305      	str	r3, [sp, #20]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	f04f 0c0a 	mov.w	ip, #10
 8006e74:	4620      	mov	r0, r4
 8006e76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e7a:	3a30      	subs	r2, #48	; 0x30
 8006e7c:	2a09      	cmp	r2, #9
 8006e7e:	d903      	bls.n	8006e88 <_svfiprintf_r+0x1a8>
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d0c5      	beq.n	8006e10 <_svfiprintf_r+0x130>
 8006e84:	9105      	str	r1, [sp, #20]
 8006e86:	e7c3      	b.n	8006e10 <_svfiprintf_r+0x130>
 8006e88:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e7f0      	b.n	8006e74 <_svfiprintf_r+0x194>
 8006e92:	ab03      	add	r3, sp, #12
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	462a      	mov	r2, r5
 8006e98:	4b0f      	ldr	r3, [pc, #60]	; (8006ed8 <_svfiprintf_r+0x1f8>)
 8006e9a:	a904      	add	r1, sp, #16
 8006e9c:	4638      	mov	r0, r7
 8006e9e:	f3af 8000 	nop.w
 8006ea2:	1c42      	adds	r2, r0, #1
 8006ea4:	4606      	mov	r6, r0
 8006ea6:	d1d6      	bne.n	8006e56 <_svfiprintf_r+0x176>
 8006ea8:	89ab      	ldrh	r3, [r5, #12]
 8006eaa:	065b      	lsls	r3, r3, #25
 8006eac:	f53f af2c 	bmi.w	8006d08 <_svfiprintf_r+0x28>
 8006eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006eb2:	b01d      	add	sp, #116	; 0x74
 8006eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb8:	ab03      	add	r3, sp, #12
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	462a      	mov	r2, r5
 8006ebe:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <_svfiprintf_r+0x1f8>)
 8006ec0:	a904      	add	r1, sp, #16
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	f000 f9d4 	bl	8007270 <_printf_i>
 8006ec8:	e7eb      	b.n	8006ea2 <_svfiprintf_r+0x1c2>
 8006eca:	bf00      	nop
 8006ecc:	080078dc 	.word	0x080078dc
 8006ed0:	080078e6 	.word	0x080078e6
 8006ed4:	00000000 	.word	0x00000000
 8006ed8:	08006c29 	.word	0x08006c29
 8006edc:	080078e2 	.word	0x080078e2

08006ee0 <__sfputc_r>:
 8006ee0:	6893      	ldr	r3, [r2, #8]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	b410      	push	{r4}
 8006ee8:	6093      	str	r3, [r2, #8]
 8006eea:	da08      	bge.n	8006efe <__sfputc_r+0x1e>
 8006eec:	6994      	ldr	r4, [r2, #24]
 8006eee:	42a3      	cmp	r3, r4
 8006ef0:	db01      	blt.n	8006ef6 <__sfputc_r+0x16>
 8006ef2:	290a      	cmp	r1, #10
 8006ef4:	d103      	bne.n	8006efe <__sfputc_r+0x1e>
 8006ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006efa:	f7ff bb0d 	b.w	8006518 <__swbuf_r>
 8006efe:	6813      	ldr	r3, [r2, #0]
 8006f00:	1c58      	adds	r0, r3, #1
 8006f02:	6010      	str	r0, [r2, #0]
 8006f04:	7019      	strb	r1, [r3, #0]
 8006f06:	4608      	mov	r0, r1
 8006f08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <__sfputs_r>:
 8006f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f10:	4606      	mov	r6, r0
 8006f12:	460f      	mov	r7, r1
 8006f14:	4614      	mov	r4, r2
 8006f16:	18d5      	adds	r5, r2, r3
 8006f18:	42ac      	cmp	r4, r5
 8006f1a:	d101      	bne.n	8006f20 <__sfputs_r+0x12>
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	e007      	b.n	8006f30 <__sfputs_r+0x22>
 8006f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f24:	463a      	mov	r2, r7
 8006f26:	4630      	mov	r0, r6
 8006f28:	f7ff ffda 	bl	8006ee0 <__sfputc_r>
 8006f2c:	1c43      	adds	r3, r0, #1
 8006f2e:	d1f3      	bne.n	8006f18 <__sfputs_r+0xa>
 8006f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f34 <_vfiprintf_r>:
 8006f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f38:	460d      	mov	r5, r1
 8006f3a:	b09d      	sub	sp, #116	; 0x74
 8006f3c:	4614      	mov	r4, r2
 8006f3e:	4698      	mov	r8, r3
 8006f40:	4606      	mov	r6, r0
 8006f42:	b118      	cbz	r0, 8006f4c <_vfiprintf_r+0x18>
 8006f44:	6983      	ldr	r3, [r0, #24]
 8006f46:	b90b      	cbnz	r3, 8006f4c <_vfiprintf_r+0x18>
 8006f48:	f7ff fcc0 	bl	80068cc <__sinit>
 8006f4c:	4b89      	ldr	r3, [pc, #548]	; (8007174 <_vfiprintf_r+0x240>)
 8006f4e:	429d      	cmp	r5, r3
 8006f50:	d11b      	bne.n	8006f8a <_vfiprintf_r+0x56>
 8006f52:	6875      	ldr	r5, [r6, #4]
 8006f54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f56:	07d9      	lsls	r1, r3, #31
 8006f58:	d405      	bmi.n	8006f66 <_vfiprintf_r+0x32>
 8006f5a:	89ab      	ldrh	r3, [r5, #12]
 8006f5c:	059a      	lsls	r2, r3, #22
 8006f5e:	d402      	bmi.n	8006f66 <_vfiprintf_r+0x32>
 8006f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f62:	f7ff fd51 	bl	8006a08 <__retarget_lock_acquire_recursive>
 8006f66:	89ab      	ldrh	r3, [r5, #12]
 8006f68:	071b      	lsls	r3, r3, #28
 8006f6a:	d501      	bpl.n	8006f70 <_vfiprintf_r+0x3c>
 8006f6c:	692b      	ldr	r3, [r5, #16]
 8006f6e:	b9eb      	cbnz	r3, 8006fac <_vfiprintf_r+0x78>
 8006f70:	4629      	mov	r1, r5
 8006f72:	4630      	mov	r0, r6
 8006f74:	f7ff fb22 	bl	80065bc <__swsetup_r>
 8006f78:	b1c0      	cbz	r0, 8006fac <_vfiprintf_r+0x78>
 8006f7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f7c:	07dc      	lsls	r4, r3, #31
 8006f7e:	d50e      	bpl.n	8006f9e <_vfiprintf_r+0x6a>
 8006f80:	f04f 30ff 	mov.w	r0, #4294967295
 8006f84:	b01d      	add	sp, #116	; 0x74
 8006f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f8a:	4b7b      	ldr	r3, [pc, #492]	; (8007178 <_vfiprintf_r+0x244>)
 8006f8c:	429d      	cmp	r5, r3
 8006f8e:	d101      	bne.n	8006f94 <_vfiprintf_r+0x60>
 8006f90:	68b5      	ldr	r5, [r6, #8]
 8006f92:	e7df      	b.n	8006f54 <_vfiprintf_r+0x20>
 8006f94:	4b79      	ldr	r3, [pc, #484]	; (800717c <_vfiprintf_r+0x248>)
 8006f96:	429d      	cmp	r5, r3
 8006f98:	bf08      	it	eq
 8006f9a:	68f5      	ldreq	r5, [r6, #12]
 8006f9c:	e7da      	b.n	8006f54 <_vfiprintf_r+0x20>
 8006f9e:	89ab      	ldrh	r3, [r5, #12]
 8006fa0:	0598      	lsls	r0, r3, #22
 8006fa2:	d4ed      	bmi.n	8006f80 <_vfiprintf_r+0x4c>
 8006fa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fa6:	f7ff fd30 	bl	8006a0a <__retarget_lock_release_recursive>
 8006faa:	e7e9      	b.n	8006f80 <_vfiprintf_r+0x4c>
 8006fac:	2300      	movs	r3, #0
 8006fae:	9309      	str	r3, [sp, #36]	; 0x24
 8006fb0:	2320      	movs	r3, #32
 8006fb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fba:	2330      	movs	r3, #48	; 0x30
 8006fbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007180 <_vfiprintf_r+0x24c>
 8006fc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fc4:	f04f 0901 	mov.w	r9, #1
 8006fc8:	4623      	mov	r3, r4
 8006fca:	469a      	mov	sl, r3
 8006fcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fd0:	b10a      	cbz	r2, 8006fd6 <_vfiprintf_r+0xa2>
 8006fd2:	2a25      	cmp	r2, #37	; 0x25
 8006fd4:	d1f9      	bne.n	8006fca <_vfiprintf_r+0x96>
 8006fd6:	ebba 0b04 	subs.w	fp, sl, r4
 8006fda:	d00b      	beq.n	8006ff4 <_vfiprintf_r+0xc0>
 8006fdc:	465b      	mov	r3, fp
 8006fde:	4622      	mov	r2, r4
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	f7ff ff93 	bl	8006f0e <__sfputs_r>
 8006fe8:	3001      	adds	r0, #1
 8006fea:	f000 80aa 	beq.w	8007142 <_vfiprintf_r+0x20e>
 8006fee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ff0:	445a      	add	r2, fp
 8006ff2:	9209      	str	r2, [sp, #36]	; 0x24
 8006ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 80a2 	beq.w	8007142 <_vfiprintf_r+0x20e>
 8006ffe:	2300      	movs	r3, #0
 8007000:	f04f 32ff 	mov.w	r2, #4294967295
 8007004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007008:	f10a 0a01 	add.w	sl, sl, #1
 800700c:	9304      	str	r3, [sp, #16]
 800700e:	9307      	str	r3, [sp, #28]
 8007010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007014:	931a      	str	r3, [sp, #104]	; 0x68
 8007016:	4654      	mov	r4, sl
 8007018:	2205      	movs	r2, #5
 800701a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800701e:	4858      	ldr	r0, [pc, #352]	; (8007180 <_vfiprintf_r+0x24c>)
 8007020:	f7f9 f8ee 	bl	8000200 <memchr>
 8007024:	9a04      	ldr	r2, [sp, #16]
 8007026:	b9d8      	cbnz	r0, 8007060 <_vfiprintf_r+0x12c>
 8007028:	06d1      	lsls	r1, r2, #27
 800702a:	bf44      	itt	mi
 800702c:	2320      	movmi	r3, #32
 800702e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007032:	0713      	lsls	r3, r2, #28
 8007034:	bf44      	itt	mi
 8007036:	232b      	movmi	r3, #43	; 0x2b
 8007038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800703c:	f89a 3000 	ldrb.w	r3, [sl]
 8007040:	2b2a      	cmp	r3, #42	; 0x2a
 8007042:	d015      	beq.n	8007070 <_vfiprintf_r+0x13c>
 8007044:	9a07      	ldr	r2, [sp, #28]
 8007046:	4654      	mov	r4, sl
 8007048:	2000      	movs	r0, #0
 800704a:	f04f 0c0a 	mov.w	ip, #10
 800704e:	4621      	mov	r1, r4
 8007050:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007054:	3b30      	subs	r3, #48	; 0x30
 8007056:	2b09      	cmp	r3, #9
 8007058:	d94e      	bls.n	80070f8 <_vfiprintf_r+0x1c4>
 800705a:	b1b0      	cbz	r0, 800708a <_vfiprintf_r+0x156>
 800705c:	9207      	str	r2, [sp, #28]
 800705e:	e014      	b.n	800708a <_vfiprintf_r+0x156>
 8007060:	eba0 0308 	sub.w	r3, r0, r8
 8007064:	fa09 f303 	lsl.w	r3, r9, r3
 8007068:	4313      	orrs	r3, r2
 800706a:	9304      	str	r3, [sp, #16]
 800706c:	46a2      	mov	sl, r4
 800706e:	e7d2      	b.n	8007016 <_vfiprintf_r+0xe2>
 8007070:	9b03      	ldr	r3, [sp, #12]
 8007072:	1d19      	adds	r1, r3, #4
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	9103      	str	r1, [sp, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	bfbb      	ittet	lt
 800707c:	425b      	neglt	r3, r3
 800707e:	f042 0202 	orrlt.w	r2, r2, #2
 8007082:	9307      	strge	r3, [sp, #28]
 8007084:	9307      	strlt	r3, [sp, #28]
 8007086:	bfb8      	it	lt
 8007088:	9204      	strlt	r2, [sp, #16]
 800708a:	7823      	ldrb	r3, [r4, #0]
 800708c:	2b2e      	cmp	r3, #46	; 0x2e
 800708e:	d10c      	bne.n	80070aa <_vfiprintf_r+0x176>
 8007090:	7863      	ldrb	r3, [r4, #1]
 8007092:	2b2a      	cmp	r3, #42	; 0x2a
 8007094:	d135      	bne.n	8007102 <_vfiprintf_r+0x1ce>
 8007096:	9b03      	ldr	r3, [sp, #12]
 8007098:	1d1a      	adds	r2, r3, #4
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	9203      	str	r2, [sp, #12]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	bfb8      	it	lt
 80070a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80070a6:	3402      	adds	r4, #2
 80070a8:	9305      	str	r3, [sp, #20]
 80070aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007190 <_vfiprintf_r+0x25c>
 80070ae:	7821      	ldrb	r1, [r4, #0]
 80070b0:	2203      	movs	r2, #3
 80070b2:	4650      	mov	r0, sl
 80070b4:	f7f9 f8a4 	bl	8000200 <memchr>
 80070b8:	b140      	cbz	r0, 80070cc <_vfiprintf_r+0x198>
 80070ba:	2340      	movs	r3, #64	; 0x40
 80070bc:	eba0 000a 	sub.w	r0, r0, sl
 80070c0:	fa03 f000 	lsl.w	r0, r3, r0
 80070c4:	9b04      	ldr	r3, [sp, #16]
 80070c6:	4303      	orrs	r3, r0
 80070c8:	3401      	adds	r4, #1
 80070ca:	9304      	str	r3, [sp, #16]
 80070cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070d0:	482c      	ldr	r0, [pc, #176]	; (8007184 <_vfiprintf_r+0x250>)
 80070d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070d6:	2206      	movs	r2, #6
 80070d8:	f7f9 f892 	bl	8000200 <memchr>
 80070dc:	2800      	cmp	r0, #0
 80070de:	d03f      	beq.n	8007160 <_vfiprintf_r+0x22c>
 80070e0:	4b29      	ldr	r3, [pc, #164]	; (8007188 <_vfiprintf_r+0x254>)
 80070e2:	bb1b      	cbnz	r3, 800712c <_vfiprintf_r+0x1f8>
 80070e4:	9b03      	ldr	r3, [sp, #12]
 80070e6:	3307      	adds	r3, #7
 80070e8:	f023 0307 	bic.w	r3, r3, #7
 80070ec:	3308      	adds	r3, #8
 80070ee:	9303      	str	r3, [sp, #12]
 80070f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070f2:	443b      	add	r3, r7
 80070f4:	9309      	str	r3, [sp, #36]	; 0x24
 80070f6:	e767      	b.n	8006fc8 <_vfiprintf_r+0x94>
 80070f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80070fc:	460c      	mov	r4, r1
 80070fe:	2001      	movs	r0, #1
 8007100:	e7a5      	b.n	800704e <_vfiprintf_r+0x11a>
 8007102:	2300      	movs	r3, #0
 8007104:	3401      	adds	r4, #1
 8007106:	9305      	str	r3, [sp, #20]
 8007108:	4619      	mov	r1, r3
 800710a:	f04f 0c0a 	mov.w	ip, #10
 800710e:	4620      	mov	r0, r4
 8007110:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007114:	3a30      	subs	r2, #48	; 0x30
 8007116:	2a09      	cmp	r2, #9
 8007118:	d903      	bls.n	8007122 <_vfiprintf_r+0x1ee>
 800711a:	2b00      	cmp	r3, #0
 800711c:	d0c5      	beq.n	80070aa <_vfiprintf_r+0x176>
 800711e:	9105      	str	r1, [sp, #20]
 8007120:	e7c3      	b.n	80070aa <_vfiprintf_r+0x176>
 8007122:	fb0c 2101 	mla	r1, ip, r1, r2
 8007126:	4604      	mov	r4, r0
 8007128:	2301      	movs	r3, #1
 800712a:	e7f0      	b.n	800710e <_vfiprintf_r+0x1da>
 800712c:	ab03      	add	r3, sp, #12
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	462a      	mov	r2, r5
 8007132:	4b16      	ldr	r3, [pc, #88]	; (800718c <_vfiprintf_r+0x258>)
 8007134:	a904      	add	r1, sp, #16
 8007136:	4630      	mov	r0, r6
 8007138:	f3af 8000 	nop.w
 800713c:	4607      	mov	r7, r0
 800713e:	1c78      	adds	r0, r7, #1
 8007140:	d1d6      	bne.n	80070f0 <_vfiprintf_r+0x1bc>
 8007142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007144:	07d9      	lsls	r1, r3, #31
 8007146:	d405      	bmi.n	8007154 <_vfiprintf_r+0x220>
 8007148:	89ab      	ldrh	r3, [r5, #12]
 800714a:	059a      	lsls	r2, r3, #22
 800714c:	d402      	bmi.n	8007154 <_vfiprintf_r+0x220>
 800714e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007150:	f7ff fc5b 	bl	8006a0a <__retarget_lock_release_recursive>
 8007154:	89ab      	ldrh	r3, [r5, #12]
 8007156:	065b      	lsls	r3, r3, #25
 8007158:	f53f af12 	bmi.w	8006f80 <_vfiprintf_r+0x4c>
 800715c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800715e:	e711      	b.n	8006f84 <_vfiprintf_r+0x50>
 8007160:	ab03      	add	r3, sp, #12
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	462a      	mov	r2, r5
 8007166:	4b09      	ldr	r3, [pc, #36]	; (800718c <_vfiprintf_r+0x258>)
 8007168:	a904      	add	r1, sp, #16
 800716a:	4630      	mov	r0, r6
 800716c:	f000 f880 	bl	8007270 <_printf_i>
 8007170:	e7e4      	b.n	800713c <_vfiprintf_r+0x208>
 8007172:	bf00      	nop
 8007174:	0800789c 	.word	0x0800789c
 8007178:	080078bc 	.word	0x080078bc
 800717c:	0800787c 	.word	0x0800787c
 8007180:	080078dc 	.word	0x080078dc
 8007184:	080078e6 	.word	0x080078e6
 8007188:	00000000 	.word	0x00000000
 800718c:	08006f0f 	.word	0x08006f0f
 8007190:	080078e2 	.word	0x080078e2

08007194 <_printf_common>:
 8007194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007198:	4616      	mov	r6, r2
 800719a:	4699      	mov	r9, r3
 800719c:	688a      	ldr	r2, [r1, #8]
 800719e:	690b      	ldr	r3, [r1, #16]
 80071a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071a4:	4293      	cmp	r3, r2
 80071a6:	bfb8      	it	lt
 80071a8:	4613      	movlt	r3, r2
 80071aa:	6033      	str	r3, [r6, #0]
 80071ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071b0:	4607      	mov	r7, r0
 80071b2:	460c      	mov	r4, r1
 80071b4:	b10a      	cbz	r2, 80071ba <_printf_common+0x26>
 80071b6:	3301      	adds	r3, #1
 80071b8:	6033      	str	r3, [r6, #0]
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	0699      	lsls	r1, r3, #26
 80071be:	bf42      	ittt	mi
 80071c0:	6833      	ldrmi	r3, [r6, #0]
 80071c2:	3302      	addmi	r3, #2
 80071c4:	6033      	strmi	r3, [r6, #0]
 80071c6:	6825      	ldr	r5, [r4, #0]
 80071c8:	f015 0506 	ands.w	r5, r5, #6
 80071cc:	d106      	bne.n	80071dc <_printf_common+0x48>
 80071ce:	f104 0a19 	add.w	sl, r4, #25
 80071d2:	68e3      	ldr	r3, [r4, #12]
 80071d4:	6832      	ldr	r2, [r6, #0]
 80071d6:	1a9b      	subs	r3, r3, r2
 80071d8:	42ab      	cmp	r3, r5
 80071da:	dc26      	bgt.n	800722a <_printf_common+0x96>
 80071dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071e0:	1e13      	subs	r3, r2, #0
 80071e2:	6822      	ldr	r2, [r4, #0]
 80071e4:	bf18      	it	ne
 80071e6:	2301      	movne	r3, #1
 80071e8:	0692      	lsls	r2, r2, #26
 80071ea:	d42b      	bmi.n	8007244 <_printf_common+0xb0>
 80071ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071f0:	4649      	mov	r1, r9
 80071f2:	4638      	mov	r0, r7
 80071f4:	47c0      	blx	r8
 80071f6:	3001      	adds	r0, #1
 80071f8:	d01e      	beq.n	8007238 <_printf_common+0xa4>
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	68e5      	ldr	r5, [r4, #12]
 80071fe:	6832      	ldr	r2, [r6, #0]
 8007200:	f003 0306 	and.w	r3, r3, #6
 8007204:	2b04      	cmp	r3, #4
 8007206:	bf08      	it	eq
 8007208:	1aad      	subeq	r5, r5, r2
 800720a:	68a3      	ldr	r3, [r4, #8]
 800720c:	6922      	ldr	r2, [r4, #16]
 800720e:	bf0c      	ite	eq
 8007210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007214:	2500      	movne	r5, #0
 8007216:	4293      	cmp	r3, r2
 8007218:	bfc4      	itt	gt
 800721a:	1a9b      	subgt	r3, r3, r2
 800721c:	18ed      	addgt	r5, r5, r3
 800721e:	2600      	movs	r6, #0
 8007220:	341a      	adds	r4, #26
 8007222:	42b5      	cmp	r5, r6
 8007224:	d11a      	bne.n	800725c <_printf_common+0xc8>
 8007226:	2000      	movs	r0, #0
 8007228:	e008      	b.n	800723c <_printf_common+0xa8>
 800722a:	2301      	movs	r3, #1
 800722c:	4652      	mov	r2, sl
 800722e:	4649      	mov	r1, r9
 8007230:	4638      	mov	r0, r7
 8007232:	47c0      	blx	r8
 8007234:	3001      	adds	r0, #1
 8007236:	d103      	bne.n	8007240 <_printf_common+0xac>
 8007238:	f04f 30ff 	mov.w	r0, #4294967295
 800723c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007240:	3501      	adds	r5, #1
 8007242:	e7c6      	b.n	80071d2 <_printf_common+0x3e>
 8007244:	18e1      	adds	r1, r4, r3
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	2030      	movs	r0, #48	; 0x30
 800724a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800724e:	4422      	add	r2, r4
 8007250:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007254:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007258:	3302      	adds	r3, #2
 800725a:	e7c7      	b.n	80071ec <_printf_common+0x58>
 800725c:	2301      	movs	r3, #1
 800725e:	4622      	mov	r2, r4
 8007260:	4649      	mov	r1, r9
 8007262:	4638      	mov	r0, r7
 8007264:	47c0      	blx	r8
 8007266:	3001      	adds	r0, #1
 8007268:	d0e6      	beq.n	8007238 <_printf_common+0xa4>
 800726a:	3601      	adds	r6, #1
 800726c:	e7d9      	b.n	8007222 <_printf_common+0x8e>
	...

08007270 <_printf_i>:
 8007270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007274:	460c      	mov	r4, r1
 8007276:	4691      	mov	r9, r2
 8007278:	7e27      	ldrb	r7, [r4, #24]
 800727a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800727c:	2f78      	cmp	r7, #120	; 0x78
 800727e:	4680      	mov	r8, r0
 8007280:	469a      	mov	sl, r3
 8007282:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007286:	d807      	bhi.n	8007298 <_printf_i+0x28>
 8007288:	2f62      	cmp	r7, #98	; 0x62
 800728a:	d80a      	bhi.n	80072a2 <_printf_i+0x32>
 800728c:	2f00      	cmp	r7, #0
 800728e:	f000 80d8 	beq.w	8007442 <_printf_i+0x1d2>
 8007292:	2f58      	cmp	r7, #88	; 0x58
 8007294:	f000 80a3 	beq.w	80073de <_printf_i+0x16e>
 8007298:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800729c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072a0:	e03a      	b.n	8007318 <_printf_i+0xa8>
 80072a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072a6:	2b15      	cmp	r3, #21
 80072a8:	d8f6      	bhi.n	8007298 <_printf_i+0x28>
 80072aa:	a001      	add	r0, pc, #4	; (adr r0, 80072b0 <_printf_i+0x40>)
 80072ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80072b0:	08007309 	.word	0x08007309
 80072b4:	0800731d 	.word	0x0800731d
 80072b8:	08007299 	.word	0x08007299
 80072bc:	08007299 	.word	0x08007299
 80072c0:	08007299 	.word	0x08007299
 80072c4:	08007299 	.word	0x08007299
 80072c8:	0800731d 	.word	0x0800731d
 80072cc:	08007299 	.word	0x08007299
 80072d0:	08007299 	.word	0x08007299
 80072d4:	08007299 	.word	0x08007299
 80072d8:	08007299 	.word	0x08007299
 80072dc:	08007429 	.word	0x08007429
 80072e0:	0800734d 	.word	0x0800734d
 80072e4:	0800740b 	.word	0x0800740b
 80072e8:	08007299 	.word	0x08007299
 80072ec:	08007299 	.word	0x08007299
 80072f0:	0800744b 	.word	0x0800744b
 80072f4:	08007299 	.word	0x08007299
 80072f8:	0800734d 	.word	0x0800734d
 80072fc:	08007299 	.word	0x08007299
 8007300:	08007299 	.word	0x08007299
 8007304:	08007413 	.word	0x08007413
 8007308:	680b      	ldr	r3, [r1, #0]
 800730a:	1d1a      	adds	r2, r3, #4
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	600a      	str	r2, [r1, #0]
 8007310:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007314:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007318:	2301      	movs	r3, #1
 800731a:	e0a3      	b.n	8007464 <_printf_i+0x1f4>
 800731c:	6825      	ldr	r5, [r4, #0]
 800731e:	6808      	ldr	r0, [r1, #0]
 8007320:	062e      	lsls	r6, r5, #24
 8007322:	f100 0304 	add.w	r3, r0, #4
 8007326:	d50a      	bpl.n	800733e <_printf_i+0xce>
 8007328:	6805      	ldr	r5, [r0, #0]
 800732a:	600b      	str	r3, [r1, #0]
 800732c:	2d00      	cmp	r5, #0
 800732e:	da03      	bge.n	8007338 <_printf_i+0xc8>
 8007330:	232d      	movs	r3, #45	; 0x2d
 8007332:	426d      	negs	r5, r5
 8007334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007338:	485e      	ldr	r0, [pc, #376]	; (80074b4 <_printf_i+0x244>)
 800733a:	230a      	movs	r3, #10
 800733c:	e019      	b.n	8007372 <_printf_i+0x102>
 800733e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007342:	6805      	ldr	r5, [r0, #0]
 8007344:	600b      	str	r3, [r1, #0]
 8007346:	bf18      	it	ne
 8007348:	b22d      	sxthne	r5, r5
 800734a:	e7ef      	b.n	800732c <_printf_i+0xbc>
 800734c:	680b      	ldr	r3, [r1, #0]
 800734e:	6825      	ldr	r5, [r4, #0]
 8007350:	1d18      	adds	r0, r3, #4
 8007352:	6008      	str	r0, [r1, #0]
 8007354:	0628      	lsls	r0, r5, #24
 8007356:	d501      	bpl.n	800735c <_printf_i+0xec>
 8007358:	681d      	ldr	r5, [r3, #0]
 800735a:	e002      	b.n	8007362 <_printf_i+0xf2>
 800735c:	0669      	lsls	r1, r5, #25
 800735e:	d5fb      	bpl.n	8007358 <_printf_i+0xe8>
 8007360:	881d      	ldrh	r5, [r3, #0]
 8007362:	4854      	ldr	r0, [pc, #336]	; (80074b4 <_printf_i+0x244>)
 8007364:	2f6f      	cmp	r7, #111	; 0x6f
 8007366:	bf0c      	ite	eq
 8007368:	2308      	moveq	r3, #8
 800736a:	230a      	movne	r3, #10
 800736c:	2100      	movs	r1, #0
 800736e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007372:	6866      	ldr	r6, [r4, #4]
 8007374:	60a6      	str	r6, [r4, #8]
 8007376:	2e00      	cmp	r6, #0
 8007378:	bfa2      	ittt	ge
 800737a:	6821      	ldrge	r1, [r4, #0]
 800737c:	f021 0104 	bicge.w	r1, r1, #4
 8007380:	6021      	strge	r1, [r4, #0]
 8007382:	b90d      	cbnz	r5, 8007388 <_printf_i+0x118>
 8007384:	2e00      	cmp	r6, #0
 8007386:	d04d      	beq.n	8007424 <_printf_i+0x1b4>
 8007388:	4616      	mov	r6, r2
 800738a:	fbb5 f1f3 	udiv	r1, r5, r3
 800738e:	fb03 5711 	mls	r7, r3, r1, r5
 8007392:	5dc7      	ldrb	r7, [r0, r7]
 8007394:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007398:	462f      	mov	r7, r5
 800739a:	42bb      	cmp	r3, r7
 800739c:	460d      	mov	r5, r1
 800739e:	d9f4      	bls.n	800738a <_printf_i+0x11a>
 80073a0:	2b08      	cmp	r3, #8
 80073a2:	d10b      	bne.n	80073bc <_printf_i+0x14c>
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	07df      	lsls	r7, r3, #31
 80073a8:	d508      	bpl.n	80073bc <_printf_i+0x14c>
 80073aa:	6923      	ldr	r3, [r4, #16]
 80073ac:	6861      	ldr	r1, [r4, #4]
 80073ae:	4299      	cmp	r1, r3
 80073b0:	bfde      	ittt	le
 80073b2:	2330      	movle	r3, #48	; 0x30
 80073b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073bc:	1b92      	subs	r2, r2, r6
 80073be:	6122      	str	r2, [r4, #16]
 80073c0:	f8cd a000 	str.w	sl, [sp]
 80073c4:	464b      	mov	r3, r9
 80073c6:	aa03      	add	r2, sp, #12
 80073c8:	4621      	mov	r1, r4
 80073ca:	4640      	mov	r0, r8
 80073cc:	f7ff fee2 	bl	8007194 <_printf_common>
 80073d0:	3001      	adds	r0, #1
 80073d2:	d14c      	bne.n	800746e <_printf_i+0x1fe>
 80073d4:	f04f 30ff 	mov.w	r0, #4294967295
 80073d8:	b004      	add	sp, #16
 80073da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073de:	4835      	ldr	r0, [pc, #212]	; (80074b4 <_printf_i+0x244>)
 80073e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	680e      	ldr	r6, [r1, #0]
 80073e8:	061f      	lsls	r7, r3, #24
 80073ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80073ee:	600e      	str	r6, [r1, #0]
 80073f0:	d514      	bpl.n	800741c <_printf_i+0x1ac>
 80073f2:	07d9      	lsls	r1, r3, #31
 80073f4:	bf44      	itt	mi
 80073f6:	f043 0320 	orrmi.w	r3, r3, #32
 80073fa:	6023      	strmi	r3, [r4, #0]
 80073fc:	b91d      	cbnz	r5, 8007406 <_printf_i+0x196>
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	f023 0320 	bic.w	r3, r3, #32
 8007404:	6023      	str	r3, [r4, #0]
 8007406:	2310      	movs	r3, #16
 8007408:	e7b0      	b.n	800736c <_printf_i+0xfc>
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	f043 0320 	orr.w	r3, r3, #32
 8007410:	6023      	str	r3, [r4, #0]
 8007412:	2378      	movs	r3, #120	; 0x78
 8007414:	4828      	ldr	r0, [pc, #160]	; (80074b8 <_printf_i+0x248>)
 8007416:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800741a:	e7e3      	b.n	80073e4 <_printf_i+0x174>
 800741c:	065e      	lsls	r6, r3, #25
 800741e:	bf48      	it	mi
 8007420:	b2ad      	uxthmi	r5, r5
 8007422:	e7e6      	b.n	80073f2 <_printf_i+0x182>
 8007424:	4616      	mov	r6, r2
 8007426:	e7bb      	b.n	80073a0 <_printf_i+0x130>
 8007428:	680b      	ldr	r3, [r1, #0]
 800742a:	6826      	ldr	r6, [r4, #0]
 800742c:	6960      	ldr	r0, [r4, #20]
 800742e:	1d1d      	adds	r5, r3, #4
 8007430:	600d      	str	r5, [r1, #0]
 8007432:	0635      	lsls	r5, r6, #24
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	d501      	bpl.n	800743c <_printf_i+0x1cc>
 8007438:	6018      	str	r0, [r3, #0]
 800743a:	e002      	b.n	8007442 <_printf_i+0x1d2>
 800743c:	0671      	lsls	r1, r6, #25
 800743e:	d5fb      	bpl.n	8007438 <_printf_i+0x1c8>
 8007440:	8018      	strh	r0, [r3, #0]
 8007442:	2300      	movs	r3, #0
 8007444:	6123      	str	r3, [r4, #16]
 8007446:	4616      	mov	r6, r2
 8007448:	e7ba      	b.n	80073c0 <_printf_i+0x150>
 800744a:	680b      	ldr	r3, [r1, #0]
 800744c:	1d1a      	adds	r2, r3, #4
 800744e:	600a      	str	r2, [r1, #0]
 8007450:	681e      	ldr	r6, [r3, #0]
 8007452:	6862      	ldr	r2, [r4, #4]
 8007454:	2100      	movs	r1, #0
 8007456:	4630      	mov	r0, r6
 8007458:	f7f8 fed2 	bl	8000200 <memchr>
 800745c:	b108      	cbz	r0, 8007462 <_printf_i+0x1f2>
 800745e:	1b80      	subs	r0, r0, r6
 8007460:	6060      	str	r0, [r4, #4]
 8007462:	6863      	ldr	r3, [r4, #4]
 8007464:	6123      	str	r3, [r4, #16]
 8007466:	2300      	movs	r3, #0
 8007468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800746c:	e7a8      	b.n	80073c0 <_printf_i+0x150>
 800746e:	6923      	ldr	r3, [r4, #16]
 8007470:	4632      	mov	r2, r6
 8007472:	4649      	mov	r1, r9
 8007474:	4640      	mov	r0, r8
 8007476:	47d0      	blx	sl
 8007478:	3001      	adds	r0, #1
 800747a:	d0ab      	beq.n	80073d4 <_printf_i+0x164>
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	079b      	lsls	r3, r3, #30
 8007480:	d413      	bmi.n	80074aa <_printf_i+0x23a>
 8007482:	68e0      	ldr	r0, [r4, #12]
 8007484:	9b03      	ldr	r3, [sp, #12]
 8007486:	4298      	cmp	r0, r3
 8007488:	bfb8      	it	lt
 800748a:	4618      	movlt	r0, r3
 800748c:	e7a4      	b.n	80073d8 <_printf_i+0x168>
 800748e:	2301      	movs	r3, #1
 8007490:	4632      	mov	r2, r6
 8007492:	4649      	mov	r1, r9
 8007494:	4640      	mov	r0, r8
 8007496:	47d0      	blx	sl
 8007498:	3001      	adds	r0, #1
 800749a:	d09b      	beq.n	80073d4 <_printf_i+0x164>
 800749c:	3501      	adds	r5, #1
 800749e:	68e3      	ldr	r3, [r4, #12]
 80074a0:	9903      	ldr	r1, [sp, #12]
 80074a2:	1a5b      	subs	r3, r3, r1
 80074a4:	42ab      	cmp	r3, r5
 80074a6:	dcf2      	bgt.n	800748e <_printf_i+0x21e>
 80074a8:	e7eb      	b.n	8007482 <_printf_i+0x212>
 80074aa:	2500      	movs	r5, #0
 80074ac:	f104 0619 	add.w	r6, r4, #25
 80074b0:	e7f5      	b.n	800749e <_printf_i+0x22e>
 80074b2:	bf00      	nop
 80074b4:	080078ed 	.word	0x080078ed
 80074b8:	080078fe 	.word	0x080078fe

080074bc <_sbrk_r>:
 80074bc:	b538      	push	{r3, r4, r5, lr}
 80074be:	4d06      	ldr	r5, [pc, #24]	; (80074d8 <_sbrk_r+0x1c>)
 80074c0:	2300      	movs	r3, #0
 80074c2:	4604      	mov	r4, r0
 80074c4:	4608      	mov	r0, r1
 80074c6:	602b      	str	r3, [r5, #0]
 80074c8:	f7fe feaa 	bl	8006220 <_sbrk>
 80074cc:	1c43      	adds	r3, r0, #1
 80074ce:	d102      	bne.n	80074d6 <_sbrk_r+0x1a>
 80074d0:	682b      	ldr	r3, [r5, #0]
 80074d2:	b103      	cbz	r3, 80074d6 <_sbrk_r+0x1a>
 80074d4:	6023      	str	r3, [r4, #0]
 80074d6:	bd38      	pop	{r3, r4, r5, pc}
 80074d8:	20000360 	.word	0x20000360

080074dc <__sread>:
 80074dc:	b510      	push	{r4, lr}
 80074de:	460c      	mov	r4, r1
 80074e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074e4:	f000 f8ee 	bl	80076c4 <_read_r>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	bfab      	itete	ge
 80074ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074ee:	89a3      	ldrhlt	r3, [r4, #12]
 80074f0:	181b      	addge	r3, r3, r0
 80074f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074f6:	bfac      	ite	ge
 80074f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80074fa:	81a3      	strhlt	r3, [r4, #12]
 80074fc:	bd10      	pop	{r4, pc}

080074fe <__swrite>:
 80074fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007502:	461f      	mov	r7, r3
 8007504:	898b      	ldrh	r3, [r1, #12]
 8007506:	05db      	lsls	r3, r3, #23
 8007508:	4605      	mov	r5, r0
 800750a:	460c      	mov	r4, r1
 800750c:	4616      	mov	r6, r2
 800750e:	d505      	bpl.n	800751c <__swrite+0x1e>
 8007510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007514:	2302      	movs	r3, #2
 8007516:	2200      	movs	r2, #0
 8007518:	f000 f868 	bl	80075ec <_lseek_r>
 800751c:	89a3      	ldrh	r3, [r4, #12]
 800751e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007522:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007526:	81a3      	strh	r3, [r4, #12]
 8007528:	4632      	mov	r2, r6
 800752a:	463b      	mov	r3, r7
 800752c:	4628      	mov	r0, r5
 800752e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007532:	f000 b817 	b.w	8007564 <_write_r>

08007536 <__sseek>:
 8007536:	b510      	push	{r4, lr}
 8007538:	460c      	mov	r4, r1
 800753a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800753e:	f000 f855 	bl	80075ec <_lseek_r>
 8007542:	1c43      	adds	r3, r0, #1
 8007544:	89a3      	ldrh	r3, [r4, #12]
 8007546:	bf15      	itete	ne
 8007548:	6560      	strne	r0, [r4, #84]	; 0x54
 800754a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800754e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007552:	81a3      	strheq	r3, [r4, #12]
 8007554:	bf18      	it	ne
 8007556:	81a3      	strhne	r3, [r4, #12]
 8007558:	bd10      	pop	{r4, pc}

0800755a <__sclose>:
 800755a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800755e:	f000 b813 	b.w	8007588 <_close_r>
	...

08007564 <_write_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	4d07      	ldr	r5, [pc, #28]	; (8007584 <_write_r+0x20>)
 8007568:	4604      	mov	r4, r0
 800756a:	4608      	mov	r0, r1
 800756c:	4611      	mov	r1, r2
 800756e:	2200      	movs	r2, #0
 8007570:	602a      	str	r2, [r5, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	f7fe fe03 	bl	800617e <_write>
 8007578:	1c43      	adds	r3, r0, #1
 800757a:	d102      	bne.n	8007582 <_write_r+0x1e>
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	b103      	cbz	r3, 8007582 <_write_r+0x1e>
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	bd38      	pop	{r3, r4, r5, pc}
 8007584:	20000360 	.word	0x20000360

08007588 <_close_r>:
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	4d06      	ldr	r5, [pc, #24]	; (80075a4 <_close_r+0x1c>)
 800758c:	2300      	movs	r3, #0
 800758e:	4604      	mov	r4, r0
 8007590:	4608      	mov	r0, r1
 8007592:	602b      	str	r3, [r5, #0]
 8007594:	f7fe fe0f 	bl	80061b6 <_close>
 8007598:	1c43      	adds	r3, r0, #1
 800759a:	d102      	bne.n	80075a2 <_close_r+0x1a>
 800759c:	682b      	ldr	r3, [r5, #0]
 800759e:	b103      	cbz	r3, 80075a2 <_close_r+0x1a>
 80075a0:	6023      	str	r3, [r4, #0]
 80075a2:	bd38      	pop	{r3, r4, r5, pc}
 80075a4:	20000360 	.word	0x20000360

080075a8 <_fstat_r>:
 80075a8:	b538      	push	{r3, r4, r5, lr}
 80075aa:	4d07      	ldr	r5, [pc, #28]	; (80075c8 <_fstat_r+0x20>)
 80075ac:	2300      	movs	r3, #0
 80075ae:	4604      	mov	r4, r0
 80075b0:	4608      	mov	r0, r1
 80075b2:	4611      	mov	r1, r2
 80075b4:	602b      	str	r3, [r5, #0]
 80075b6:	f7fe fe0a 	bl	80061ce <_fstat>
 80075ba:	1c43      	adds	r3, r0, #1
 80075bc:	d102      	bne.n	80075c4 <_fstat_r+0x1c>
 80075be:	682b      	ldr	r3, [r5, #0]
 80075c0:	b103      	cbz	r3, 80075c4 <_fstat_r+0x1c>
 80075c2:	6023      	str	r3, [r4, #0]
 80075c4:	bd38      	pop	{r3, r4, r5, pc}
 80075c6:	bf00      	nop
 80075c8:	20000360 	.word	0x20000360

080075cc <_isatty_r>:
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	4d06      	ldr	r5, [pc, #24]	; (80075e8 <_isatty_r+0x1c>)
 80075d0:	2300      	movs	r3, #0
 80075d2:	4604      	mov	r4, r0
 80075d4:	4608      	mov	r0, r1
 80075d6:	602b      	str	r3, [r5, #0]
 80075d8:	f7fe fe09 	bl	80061ee <_isatty>
 80075dc:	1c43      	adds	r3, r0, #1
 80075de:	d102      	bne.n	80075e6 <_isatty_r+0x1a>
 80075e0:	682b      	ldr	r3, [r5, #0]
 80075e2:	b103      	cbz	r3, 80075e6 <_isatty_r+0x1a>
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	bd38      	pop	{r3, r4, r5, pc}
 80075e8:	20000360 	.word	0x20000360

080075ec <_lseek_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	4d07      	ldr	r5, [pc, #28]	; (800760c <_lseek_r+0x20>)
 80075f0:	4604      	mov	r4, r0
 80075f2:	4608      	mov	r0, r1
 80075f4:	4611      	mov	r1, r2
 80075f6:	2200      	movs	r2, #0
 80075f8:	602a      	str	r2, [r5, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	f7fe fe02 	bl	8006204 <_lseek>
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	d102      	bne.n	800760a <_lseek_r+0x1e>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	b103      	cbz	r3, 800760a <_lseek_r+0x1e>
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	20000360 	.word	0x20000360

08007610 <memcpy>:
 8007610:	440a      	add	r2, r1
 8007612:	4291      	cmp	r1, r2
 8007614:	f100 33ff 	add.w	r3, r0, #4294967295
 8007618:	d100      	bne.n	800761c <memcpy+0xc>
 800761a:	4770      	bx	lr
 800761c:	b510      	push	{r4, lr}
 800761e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007622:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007626:	4291      	cmp	r1, r2
 8007628:	d1f9      	bne.n	800761e <memcpy+0xe>
 800762a:	bd10      	pop	{r4, pc}

0800762c <memmove>:
 800762c:	4288      	cmp	r0, r1
 800762e:	b510      	push	{r4, lr}
 8007630:	eb01 0402 	add.w	r4, r1, r2
 8007634:	d902      	bls.n	800763c <memmove+0x10>
 8007636:	4284      	cmp	r4, r0
 8007638:	4623      	mov	r3, r4
 800763a:	d807      	bhi.n	800764c <memmove+0x20>
 800763c:	1e43      	subs	r3, r0, #1
 800763e:	42a1      	cmp	r1, r4
 8007640:	d008      	beq.n	8007654 <memmove+0x28>
 8007642:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007646:	f803 2f01 	strb.w	r2, [r3, #1]!
 800764a:	e7f8      	b.n	800763e <memmove+0x12>
 800764c:	4402      	add	r2, r0
 800764e:	4601      	mov	r1, r0
 8007650:	428a      	cmp	r2, r1
 8007652:	d100      	bne.n	8007656 <memmove+0x2a>
 8007654:	bd10      	pop	{r4, pc}
 8007656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800765a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800765e:	e7f7      	b.n	8007650 <memmove+0x24>

08007660 <__malloc_lock>:
 8007660:	4801      	ldr	r0, [pc, #4]	; (8007668 <__malloc_lock+0x8>)
 8007662:	f7ff b9d1 	b.w	8006a08 <__retarget_lock_acquire_recursive>
 8007666:	bf00      	nop
 8007668:	20000358 	.word	0x20000358

0800766c <__malloc_unlock>:
 800766c:	4801      	ldr	r0, [pc, #4]	; (8007674 <__malloc_unlock+0x8>)
 800766e:	f7ff b9cc 	b.w	8006a0a <__retarget_lock_release_recursive>
 8007672:	bf00      	nop
 8007674:	20000358 	.word	0x20000358

08007678 <_realloc_r>:
 8007678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767a:	4607      	mov	r7, r0
 800767c:	4614      	mov	r4, r2
 800767e:	460e      	mov	r6, r1
 8007680:	b921      	cbnz	r1, 800768c <_realloc_r+0x14>
 8007682:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007686:	4611      	mov	r1, r2
 8007688:	f7ff ba74 	b.w	8006b74 <_malloc_r>
 800768c:	b922      	cbnz	r2, 8007698 <_realloc_r+0x20>
 800768e:	f7ff fa21 	bl	8006ad4 <_free_r>
 8007692:	4625      	mov	r5, r4
 8007694:	4628      	mov	r0, r5
 8007696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007698:	f000 f826 	bl	80076e8 <_malloc_usable_size_r>
 800769c:	42a0      	cmp	r0, r4
 800769e:	d20f      	bcs.n	80076c0 <_realloc_r+0x48>
 80076a0:	4621      	mov	r1, r4
 80076a2:	4638      	mov	r0, r7
 80076a4:	f7ff fa66 	bl	8006b74 <_malloc_r>
 80076a8:	4605      	mov	r5, r0
 80076aa:	2800      	cmp	r0, #0
 80076ac:	d0f2      	beq.n	8007694 <_realloc_r+0x1c>
 80076ae:	4631      	mov	r1, r6
 80076b0:	4622      	mov	r2, r4
 80076b2:	f7ff ffad 	bl	8007610 <memcpy>
 80076b6:	4631      	mov	r1, r6
 80076b8:	4638      	mov	r0, r7
 80076ba:	f7ff fa0b 	bl	8006ad4 <_free_r>
 80076be:	e7e9      	b.n	8007694 <_realloc_r+0x1c>
 80076c0:	4635      	mov	r5, r6
 80076c2:	e7e7      	b.n	8007694 <_realloc_r+0x1c>

080076c4 <_read_r>:
 80076c4:	b538      	push	{r3, r4, r5, lr}
 80076c6:	4d07      	ldr	r5, [pc, #28]	; (80076e4 <_read_r+0x20>)
 80076c8:	4604      	mov	r4, r0
 80076ca:	4608      	mov	r0, r1
 80076cc:	4611      	mov	r1, r2
 80076ce:	2200      	movs	r2, #0
 80076d0:	602a      	str	r2, [r5, #0]
 80076d2:	461a      	mov	r2, r3
 80076d4:	f7fe fd36 	bl	8006144 <_read>
 80076d8:	1c43      	adds	r3, r0, #1
 80076da:	d102      	bne.n	80076e2 <_read_r+0x1e>
 80076dc:	682b      	ldr	r3, [r5, #0]
 80076de:	b103      	cbz	r3, 80076e2 <_read_r+0x1e>
 80076e0:	6023      	str	r3, [r4, #0]
 80076e2:	bd38      	pop	{r3, r4, r5, pc}
 80076e4:	20000360 	.word	0x20000360

080076e8 <_malloc_usable_size_r>:
 80076e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ec:	1f18      	subs	r0, r3, #4
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	bfbc      	itt	lt
 80076f2:	580b      	ldrlt	r3, [r1, r0]
 80076f4:	18c0      	addlt	r0, r0, r3
 80076f6:	4770      	bx	lr

080076f8 <_init>:
 80076f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fa:	bf00      	nop
 80076fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076fe:	bc08      	pop	{r3}
 8007700:	469e      	mov	lr, r3
 8007702:	4770      	bx	lr

08007704 <_fini>:
 8007704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007706:	bf00      	nop
 8007708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800770a:	bc08      	pop	{r3}
 800770c:	469e      	mov	lr, r3
 800770e:	4770      	bx	lr
